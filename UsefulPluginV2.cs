/* 

* to do / в процессе / доделать:
? реакции на байт флаем/высотой
- проверки на байт хай лвлом/хил спеком

- NEED TO TEST: реакции на убитого игрока, паузу, действия на бг ОЗ и береге, логаут для ухода из пвп, движения в бою, байт флаем, маунты, спешивание на коне если бот стоит а его гупают, логаут, лив пати
*/

using robotManager.Helpful;
using System.Threading;
using robotManager.Products;
using wManager;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System;
using System.IO;
using System.ComponentModel;
using System.Linq;
using Timer = robotManager.Helpful.Timer;
using wManager.Wow.Class;
using System.Net;
using wManager.Wow.Bot.Tasks;
using Quester.Profile;
using System.Collections.Generic;
using robotManager.Events;
using robotManager.Helpful.Win32;
using System.Diagnostics;
using MemoryRobot;

public class Main : wManager.Plugin.IPlugin
{

    void xxxx()
    {

    }

    public void Initialize()
    {
        Var.SetVar("InitializedAndLaunched", false);
        InitializedAndLaunched = false;
        FramesCreated = false;
        MyRealName = me.Name;

        logs("плагин включен, версия: " + DateAndVersion + "");

        if (!Conditions.InGameAndConnected)
        {
            while (!Conditions.InGameAndConnected)
            {
                logs("инициализация невозможна пока не в игре, ожидаем");
                sleep(5000);
            }
            FramesCreated = false;
        }

        while (Products.IsStarted && !InitializedAndLaunched)
        {
            logs("инициализация...");
            print("инициализация...");
            if (!ObjectManager.Me.InCombat && !Fight.InFight)
            {
                Products.InPause = true;
                logs("начало инициализации - пауза");
                print("начало инициализации - пауза");
            }
            if(robotManager.Products.Products.ProductName == "Battlegrounder" && !Var.Exist("Battlegounder"))
            {
                logs("Стартовали с продуктом Battlegrounder");
                print("Стартовали с продуктом Battlegrounder");
                Var.SetVar("Battlegounder", true);
            }
            else
            {
                logs("Стартовали с продуктом " + Products.ProductName);
                print("Стартовали с продуктом " + Products.ProductName);
                Var.SetVar("Battlegounder", false);
            }
            GetLocale = Lua.LuaDoString<string>("return GetLocale()");
            Var.SetVar("GetLocale", GetLocale);
            wManager.Events.FightEvents.OnFightLoop += FightEventsOnOnFightLoop;
            EventsLuaWithArgs.OnEventsLuaWithArgs += LuaEvents;
            lastReadMessageId = Chat.Messages.Count - 1;
            FpsCooldown = DateTime.Now;
            PositionZTimer = DateTime.Now;
            TryToUseFlySwimPathCountResetTimer = DateTime.Now;
            StucksInFlightCountResetTimer = DateTime.Now;
            CheckHearhstoneTimer = DateTime.Now;
            LongMoveDistanceCountResetTimer = DateTime.Now;
            nextCheckEnemyNear = DateTime.Now;
            nextLootfilterPulse = DateTime.Now;
            FullbagsCheck = DateTime.Now;
            StuckCheck = DateTime.Now;
            SpiritHealerCheck = DateTime.Now;
            UnstuckCDTimer = DateTime.Now;
            FPScheck = DateTime.Now;
            //InvitePartyCheck = DateTime.Now;
            LeavePartyCheck = DateTime.Now;
            PvpFlagCheck = DateTime.Now;
            DummyCheck = DateTime.Now;
            CustomBuffsCheck = DateTime.Now;
            ReagentsCheck = DateTime.Now;
            FramesUpdatePulse = DateTime.Now;
            PauseButtonCheckPulse = DateTime.Now;
            NextGMCheck = DateTime.Now;
            TalentsPulse = DateTime.Now;
            MammothBaitCheckPulse = DateTime.Now;
            MountCheck = DateTime.Now;
            InviteAndLeavePartyPulse = DateTime.Now;
            MeInWaterCheck = DateTime.Now;
            RandomTargetAndAttackPlayersPulse = DateTime.Now;
            SettingsSpamPulse = DateTime.Now;
            CustomBuffsPotionsCheck = DateTime.Now;
            CustomBuffsCheck = DateTime.Now;
            HaterChecksPulse = DateTime.Now;
            PartyInviteCheck = DateTime.Now;
            MeIsTargettedBySomeone = DateTime.Now;
            CombatEventsCheck = DateTime.Now;
            CombatWithPlayerCheck = DateTime.Now;
            RestoreDownWowWindowPreTimer = DateTime.Now.AddSeconds(100);
            RestoreDownWhenNotInGameTimer = DateTime.Now.AddSeconds(100);
            BasicScriptsErrorsCloseTime = DateTime.Now;
            ScreenshotTime = DateTime.Now;
            MaximizeTime = DateTime.Now;
            WhoTargetMeTimer = DateTime.Now;
            LastManualMaximizeWoWWindowTime = DateTime.Now;
            StuckInLobbyTimer = DateTime.Now;
            GetGanked = false;
            KilledByPlayer = false;
            FlyBaitAlertTimer = DateTime.Now;
            InGhostAndFatigue = false;
            FlyingStuckPoint = me.Position;
            GroundStuckPoint = me.Position;
            CantReachStuckPosition = new Vector3(777777, 777777, 777777, "None");
            GMInGameCheckTimer = DateTime.Now;
            TryToUseFlySwimPathCountResetTimer = DateTime.Now.AddSeconds(60);
            TryingSomethingFunnyCountResetTimer = DateTime.Now.AddSeconds(650);
            TotownStatisticResetTimer = DateTime.Now;
            StuckStatisticResetTimer = DateTime.Now.AddSeconds(650);
            StuckResolverCountResetTimer = DateTime.Now.AddSeconds(650);
            Setting = wManagerSetting.CurrentSetting;
            HaveColdweatherFlying = SpellManager.KnowSpell("Cold Weather Flying");
            HaveClockwerk = Lua.LuaDoString<bool>(@"for i=1,GetNumCompanions('CRITTER') do creatureID, creatureName, spellID, icon, active = GetCompanionInfo('CRITTER', i) if spellID == 54187 then print('есть клокверк') return true end end");
            LastKilledByEnemyPlayerDeathPosition = new Vector3(100000, 100000, 100000, "None");
            PreviousKilledByEnemyPlayerDeathPosition = new Vector3(555555, 555555, 555555, "None");
            LastDeathPosition = new Vector3(111111, 111111, 111111, "None");
            PreviousDeathPosition = new Vector3(444444, 444444, 444444, "None");
            TenSecGankCheckLogEntry = DateTime.Now;
            LastDeathPositionResetTimer = DateTime.Now;
            ValleyofEchoesBugPoint = new Vector3(888888, 888888, 888888, "None");
            ValleyofEchoesBugPointStuckCount = 0;
            CheckIfFightClassDisposedTimer = DateTime.Now;
            LuaErrorCheckTimer = DateTime.Now;
            ShowLogsInWowChat = false;
            ShowLogsInWowChat2 = false;
            ReputationChangeInDesolaceTimer = DateTime.Now;
            NextInactiveActionTime = DateTime.Now;
            PvpEmoteTimer = DateTime.Now;
            Test10SecTimer = DateTime.Now;
            PartyMemberLastPos = new Vector3(0, 0, 0, "None");
            HaveNitro = Lua.LuaDoString<bool>("if GetInventoryItemID('player', 8) ~= nil then if string.find(GetInventoryItemLink('player', 8),'3606') then print('есть нитро') return true else print('нету нитро') end else print('нету сапогов (босый бамж)') end");
            Var.SetVar("HaveNitro", HaveNitro);
            NormalRenderValue = wManager.Wow.Memory.WowMemory.Memory.ReadUInt32(0x00CD774C);
            MountCountChangeCheckTime = DateTime.Now;
            OldMountCountValue = CurrentMountCountValue();
            TestLogSpamTimer = DateTime.Now;

            GenerateFrameNames();
            //sleep(2000);
            CreateAllFrames();
            //sleep(2000);

            if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600)
            {
                print("окно вов при старте плагина развернуто => ставим галку чтобы не сворачивалось, показ логов в чате вкл");
                logs("окно вов при старте плагина развернуто => ставим галку чтобы не сворачивалось, показ логов в чате вкл");
                runlua("if " + DontRestoreDownWowButtonFrameName + " then " + DontRestoreDownWowButtonFrameName + ":SetChecked(true) end if " + LogsButtonFrameName + " then " + LogsButtonFrameName + ":SetChecked(true) end");
                ShowLogsInWowChat = true;
                ShowLogsInWowChat2 = true;
            }

            logs("InitializeRealmFactionClass");
            print("InitializeRealmFactionClass");
            InitializeRealmFactionClass();

            logs("LoadFightClass");
            print("LoadFightClass");
            LoadFightClass();

            logs("InitializeHatersGuidsList");
            print("InitializeHatersGuidsList");
            InitializeHatersGuidsList();

            logs("InitializeHatersNamesList");
            print("InitializeHatersNamesList");
            InitializeHatersNamesList();

            logs("InitializeCommonTrashItemsList");
            print("InitializeCommonTrashItemsList");
            if (MeIsRangeClass)
                CommonTrashItemsList.Add("Primed Key Mold");
            if (Quest.QuesterCurrentContext.ProfileName.Contains("Alliance_1-80"))
            {
                CommonTrashItemsList.Remove("An Old History Book");
                CommonTrashItemsList.Remove("Grimesilt Outhouse Key");
                CommonTrashItemsList.Remove("A Mangled Journal");
                CommonTrashItemsList.Remove("Boulderfist Plans");
                if (ObjectManager.Me.Level < 55)
                {
                    CommonTrashItemsList.Remove("Basilisk Brain");
                    CommonTrashItemsList.Remove("Blasted Boar Lung");
                    CommonTrashItemsList.Remove("Scorpok Pincer");
                    CommonTrashItemsList.Remove("Snickerfang Jowl");
                    CommonTrashItemsList.Remove("Vulture Gizzard");
                    CommonTrashItemsList.Remove("Winterfall Ritual Totem");
                }
            }
            //InitializeCommonTrashItemsList();

            logs("InitializeCommonTrashItemsNumbersList");
            print("InitializeCommonTrashItemsNumbersList");
            InitializeCommonTrashItemsNumbersList();

            logs("InitializeDungeonTrashItemsList");
            print("InitializeDungeonTrashItemsList");
            InitializeDungeonTrashItemsList();

            logs("InitializeTrashFishList");
            print("InitializeTrashFishList");
            InitializeTrashFishList();

            logs("InitializeTrashHPFoodList");
            print("InitializeTrashHPFoodList");
            InitializeTrashHPFoodList();

            print("InitializeTrashManaDrinkList");
            logs("InitializeTrashManaDrinkList");
            InitializeTrashManaDrinkList();

            print("CalculateItemLevel");
            logs("CalculateItemLevel");
            CalculateItemLevel();

            print("WowInterfaceSettings");
            logs("WowInterfaceSettings");
            WowInterfaceSettings();

            print("WrobotSettings");
            logs("WrobotSettings");
            WrobotSettings();

            print("ScanMountListsForKnown");
            logs("ScanMountListsForKnown");
            ScanMountListsForKnown();

            print("SetMounts");
            logs("SetMounts");
            SetMounts();

            print("ErrorWarning100_499");
            logs("ErrorWarning100_499");
            ErrorWarning100_499();

            print("ErrorWarning500_5000");
            logs("ErrorWarning500_5000");
            ErrorWarning500_5000();

            if (!Conditions.InGameAndConnected)
            {
                int count = 0;
                while (!Conditions.InGameAndConnected)
                {
                    count++;
                    logs("ожидаем прогрузку 5 сек (до релоада)");
                    sleep(5000);
                    if (count > 15)
                    {
                        logs("недождались прогрузку прогрузку 5 сек (до релоада)");
                        break;
                    }
                }
            }

            if (Conditions.InGameAndConnected)
            {
                if (!MeIsKacher())
                    runlua("DisableAllAddOns()");
                runlua("if UnitLevel('player') >= 80 then if GetUnitName('player') ~= 'Iove' then DisableAllAddOns() end end ReloadUI()");
                sleep(3000);
            }

            if (!Conditions.InGameAndConnected)
            {
                int count = 0;
                while (!Conditions.InGameAndConnected)
                {
                    count++;
                    logs("ожидаем прогрузку 5 сек (после релоада)");
                    sleep(5000);
                    if (count > 15)
                    {
                        logs("недождались прогрузку прогрузку 5 сек (после релоада)");
                        break;
                    }
                }
            }

            logs("Locked and loaded! [" + DateAndVersion + "]");
            print("Locked and loaded! [" + DateAndVersion + "]");

            /*print("PvpFlagCheckOnInitialize");
            logs("PvpFlagCheckOnInitialize");
            PvpFlagCheckOnInitialize();*/

            IsLaunched = true;

            print("CheckLogs");
            logs("CheckLogs");
            CheckLogs();

            //DisableRenderTexture();
            if (!InitializedAndLaunched)
            {
                Var.SetVar("InitializedAndLaunched", true);
                InitializedAndLaunched = true;
            }
            print("Core");
            logs("Core");
            Products.InPause = false;
            Core();

            sleep(1000);
        }
    }

    public void Dispose()
    {
        //EnableRenderTexture();
        wManager.Events.FightEvents.OnFightLoop -= FightEventsOnOnFightLoop;
        EventsLuaWithArgs.OnEventsLuaWithArgs -= LuaEvents;
        LoggingEvents.OnAddLog -= delegate (Logging.Log log) { };
        runlua("SetCVar('maxFPS','15') SetCVar('maxFPSBk','15') if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Hide() end if " + ButtonsFrameName + " then " + ButtonsFrameName + ":Hide() end if " + PauseButtonFrameName + " then " + PauseButtonFrameName + "Text:SetText('P OFF') " + PauseButtonFrameName + ":SetChecked(false) end");
        logs("плагин отключен, версия: " + DateAndVersion + "");
        print("плагин отключен, версия: " + DateAndVersion + "");
        IsLaunched = false;
        InitializedAndLaunched = false;
        ScanMountListsForKnownLUAlaunched = false;
        //robotManager.Products.Products.OnChangedIsStarted -= OnChangedIsStarted;
    }

    public void Settings()
    {
        //robotManager.Products.Products.OnChangedIsStarted += OnChangedIsStarted;
    }

    public void Core()
    {
        while (IsLaunched && Products.IsStarted)
        {
            try
            {

                if (Conditions.InGameAndConnected)
                {

                    PauseButtonCheck();
                    ChatCheck();
                    CenterTextFrameUpdate();
                    Test();

                    if (!Products.InPause)
                    {

                        if (GetGanked || KilledByPlayer)
                        {
                            while (me.HaveBuff("Ghost"))
                            {
                                if (Conditions.InGameAndConnected)
                                {
                                    if (DateTime.Now > TenSecGankCheckLogEntry)
                                    {
                                        TenSecGankCheckLogEntry = DateTime.Now.AddSeconds(10);
                                        logs("усиленный чек ганка задействован (2-4 раза в сек)");
                                        print("усиленный чек ганка задействован (2-4 раза в сек)");
                                    }
                                    GankCheckInGhost();
                                    sleep(rnd(250, 500));
                                }
                                if (!Conditions.InGameAndConnected)
                                {
                                    PauseOff();
                                    logs("выход из цикла, запаузился в меню");
                                    break;
                                }
                            }
                        }

                        if (SettingsSpamPulse < DateTime.Now) // 80% важных функций
                        {
                            ImportantFunctionsRandomCheckTime = rnd(10, 21); // глобал кд на проверки
                            SettingsSpamPulse = DateTime.Now.AddSeconds(ImportantFunctionsRandomCheckTime);
                            //CheckHearthStone();
                            KillRobotIfFullBags();
                            WaitSickness();
                            AutoRestoreDownWowWindow();
                            //LogoutIfCannotFlyWithColdweaterFlyingInKrasusLanding();
                            FoodCheckAndRegenControl();
                            DismountOnMaxSkyPositionZ();
                            LogsInWowChat();
                            ForceCheckColdweaterFlyingAndMountsIfNecessary();
                            //WhereIsMyElevators();
                            LatencyIsPing();
                            FpsControlWhenIdle();
                            DisableAndEnableRepairAndSelling();
                            StaticPopupCheck();
                            UseSpiritHealerWhenDeadInBlacrockMagma();
                            ResetTimersAndCountsAndPositions();
                            MiningAndGatheringFunctions();
                            KillProcessInRestrictedAreas();
                            StuckInValleyOfEchoesCircleBug();
                            DetectStuckInWater();
                            DetectFlightStuckPoints();
                            DetectGroundStuckPoints();
                            //PvpFlagLogoutInCity();
                            Reagents();
                            CheckLuaErrors();
                            ReloadFightClassIfNotLoaded();
                            FishingChecks();
                            LogoutIfDeadInGhostBug();
                            PauseOnShittyBGs();
                            DisableIgnoreFightIfNoBait();
                            MeInWaterActions();
                            //ActivateTaxiNodes();
                            DismountWhenMeIsAttackedOnLowHPAndStayIdle();
                            DisableFightAndRegenInCoilfang();
                        }

                        /*if (RealmShortName == "Circle LK x5")
                            HaterAlert();*/

                        LootFilter();
                        TargetAlert();
                        GMCheck();
                        CustomBuffsAndPotions();
                        LeavePartyOrNot();
                        DontHitDummy();
                        FastEscapeFromDungeonRespawns();
                        Kach();

                        // сброс позиций застряваний //
                        if (!Fight.InFight && !me.IsFlying && !Products.InPause && me.GetMove && me.Position.DistanceTo2D(GroundStuckPoint) >= 15)
                        {
                            Var.SetVar("OneGroundPointCount", 0);
                            //logs("сброс точки на земле если продолжаем двигаться");
                            //print("сброс точки на земле если продолжаем двигаться");
                            GroundStuckPoint = me.Position;
                        }

                        if (me.IsFlying && me.GetMove && !Products.InPause && me.Position.DistanceTo(FlyingStuckPoint) >= 30)
                        {
                            Var.SetVar("OneFlyingPointCount", 0);
                            //logs("сброс точки в полете когда продолжаем лететь");
                            //print("сброс точки в полете когда продолжаем лететь");
                            FlyingStuckPoint = me.Position;
                        }

                    }
                }

                if (!Conditions.InGameAndConnected)
                {

                    Var.SetVar("NotConnectedCount", Var.GetVar<int>("NotConnectedCount") + 1);
                    logs("мы не в игре " + Var.GetVar<int>("NotConnectedCount") + " сек");
                    if (FramesCreated)
                    {
                        logs("не в игре, нужно пересоздать фреймы");
                        FramesCreated = false;
                    }
                    if (Var.GetVar<int>("NotConnectedCount") > 15 && RestoreDownWowWindowPreTimer < DateTime.Now && !Products.InPause)
                    {
                        logs("свернуть вов если не в игре больше " + Var.GetVar<int>("NotConnectedCount") + "+ сек и не в паузе");
                        RestoreDownWowWindowPreTimer = DateTime.Now.AddSeconds(100);
                        RestoreDownWowWindow();
                    }

                    if (!GetGanked)
                    {
                        if (Var.GetVar<int>("NotConnectedCount") > rnd(600, 1000) && Products.InPause)
                        {
                            logs("мы не в игре и в паузе " + Var.GetVar<int>("NotConnectedCount") + "+ сек, оф паузы, ганка не было");
                            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: мы не в игре и в паузе " + Var.GetVar<int>("NotConnectedCount") + "+ сек, оф паузы, ганка не было");
                            PauseOff();
                        }
                    }

                    if (GetGanked)
                    {
                        if (Var.GetVar<int>("NotConnectedCount") > rnd(1200, 1800) && Products.InPause)
                        {
                            logs("мы не в игре и в паузе " + Var.GetVar<int>("NotConnectedCount") + "+ сек, оф паузы, был ганк");
                            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: мы не в игре и в паузе " + Var.GetVar<int>("NotConnectedCount") + "+ сек, оф паузы, был ганк");
                            PauseOff();
                        }
                    }
                }
            }
            catch { }
            sleep(1000);
        }
    }
    public bool Tolko4toBil = false;
    private void CheckHearthStone()
    {
        if(CheckHearhstoneTimer < System.DateTime.Now)
        {
            if(ItemsManager.GetItemCountById(6948) > 0 && Conditions.InGameAndConnected)
            {
                string hsstate = ItemsManager.GetItemCountById(6948) > 0 ? "есть камень" : "камня нет";
                Tolko4toBil = true;
                logs("[CheckHs] [" + MyRealName + ", " + me.Level + " lvl] " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + ", фк: " + Setting.CustomClass + ", профиль: " + ProfileName() + ", сервер: " + RealmShortName + ", " + hsstate);
                CheckHearhstoneTimer = System.DateTime.Now.AddSeconds(10);
                return;
            }
            if(!ItemsManager.HasItemById(6948) && Tolko4toBil && Conditions.InGameAndConnected)
            {
                Tolko4toBil = false;
                MaximizeWowWindow();
                ScreenAlertVisualMedium("Пропал камень токшо");
                string hsstate = "Камень только что был и пропал";
                logs("[CheckHs] [" + MyRealName + ", " + me.Level + " lvl] " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + ", фк: " + Setting.CustomClass + ", профиль: " + ProfileName() + ", сервер: " + RealmShortName + ", " + hsstate);
                SendDiscordMessageHearthstone("[CheckHs] [" + MyRealName + ", " + me.Level + " lvl] " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + ", фк: " + Setting.CustomClass + ", профиль: " + ProfileName() + ", сервер: " + RealmShortName + ", " + hsstate);
                PauseOn();
                CheckHearhstoneTimer = System.DateTime.Now.AddSeconds(60);
            }            
        }
        
    }
    private void FindAndOpenMailbox()
    {
        if (!CtmToMailboxLaunched && !me.InCombat && !Fight.InFight)
        {
            CtmToMailboxLaunched = true;
            logs("[FindAndOpenMailbox] найти и открыть почту");

            if (FramesCreated)
            {
                runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() " + CenterTextFrameName + ":SetAlpha(1) end");
            }

            if (Usefuls.MapZoneName == "Dalaran")
            {
                logs("[FindAndOpenMailbox] даларан");
                ScreenAlertVisualTextOnly("[FindAndOpenMailbox] даларан");

                List<Vector3> dalamailboxespos = new List<Vector3>
                {
                new Vector3(5740.3, 680.889, 644.657, "Flying"),
                new Vector3(5800.74, 731.102, 640.43, "Flying"),
                new Vector3(5853.02, 669.451, 644.257, "Flying"),
                new Vector3(5927.67, 644.708, 645.509, "Flying"),
                new Vector3(5917.04, 616.764, 646.294, "Flying"),
                new Vector3(5862.67, 638.684, 647.16, "Flying"),
                new Vector3(5797.91, 558.436, 650.719, "Flying"),
                new Vector3(5743.08, 626.958, 648.404, "Flying"),
                new Vector3(5690.92, 681.939, 646.131, "Flying"),
                new Vector3(5886.26, 716.328, 640.542, "Flying"),
                };

                var nearestmailbox = ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox);
                var nearestmailboxposfromlist = dalamailboxespos.OrderBy(p => p.DistanceTo(ObjectManager.Me.Position)).FirstOrDefault();
                var nearestmailboxpos = nearestmailbox.Position;

                CastGroundMount();

                if (nearestmailbox != null)
                {
                    System.Threading.Tasks.Task.Factory.StartNew(() =>
                    {
                        while (ObjectManager.Me.Position.DistanceTo(nearestmailboxpos) > 2f && Conditions.InGameAndConnectedAndProductStarted && !me.IsDead && CtmToMailboxLaunched)
                        {
                            ScreenAlertVisualTextOnly("расстояние до почты: " + (int)ObjectManager.Me.Position.DistanceTo(nearestmailboxpos) + "");
                            sleep(500);
                        }
                        if ((ObjectManager.Me.Position.DistanceTo(nearestmailboxpos) <= 5f || me.IsDead || !CtmToMailboxLaunched) && FramesCreated)
                        {
                            runlua("UIFrameFadeOut(" + CenterTextFrameName + ", 2, " + CenterTextFrameName + ":GetAlpha(), 0)");
                            return;
                        }
                    });

                    logs("[FindAndOpenMailbox] рядом есть почта, двигаем к ней (" + nearestmailboxpos + ")");
                    CtmPathfinder(nearestmailboxpos, OffPauseAtEnd: false);
                    logs("интеракт с почтой");
                    Interact.InteractGameObject(nearestmailbox.GetBaseAddress);
                }
                else
                {
                    logs("[FindAndOpenMailbox] рядом нет почты, юзаем из списка даларана (" + nearestmailboxposfromlist + ")");
                    CtmPathfinder(nearestmailboxposfromlist, OffPauseAtEnd: false);
                    logs("[FindAndOpenMailbox] интеракт с почтой");
                    Interact.InteractGameObject(ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox).GetBaseAddress);
                }
            }

            else if (Usefuls.ContinentId == (int)ContinentId.Northrend && Usefuls.MapZoneName != "Dalaran")
            {
                logs("[FindAndOpenMailbox] нордскол");
                ScreenAlertVisualTextOnly("[FindAndOpenMailbox] нордскол");

                List<Vector3> availablemailboxespos = new List<Vector3>();

                List<Vector3> alimailboxespos = new List<Vector3>
                {
                new Vector3(4166.27, 5286.08, 26.3592, "Flying"),
                new Vector3(3474.54, 2005.07, 64.8327, "Flying"),
                new Vector3(3668.74, -703.615, 214.527, "Flying"),
                new Vector3(4600.57, -4235.31, 178.654, "Flying"),
                new Vector3(1419.09, -3265.81, 165.236, "Flying"),
                new Vector3(8592.53, 693.717, 547.292, "Flying"),
                };

                List<Vector3> hordemailboxespos = new List<Vector3>
                {
                new Vector3(3458.64, 4132.49, 15.0433, "Flying"),
                new Vector3(3827.81, 1533.66, 89.6992, "Flying"),
                new Vector3(3240.61, -2236.58, 115.106, "Flying"),
                new Vector3(442.13, -4555.78, 245.471, "Flying"),
                new Vector3(7809.58, -2956.83, 1257.5, "Flying"),
                new Vector3(8452.82, 683.806, 547.283, "Flying"),
                };

                List<Vector3> commmailboxespos = new List<Vector3>
                {
                new Vector3(5417.15, -2620.26, 307.009, "Flying"),
                new Vector3(5483.01, -2644.76, 307.036, "Flying"),
                new Vector3(6126.48, -1070.95, 403.103, "Flying"),
                };

                availablemailboxespos.AddRange(commmailboxespos);

                if (ObjectManager.Me.IsAlliance)
                    availablemailboxespos.AddRange(alimailboxespos);
                else if (ObjectManager.Me.IsHorde)
                    availablemailboxespos.AddRange(hordemailboxespos);

                var nearestmailboxposfromlist = availablemailboxespos.OrderBy(p => p.DistanceTo(ObjectManager.Me.Position)).FirstOrDefault();

                if (Usefuls.IsFlyableArea && me.IsOutdoors && Setting.UseFlyingMount && Setting.FlyingMountName != "")
                {
                    if ((Usefuls.ContinentId == (int)ContinentId.Northrend && HaveColdweatherFlying) || Usefuls.ContinentId != (int)ContinentId.Northrend)
                        CastFlyMount(EnableJump: true, JumpTime: 500);
                }

                if (!Setting.UseFlyingMount && Setting.UseMount && Setting.GroundMountName != "" && me.IsOutdoors)
                    CastGroundMount();

                System.Threading.Tasks.Task.Factory.StartNew(() =>
                {
                    while (ObjectManager.Me.Position.DistanceTo(nearestmailboxposfromlist) > 2f && Conditions.InGameAndConnectedAndProductStarted && !me.IsDead && CtmToMailboxLaunched)
                    {
                        ScreenAlertVisualTextOnly("расстояние до почты: " + (int)ObjectManager.Me.Position.DistanceTo(nearestmailboxposfromlist) + "");
                        sleep(500);
                    }
                    if ((ObjectManager.Me.Position.DistanceTo(nearestmailboxposfromlist) <= 5f || me.IsDead || !CtmToMailboxLaunched) && FramesCreated)
                    {
                        runlua("UIFrameFadeOut(" + CenterTextFrameName + ", 2, " + CenterTextFrameName + ":GetAlpha(), 0)");
                        return;
                    }
                });

                logs("[FindAndOpenMailbox] двигаем к ближайшей почте из списка нордскола (" + nearestmailboxposfromlist + ")");
                CtmPathfinder(nearestmailboxposfromlist, OffPauseAtEnd: false);

                var nearestmailbox = ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox);

                if (nearestmailbox != null)
                {
                    logs("[FindAndOpenMailbox] интеракт с почтой");
                    Interact.InteractGameObject(nearestmailbox.GetBaseAddress);
                }
            }
            // outland
            else if (Usefuls.ContinentNameMpq == "Expansion01" && !(Usefuls.MapZoneName == "Silvermoon City" || Usefuls.MapZoneName == "Eversong Woods" || Usefuls.MapZoneName == "Ghostlands" || Usefuls.MapZoneName == "The North Sea" || Usefuls.MapZoneName == "The Exodar" || Usefuls.MapZoneName == "Bloodmyst Isle" || Usefuls.MapZoneName == "Azuremyst Isle" || Usefuls.MapZoneName == "The Veiled Sea"))
            {
                List<Vector3> availablemailboxespos = new List<Vector3>();

                List<Vector3> OutlandCommMailboxesPos = new List<Vector3>
                {
                new Vector3(-198.708, 5507.99, 22.2667, "Flying"),
                new Vector3(3056.5, 3687.03, 142.749, "Flying"),
                };

                List<Vector3> OutlandAliMailboxesPos = new List<Vector3>
                {
                new Vector3(-2929.39, 4008.92, -1.38917, "Flying"),
                new Vector3(-4055.28, 2177.05, 110.301, "Flying"),
                new Vector3(-2673.14, 7288.92, 36.853, "Flying"),
                new Vector3(195.273, 4326.39, 116.895, "Flying"),
                };

                List<Vector3> OutlandHordeMailboxesPos = new List<Vector3>
                {
                new Vector3(-2615.29, 4417.97, 35.9884, "Flying"),
                new Vector3(258.91, 7870.72, 23.014, "Flying"),
                new Vector3(-1267.71, 7175.02, 57.3099, "Flying"),
                new Vector3(-596.531, 4151.75, 65.4322, "Flying"),
                };


                if (OutlandCommMailboxesPos.Count > 0)
                    availablemailboxespos.AddRange(OutlandCommMailboxesPos);

                if (OutlandAliMailboxesPos.Count > 0 && ObjectManager.Me.IsAlliance)
                    availablemailboxespos.AddRange(OutlandAliMailboxesPos);

                if (OutlandHordeMailboxesPos.Count > 0 && ObjectManager.Me.IsHorde)
                    availablemailboxespos.AddRange(OutlandHordeMailboxesPos);

                var nearestmailboxposfromlist = availablemailboxespos.OrderBy(p => p.DistanceTo(ObjectManager.Me.Position)).FirstOrDefault();

                if (Usefuls.IsFlyableArea && me.IsOutdoors && Setting.UseFlyingMount && Setting.FlyingMountName != "")
                {
                    if ((Usefuls.ContinentNameMpq == "Northrend" && HaveColdweatherFlying) || Usefuls.ContinentNameMpq != "Northrend")
                        CastFlyMount(EnableJump: true, JumpTime: 500);
                }

                if (!Setting.UseFlyingMount && Setting.UseMount && Setting.GroundMountName != "" && me.IsOutdoors)
                    CastGroundMount();

                System.Threading.Tasks.Task.Factory.StartNew(() =>
                {
                    while (ObjectManager.Me.Position.DistanceTo(nearestmailboxposfromlist) > 2f && Conditions.InGameAndConnectedAndProductStarted && !me.IsDead && CtmToMailboxLaunched && IsLaunched && Products.InPause)
                    {
                        ScreenAlertVisualTextOnly("расстояние до почты: " + (int)ObjectManager.Me.Position.DistanceTo(nearestmailboxposfromlist) + "");
                        sleep(500);
                    }
                    if ((ObjectManager.Me.Position.DistanceTo(nearestmailboxposfromlist) <= 5f || me.IsDead || !CtmToMailboxLaunched || !IsLaunched) && FramesCreated)
                    {
                        runlua("UIFrameFadeOut(" + CenterTextFrameName + ", 2, " + CenterTextFrameName + ":GetAlpha(), 0)");
                        return;
                    }
                });

                logs("[FindAndOpenMailbox] двигаем к ближайшей почте из списка запрелелья (" + nearestmailboxposfromlist + ")");
                CtmPathfinder(nearestmailboxposfromlist, OffPauseAtEnd: false);

                var nearestmailbox = ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox);

                if (nearestmailbox != null)
                {
                    logs("[FindAndOpenMailbox] интеракт с почтой");
                    Interact.InteractGameObject(nearestmailbox.GetBaseAddress);
                }
            }
            else if (ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox) != null)
            {
                var nearestmailbox = ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox);

                if (Usefuls.IsFlyableArea && me.IsOutdoors && Setting.UseFlyingMount && Setting.FlyingMountName != "")
                {
                    if ((Usefuls.ContinentId == (int)ContinentId.Northrend && HaveColdweatherFlying) || Usefuls.ContinentId != (int)ContinentId.Northrend)
                        CastFlyMount(EnableJump: true, JumpTime: 500);
                }

                if (!Setting.UseFlyingMount && Setting.UseMount && Setting.GroundMountName != "" && me.IsOutdoors)
                    CastGroundMount();

                System.Threading.Tasks.Task.Factory.StartNew(() =>
                {
                    while (ObjectManager.Me.Position.DistanceTo(nearestmailbox.Position) > 2f && Conditions.InGameAndConnectedAndProductStarted && !me.IsDead && CtmToMailboxLaunched)
                    {
                        ScreenAlertVisualTextOnly("расстояние до почты: " + (int)ObjectManager.Me.Position.DistanceTo(nearestmailbox.Position) + "");
                        sleep(500);
                    }
                    if ((ObjectManager.Me.Position.DistanceTo(nearestmailbox.Position) <= 5f || me.IsDead || !CtmToMailboxLaunched) && FramesCreated)
                    {
                        runlua("UIFrameFadeOut(" + CenterTextFrameName + ", 2, " + CenterTextFrameName + ":GetAlpha(), 0)");
                        return;
                    }
                });

                logs("[FindAndOpenMailbox] рядом есть почта, двигаем к ней (" + nearestmailbox.Position + ")");
                CtmPathfinder(ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox).Position, OffPauseAtEnd: false);
                logs("интеракт с почтой");
                Interact.InteractGameObject(nearestmailbox.GetBaseAddress);
            }

            else if (ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox) == null && ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) < 2000)
            {
                logs("[FindAndOpenMailbox] почта не найдена, каст хс");
                ScreenAlertVisualTextOnly("почта не найдена, каст хс");
                CastHS();
                sleep(5000);

                var nearestmailbox = ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox);

                if (nearestmailbox != null)
                {
                    if (Usefuls.IsFlyableArea && me.IsOutdoors && Setting.UseFlyingMount && Setting.FlyingMountName != "")
                    {
                        if ((Usefuls.ContinentId == (int)ContinentId.Northrend && HaveColdweatherFlying) || Usefuls.ContinentId != (int)ContinentId.Northrend)
                            CastFlyMount(EnableJump: true, JumpTime: 500);
                    }

                    if (!Setting.UseFlyingMount && Setting.UseMount && Setting.GroundMountName != "" && me.IsOutdoors)
                        CastGroundMount();

                    System.Threading.Tasks.Task.Factory.StartNew(() =>
                    {
                        while (ObjectManager.Me.Position.DistanceTo(nearestmailbox.Position) > 2f && Conditions.InGameAndConnectedAndProductStarted && !me.IsDead && CtmToMailboxLaunched)
                        {
                            ScreenAlertVisualTextOnly("расстояние до почты: " + (int)ObjectManager.Me.Position.DistanceTo(nearestmailbox.Position) + "");
                            sleep(500);
                        }
                        if ((ObjectManager.Me.Position.DistanceTo(nearestmailbox.Position) <= 5f || me.IsDead || !CtmToMailboxLaunched) && FramesCreated)
                        {
                            runlua("UIFrameFadeOut(" + CenterTextFrameName + ", 2, " + CenterTextFrameName + ":GetAlpha(), 0)");
                            return;
                        }
                    });

                    logs("[FindAndOpenMailbox] рядом есть почта, двигаем к ней (" + nearestmailbox.Position + ")");
                    CtmPathfinder(ObjectManager.GetObjectWoWGameObject().OrderBy(o => o.GetDistance).FirstOrDefault(o => o.IsMailbox).Position, OffPauseAtEnd: false);
                    logs("[FindAndOpenMailbox] интеракт с почтой");
                    Interact.InteractGameObject(nearestmailbox.GetBaseAddress);
                }
            }

            CtmToMailboxLaunched = false;
        }
    }
    private void CastHS()
    {
        if (ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) < 2000)
        {
            //PauseOn("[CastHS]");
            logs("каст хс");

            WaitFalling();

            if (me.GetMove)
                MovementManager.StopMove();

            if (ImPal && me.IsFlying && SpellManager.SpellUsableLUA("Divine Shield") && SpellManager.KnowSpell(642))
            {
                SpellManager.CastSpellByNameLUA("Divine Shield");
                logs("[CastHS] прожали в полете бабл для каста хс, чтобі не приземляться на флае");
                Thread.Sleep(2000);
                WaitFalling();
            }

            if (ObjectManager.Me.IsFlying)
                MountTask.Land();

            if (!ObjectManager.Me.IsFlying && !ObjectManager.Me.IsCast)
            {
                while (Conditions.InGameAndConnected && Bag.GetContainerItemCooldown(6948) < 2000 && Bag.GetContainerItemCooldown(6948) > 0)
                    sleep(2000);
                logs("[CastHS] каст хс");
                ItemsManager.UseItem(6948);
                sleep(10000 + latency);
                Usefuls.WaitIsCasting();
            }

            var count = 0;
            while (!Conditions.InGameAndConnected && count < 10)
            {
                count++;
                logs("[CastHS] прогрузка после каста хс " + count + "");
                sleep(1000);
            }
            //PauseOff();
        }
    }
    private void CastFlyMount(bool EnableJump, int JumpTime)
    {
        WaitFalling();
        if (!MeIsMountedOrHaveDruidForm() && !MeIsFalling() && !me.IsSwimming && !me.InCombatFlagOnly && !Fight.InFight && Usefuls.IsFlyableArea && Setting.UseFlyingMount && Setting.FlyingMountName != "")
        {
            logs("CastFlyMount");
            SpellManager.CastSpellByNameLUA(Setting.FlyingMountName);
            sleep(1500 + Usefuls.LatencyReal);
            Usefuls.WaitIsCasting();
            if (EnableJump)
            {
                if (MeIsOnFlyMount() && !me.IsFlying)
                {
                    logs("[CtmOnFlyMount] мы на маунте но не в полете, взлет пробелом " + JumpTime + "мс");
                    Move.JumpOrAscend(Move.MoveAction.PressKey, JumpTime);
                }
            }
        }
    }
    private void CastGroundMount()
    {
        WaitFalling();
        if (!MeIsMountedOrHaveDruidForm() && !MeIsFalling() && !me.IsSwimming && !me.InCombatFlagOnly && !Fight.InFight && me.IsOutdoors && Setting.UseMount && Setting.GroundMountName != "")
        {
            logs("CastGroundMount");
            SpellManager.CastSpellByNameLUA(Setting.GroundMountName);
            sleep(1500 + Usefuls.LatencyReal);
            Usefuls.WaitIsCasting();
        }
    }
    private void WaitFalling()
    {
        while (Conditions.InGameAndConnectedAndProductStarted && MeIsFalling() && Var.GetVar<int>("FallingTime") < 30000)
        {
            logs("ждем пока чар упадет");
            sleep(100);
            Var.SetVar("FallingTime", Var.GetVar<int>("FallingTime") + 100);
        }
        if (Var.GetVar<int>("FallingTime") >= 30000)
            logs("падал 30 секунд, так и не упал :D");
        Var.SetVar("FallingTime", 0);
    }
    private bool MeIsFalling()
    {
        return Lua.LuaDoString<bool>("if IsFalling() == 1 then return true end");
    }
    private void CtmPathfinder(Vector3 position, bool OffPauseAtEnd)
    {
        PauseOn();
        runlua("SetCVar('maxFPS','30') SetCVar('maxFPSBk','30')");

        List<Vector3> Path = PathFinder.FindPath(position);

        if (Usefuls.IsFlyableArea && Setting.UseFlyingMount && Setting.FlyingMountName != "" && HaveColdweatherFlying && Usefuls.MapZoneName != "Dalaran")
        {
            foreach (Vector3 point in Path)
            {
                point.Z += (float)15;
            }
            Path[Path.Count - 1].Z -= (float)15;
            Path[Path.Count - 2].Z -= (float)15;
            Path[Path.Count - 3].Z -= (float)15;
        }

        foreach (Vector3 point in Path)
        {
            DateTime pointmaxtime = System.DateTime.Now.AddSeconds(20);
            while (ObjectManager.Me.Position.DistanceTo(point) > 2f && Conditions.InGameAndConnectedAndProductStarted && !me.IsDead && Lua.LuaDoString<bool>("if " + PauseButtonFrameName + " then if " + PauseButtonFrameName + ":GetChecked() == 1 then return true end end"))
            {

                if (!ObjectManager.Me.GetMove)
                {
                    ClickToMove.CGPlayer_C__ClickToMove(point.X, point.Y, point.Z, 0, (int)wManager.Wow.Enums.ClickToMoveType.Move, 1f);
                    Logging.Write("клик " + point.ToStringNewVector());
                }
                if(System.DateTime.Now > pointmaxtime)
                {
                    MovementManager.StopMove();
                    Logging.Write("застряли - анстак");
                    wManager.Wow.Helpers.Keybindings.PressKeybindings(wManager.Wow.Enums.Keybindings.MOVEBACKWARD, Others.Random(1000, 2000));
                    wManager.Wow.Helpers.Keybindings.PressKeybindings(wManager.Wow.Enums.Keybindings.JUMP, Others.Random(1000, 2000));
                    break;
                    
                }
                Thread.Sleep(200);
            }
            if (!Conditions.InGameAndConnectedAndProductStarted || me.IsDead || !Products.InPause)
                break;
        }

        if (OffPauseAtEnd)
            PauseOff();
    }
    /* private void PauseOn(string reason)
     {
         if (!Products.InPause)
         {
             if (Conditions.InGameAndConnected)
             {
                 if (FramesNamesCreated && FramesCreated)
                     runlua("if " + PauseButtonFrameName + " then " + PauseButtonFrameName + ":SetChecked(true) " + PauseButtonFrameName + "Text:SetText('P ON') print('+') end");

                 if (!me.InCombatFlagOnly && Lua.LuaDoString<bool>("if GetFramerate() >= 16 then return true end"))
                 {
                     logs("15 фпс при вызове паузы не в бою");
                     runlua("SetCVar('maxFPS','15') SetCVar('maxFPSBk','15')");
                 }
             }

             if (!InGame() && Lua.LuaDoString<bool>("if GetFramerate() >= 11 then return true end"))
             {
                 logs("10 фпс при вызове паузы не в игре");
                 Lua.LuaDoString("SetCVar('maxFPS','10') SetCVar('maxFPSBk','10')", notInGameMode: true);
             }

             logs("PauseOn, " + reason);
             Products.InPause = true;
         }
     }*/
    private bool InGame()
    {
        
        return wManager.Wow.Memory.WowMemory.Memory.ReadBoolean(0x00BD078A);
    }
    private void DisableFightAndRegenInCoilfang()
    {
        if (Var.GetVar<int>("WasIsCoilfang") == 0 && (Subzone().Contains("Coilfang") || Mapzone().Contains("Coilfang")))
        {
            logs("вкл игнор файта и выкл реген в коилфанге");
            print("вкл игнор файта и выкл реген в коилфанге");
            Var.SetVar("WasIsCoilfang", 1);
            Conditions.ForceIgnoreIsAttacked = true;
            Setting.FoodMaxPercent = 1;
            Setting.FoodPercent = 1;
        }

        if (Var.GetVar<int>("WasIsCoilfang") == 1 && !Subzone().Contains("Coilfang") && !Mapzone().Contains("Coilfang"))
        {
            logs("выкл игнор файта и вкл норм реген если был до этого в коилфанге");
            print("выкл игнор файта и вкл норм реген если был до этого в коилфанге");
            Var.SetVar("WasIsCoilfang", 0);
            Conditions.ForceIgnoreIsAttacked = false;
            NormalRegenSettings();
        }
    }

    private void EnableRenderTexture()
    {
        if (Usefuls.WowVersion == 12340 && wManager.Wow.Memory.WowMemory.Memory.ReadUInt32(0x00CD774C) != NormalRenderValue)
        {
            wManager.Wow.Memory.WowMemory.Memory.WriteUInt32(0x00CD774C, NormalRenderValue);
            logs("текстуры включены");
            print("текстуры включены");
        }
    }

    private int CurrentMountCountValue()
    {
        return Lua.LuaDoString<int>("return GetNumCompanions('MOUNT')");
    }

    private void DisableRenderTexture()
    {
        if (Usefuls.WowVersion == 12340 && wManager.Wow.Memory.WowMemory.Memory.ReadUInt32(0x00CD774C) == NormalRenderValue)
        {
            wManager.Wow.Memory.WowMemory.Memory.WriteUInt32(0x00CD774C, 0);
            logs("текстуры выключены");
            print("текстуры выключены");
        }
    }

    private void WrobotSettings()
    {
        Setting.BlackListHarvestByName.Clear();
        Setting.BlackListHarvest.Clear();
        Setting.ListHarvest.Clear();
        Setting.ListHarvestByName.Clear();
        logs("список собираемых обьектов по id и по имени был очищен");
        print("список собираемых обьектов по id и по имени был очищен");

        if (MyRealName != "Метка" && MyRealName != "Cold" && MyRealName != "Nick" && MyRealName != "Жёсткая" && MyRealName != "Некласс")
        {
            print("|cffFF0000ATTENTION!|cffFFFFFF Список Do not sell list был очищен! Эпик и синька могут быть проданы вендору!");
            logs("Список Do not sell list был очищен! Эпик и синька могут быть проданы вендору!");
            Setting.DoNotSellList.Clear();
        }

        // блеклист жил на гринде лоу лвл регах //
        if (ProfileName().Contains("Grinder") || ProfileName().Contains("Alpha") || ProfileName().Contains("Dungeon"))
        {
            List<string> BlackListNodes = new List<string>()
                {
            "Copper Vein",
            "Incendicite Mineral Vein",
            "Tin Vein",
            "Lesser Bloodstone Deposit",
            "Silver Vein",
            "Iron Deposit",
            "Gold Vein",
            "Mithril Deposit",
            "Truesilver Deposit",
            "Dark Iron Deposit",
            "Small Thorium Vein",
            "Rich Thorium Vein",
            "Fel Iron Deposit",
            "Adamantite Deposit",
            "Rich Adamantite Deposit",
            "Nethercite Deposit",
            "Khorium Vein",
            "Silverleaf",
            "Peacebloom",
            "Earthroot",
            "Mageroyal",
            "Briarthorn",
            "Grave Moss",
            "Bruiseweed",
            "Kingsblood",
            "Goldthorn",
            "Wild Steelbloom",
            "Khadgar's Whisker",
            "Sungrass",
            "Golden Sansam",
            "Fadeleaf",
            "Felweed",
            "Dreamfoil",
            "Mountain Silversage",
            "Nightmare Vine",
            "Terocone",
            "Plaguebloom",
            "Black Lotus",
            "Arthas' Tears",
            "Dreaming Glory",
            "Медная жила",
            "Ароматитовая жила",
            "Оловянная жила",
            "Малое месторождение кровавого камня",
            "Серебряная жила",
            "Залежи железа",
            "Золотая жила",
            "Мифриловые залежи",
            "Залежи истинного серебра",
            "Залежи черного железа",
            "Малая ториевая жила",
            "Богатая ториевая жила",
            "Залежи оскверненного железа",
            "Залежи адамантита",
            "Богатые залежи адамантита",
            "Залежи хаотита",
            "Кориевая жила",
            "Сребролист",
            "Мироцвет",
            "Земляной корень",
            "Магороза",
            "Остротерн",
            "Могильный мох",
            "Синячник",
            "Королевская кровь",
            "Златошип",
            "Дикий сталецвет",
            "Кадгаров ус",
            "Солнечник",
            "Золотой сансам",
            "Бледнолист",
            "Сквернопля",
            "Снолист",
            "Горный серебряный шалфей",
            "Ползучий кошмарник",
            "Терошишка",
            "Чумоцвет",
            "Черный лотос",
            "Слезы Артаса",
            "Сияние грез",
                };
            foreach (var node in BlackListNodes)
            {
                Setting.BlackListHarvestByName.Add(node);
                Setting.DoNotSellList.Remove(node);
            }
        }

        // блеклист на 80 гатхер профилях //
        if (ProfileName().Contains("Saronit") || ProfileName().Contains("Cobalt"))
        {
            if (Skill.GetValue(SkillLine.Herbalism) > 400 && Skill.GetValue(SkillLine.Alchemy) > 400)
                Setting.BlackListHarvestByName.Remove("Goldclover");
            else
                Setting.BlackListHarvestByName.Add("Goldclover");
            Setting.BlackListHarvestByName.Add("Tiger Lily");
            //Setting.BlackListHarvestByName.Add("Icethorn");
            Setting.BlackListHarvestByName.Add("Talandra's Rose");
            Setting.BlackListHarvestByName.Add("Firethorn");
            Setting.BlackListHarvestByName.Add("Frozen Herb");
            Setting.BlackListHarvestByName.Add("Золотой клевер");
            Setting.BlackListHarvestByName.Add("Тигровая лилия");
            Setting.BlackListHarvestByName.Add("Ледошип");
            Setting.BlackListHarvestByName.Add("Роза Таландры");
            Setting.BlackListHarvestByName.Add("Огница");
            Setting.BlackListHarvestByName.Add("Мерзлая трава");
            logs("блеклист дешевых нордовских трав по имени для 80 кобальтовых и саронитовых летунов: Goldclover, Tiger Lily, Icethorn, Talandra Rose, Firethorn, Frozen Herb");
            print("блеклист дешевых нордовских трав по имени для 80 кобальтовых и саронитовых летунов: Goldclover, Tiger Lily, Icethorn, Talandra Rose, Firethorn, Frozen Herb");
        }

        // hs button on start //
        if (Lua.LuaDoString<bool>("if " + HSButtonFrameName + " then return true end"))
        {
            if (ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) > 2000)
                runlua("" + HSButtonFrameName + ":SetChecked(false) " + HSButtonFrameName + "Text:SetText('HS CD: " + Bag.GetContainerItemCooldown(6948) / 1000 + " s') " + HSButtonFrameName + "Text:SetTextColor(0.5, 0.5, 0.5, 1)");
            if (ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) < 2000)
                runlua("" + HSButtonFrameName + ":Enable() " + HSButtonFrameName + "Text:SetText('HS') " + HSButtonFrameName + "Text:SetTextColor(1, 1, 1, 1)");
            if (ItemsManager.GetItemCountById(6948) == 0)
                runlua("" + HSButtonFrameName + ":Hide()");
        }

        // общие //
        Setting.TryToAvoidEnemyGroupsRatio = 0;
        Setting.PathFinderFromServer = true;
        Setting.CalcuCombatRange = false;
        Setting.DontStartFighting = false;
        Setting.FoodName = "";
        Setting.FoodIsSpell = false;
        Setting.FlyingMountName = "";
        Setting.GroundMountName = "";
        Setting.UseMammoth = false;
        Setting.UsePathsFinder = true;
        Setting.IgnoreCombatWithPet = true;
        Setting.TrainNewSkills = false;
        Setting.RandomJumping = true;
        Setting.AcceptOnlyProfileNpc = true;
        if (Usefuls.RealmName == "WoW Circle 3.3.5a x1")
            Setting.RetrieveCorpseMaxDistance = 40;
        else
            Setting.RetrieveCorpseMaxDistance = 45;
        Setting.NpcScanRepair = false;
        Setting.NpcScanVendor = false;
        Setting.CloseIfPlayerTeleported = false;
        Setting.CloseIfWhisperBiggerOrEgalAt = 1000;
        Setting.DetectEvadingMob = true;
        Setting.UseSpiritHealer = false;
        Setting.AddToNpcDb = false;
        Setting.DismountLandGroundDistance = 20;
        Setting.MountDistance = rnd(20, 50);
        Setting.HarvestDuringLongMove = true;
        Setting.BlackListZoneWhereDead = false;
        Setting.AttackElite = true;
        Setting.CloseAfterXBlockagesActive = true;
        Setting.HarvestAvoidPlayersRadius = 0;
        Setting.UseMount = false;
        Setting.UseFlyingMount = false;
        Setting.SellGray = true;
        Setting.SellWhite = true;
        Setting.SellGreen = true;
        Setting.SellBlue = true;
        Setting.SellPurple = true;
        Setting.SearchRadiusMobs = 50;
        Setting.MaxUnitsNearObjects = 50;
        Setting.IgnoreFightGoundMount = true;
        Setting.LootMobs = true;
        Setting.DismountWhenStuck = true;
        Setting.LootAndHarvestRangeQuickly = true;
        wManager.wManagerSetting.CurrentSetting.SkipRegenIfFlaggedInCombat = true;

        if (MeIsKacher())
        {
            Quest.QuesterCurrentContext.SkipPickUpQuestAfterXSecondes = 50000;
            Quester.Bot.QuesterSetting.CurrentSetting.SkipPickUpQuestAfterXSecondes = 50000;
            Quester.Bot.QuesterSetting.CurrentSetting.Save();
        }

        // 80 settings //
        if (me.Level >= 80)
        {
            Setting.MaxUnitsNearMobs = 50;
            Setting.MaxUnitsNearObjects = 50;
            Setting.LootInCombat = true;
            print("общие настройки для всех 80 лвлов загружены");
            logs("общие настройки для всех 80 лвлов загружены");
        }

        // Traveler's Tundra Mammoth //
        if ((SpellManager.ExistSpellBook("Traveler's Tundra Mammoth") || SpellManager.ExistSpellBook("Тундровый мамонт путешественника")) && !Setting.UseMammoth && !IsDungeonProfile())
        {
            Setting.UseMammoth = true;
            Setting.Repair = true;
            Setting.Selling = true;
            logs("имеем маманта => UseMammoth = true");
            print("имеем маманта => UseMammoth = true");
        }

        // new grinder settings //
        if ((Products.ProductName == "Quester" && (ProfileName() == "Alpha_profile.xml" || ProfileName() == "Outland_Grinder.xml" || ProfileName() == "Nord_Grinder.xml" || ProfileName().ToLower().Contains("grind"))) || Products.ProductName == "Grinder" || Products.ProductName == "Automaton")
        {
            Setting.MaxUnitsNearMobs = 50;
            Setting.LootMobs = true;
            Setting.MinFreeBagSlotsToGoToTown = 10;
            Setting.Repair = true;
            Setting.Selling = true;
            Setting.HearthstoneAfterXBlockagesLatest10Minutes = 10;
            Setting.CloseAfterXBlockagesLatest10Minutes = 15;
            
            if (Skill.GetValue(SkillLine.Mining) >= 400 && Usefuls.RealmName != "WoW Circle 3.3.5a x5")
            {
                print("Mining включен");
                logs("Mining включен");
                Setting.HarvestMinerals = true;
            }
            if (Skill.GetValue(SkillLine.Herbalism) >= 400 && Usefuls.RealmName != "WoW Circle 3.3.5a x5")
            {
                print("Herbalism включен");
                logs("Herbalism включен");
                Setting.HarvestHerbs = true;
            }
            if (Skill.GetValue(SkillLine.Mining) >= 350 && Usefuls.RealmName == "WoW Circle 3.3.5a x5")
            {
                print("Mining выключен");
                logs("Mining выключен");
                Setting.HarvestMinerals = false;
            }
            if (Skill.GetValue(SkillLine.Herbalism) >= 350 && Usefuls.RealmName == "WoW Circle 3.3.5a x5")
            {
                print("Herbalism выключен");
                logs("Herbalism выключен");
                Setting.HarvestHerbs = false;
            }
            print("настройки под автоматон и профили на гринд загружены");
            logs("настройки под автоматон и профили на гринд загружены");
        }

        // настройки для качеров //
        if (MeIsKacher())
        {

            Var.SetVar("MeIsKacher", 1);

            if (!ImDK)
            {
                if (ImPal)
                {
                    
                    //GearScore
                    //runlua("if (IsAddOnLoaded('TopFit_RETPALADIN') == nil or IsAddOnLoaded('Bartender') == 1) then DisableAllAddOns() EnableAddOn('TopFit_RETPALADIN') ReloadUI() end");
                    runlua("if (IsAddOnLoaded('GearScore') == nil) then DisableAllAddOns() EnableAddOn('GearScore') ReloadUI() end");
                    logs("топфит пал загружен");
                    print("топфит пал загружен");
                }

                Setting.LootInCombat = true;
                Setting.EquipAvailableBagIfFreeContainerSlot = true;
                Setting.MaxUnitsNearMobs = 2;
                Setting.LootMobs = true;
                Setting.MinFreeBagSlotsToGoToTown = 0;
                Setting.Repair = true;
                Setting.Selling = true;
                Setting.IgnoreFightWhenInMove = true;
                Setting.IgnoreServerRoadsWater = false;
                Setting.HearthstoneAfterXBlockagesLatest10Minutes = 10;
                Setting.CloseAfterXBlockagesLatest10Minutes = 15;
                Setting.LootChests = true;
                Setting.SearchRadiusObjects = 50;
                Setting.FlightMasterTaxiUse = true;
                Setting.FlightMasterTaxiDistance = 1000;
                Setting.FlightMasterDiscoverRange = 500;
                Setting.FlightMasterTaxiUseOnlyIfNear = true;
                Setting.FightInteractTargetMinDistance = rnd(10, 30);
                Setting.SkipInOutDoors = false;
                Setting.SkipNodesInWater = false;
                Setting.TryToAvoidEnemyGroupsRatio = 1.2;
                print("настройки для качеров (не дк) загружены");
                logs("настройки для качеров (не дк) загружены");
            }

            if (ImDK)
            {
                runlua("if (IsAddOnLoaded('TopFit_DK') == nil) then DisableAllAddOns() EnableAddOn('TopFit_DK') ReloadUI() end");
                //runlua("if (IsAddOnLoaded('GearScore') == 1 or IsAddOnLoaded('Bartender') == nil) then DisableAllAddOns() EnableAddOn('Bartender') ReloadUI() end");
                logs("топфит дк загружен");
                print("топфит дк загружен");
                Setting.TryToAvoidEnemyGroupsRatio = 0;
                Setting.EquipAvailableBagIfFreeContainerSlot = false;
                Setting.LootInCombat = true;
                Setting.MinFreeBagSlotsToGoToTown = 2;
                Setting.MaxZDistanceAttack = 5;
                Setting.MaxZDistanceFarm = 5;
                Setting.SearchRadiusObjects = 75;
                Setting.IgnoreServerRoadsWater = false;
                Setting.CloseAfterXBlockagesLatest10Minutes = 15;
                Setting.LootChests = true;
                Setting.HearthstoneAfterXBlockagesLatest10Minutes = 10;
                Setting.FlightMasterTaxiUse = true;
                Setting.FlightMasterTaxiDistance = 1000;
                Setting.FlightMasterDiscoverRange = 500;
                Setting.FlightMasterTaxiUseOnlyIfNear = true;
                Setting.FightInteractTargetMinDistance = rnd(10, 30);
                Setting.SkipInOutDoors = false;
                Setting.Repair = true;
                Setting.Selling = true;
                Setting.LootMobs = false;
                Setting.SkipNodesInWater = false;

                if (Continent() == "DeathKnightStart")
                {
                    if (Quest.HasQuest(12701)) // Побоище у Заставы Света
                    {
                        Setting.UseSpiritHealer = true;
                        Conditions.ForceIgnoreIsAttacked = true;
                        Setting.Repair = false;
                    }

                    if (!Quest.GetQuestCompleted(12715)) // Склеп Воспоминаний
                    {
                        Setting.LootMobs = true;
                        Setting.Repair = true;
                        Setting.Selling = false;
                        Setting.IgnoreFightWhenInMove = true;
                    }

                    if (Quest.GetQuestCompleted(12715))
                    {
                        Setting.LootMobs = true;
                        Setting.Selling = true;
                        Setting.Repair = true;
                        Setting.IgnoreFightWhenInMove = true;
                    }
                }

                if (Continent() != "DeathKnightStart")
                {
                    Setting.LootMobs = true;
                    Setting.Repair = true;
                    Setting.Selling = true;
                    Setting.IgnoreFightWhenInMove = false;
                    Setting.MinFreeBagSlotsToGoToTown = 0;
                    Setting.FoodMaxPercent = 1;
                    Setting.DrinkMaxPercent = 1;
                    Setting.FoodPercent = 1;
                    Setting.DrinkPercent = 1;
                    Setting.MaxUnitsNearMobs = 2;
                }

                if (Subzone().Contains("Acherus") || Subzone().Contains("Акерус") || Subzone() == "Hall of Command" || Subzone() == "Зал Власти")
                {
                    logs("офаем починку и продажу если в акерусе");
                    print("офаем починку и продажу если в акерусе");
                    Setting.Repair = false;
                    Setting.Selling = false;
                    //wManager.Wow.Bot.States.ToTown.ForceToTown = false;
                }

                print("настройки для дк на каче загружены");
                logs("настройки для дк на каче загружены");
            }
        }

        // dungeon settings //
        if (IsDungeonProfile())
        {
            Setting.UseMammoth = false;
            Setting.MaxUnitsNearMobs = 50;
            Setting.Repair = false;
            Setting.Selling = false;
            Setting.MinFreeBagSlotsToGoToTown = 0;
            Setting.IgnoreFightWhenInMove = false;
            Setting.LootMobs = true;
            Setting.IgnoreCombatWithPet = false;
            Setting.SearchRadiusObjects = 30;
            Setting.HarvestHerbs = false;
            Setting.HarvestMinerals = false;
            Setting.HearthstoneAfterXBlockagesLatest10Minutes = 10;
            Setting.CloseAfterXBlockagesLatest10Minutes = 15;
            Setting.FlightMasterTaxiUse = false;
            Setting.FlightMasterTaxiDistance = 1;
            Setting.FlightMasterDiscoverRange = 1;

            // chests //
            Setting.ListHarvest.Add(184930); // Solid Fel Iron Chest - Цитадель Адского Пламени
            Setting.ListHarvest.Add(184932); // Bound Fel Iron Chest - кузня
            Setting.ListHarvest.Add(184933); // Solid Fel Iron Chest - кузня
            Setting.ListHarvest.Add(184937); // Solid Adamantite Chest - Сетеккские залы, Гробницы Маны, Механар, Нижетопь, Кузня Крови
            Setting.ListHarvest.Add(184939); // Solid Adamantite Chest - Сетеккские залы
            Setting.ListHarvest.Add(184941); // Solid Adamantite Chest - Паровое подземелье, Темный лабиринт, Механар
            Setting.ListHarvest.Add(184938); // Bound Adamantite Chest - Сетеккские залы
            Setting.ListHarvest.Add(160845);// Dark Coffer - глубины черной горы

            if (GetLocale.Contains("en"))
            {
                // BC epic //
                Setting.DoNotSellList.Add("The Night Blade");
                Setting.DoNotSellList.Add("Singing Crystal Axe");
                Setting.DoNotSellList.Add("Blade of Wizardry");
                Setting.DoNotSellList.Add("Staff of Natural Fury");
                Setting.DoNotSellList.Add("Choker of Repentance");
                Setting.DoNotSellList.Add("The Ancient Scepter of Sue-Min");
                Setting.DoNotSellList.Add("Kamaei's Cerulean Skirt");
                Setting.DoNotSellList.Add("Will of Edward the Odd");
                Setting.DoNotSellList.Add("Charlotte's Ivy");
                Setting.DoNotSellList.Add("Pants of Living Growth");
                Setting.DoNotSellList.Add("The Night Watchman");
                Setting.DoNotSellList.Add("Blinkstrike");
                Setting.DoNotSellList.Add("Lightning Crown");
                Setting.DoNotSellList.Add("Lifegiving Cloak");
                Setting.DoNotSellList.Add("Leggings of Beast Mastery");
                //Setting.DoNotSellList.Add("Truestrike Ring");
                Setting.DoNotSellList.Add("Don Santos' Famous Hunting Rifle");
                Setting.DoNotSellList.Add("The Hammer of Destiny");
                Setting.DoNotSellList.Add("Chestguard of Exile");

                if (RealmShortName != "Circle LK x100")
                {
                    // BC blue //
                    Setting.DoNotSellList.Add("Blade of Misfortune");
                    Setting.DoNotSellList.Add("Chestguard of the Dark Stalker");
                    Setting.DoNotSellList.Add("Crystal Pulse Shield"); // мусор
                    Setting.DoNotSellList.Add("Crystalforged War Axe"); // мусор
                    Setting.DoNotSellList.Add("Gloves of Piety");
                    Setting.DoNotSellList.Add("Gloves of Pandemonium");
                    Setting.DoNotSellList.Add("Demon Hide Spaulders");
                    Setting.DoNotSellList.Add("Pendant of Cunning");
                    Setting.DoNotSellList.Add("Headdress of the Sleeper");
                    Setting.DoNotSellList.Add("Shroud of Frenzy");
                    Setting.DoNotSellList.Add("Cloak of Entropy");
                    //wManager.Setting.DoNotSellList.Add("Fist of Reckoning");
                    Setting.DoNotSellList.Add("Breastplate of Blade Turning");
                    Setting.DoNotSellList.Add("Gauntlets of Purification");
                    Setting.DoNotSellList.Add("Storm Lord's Girdle");
                    Setting.DoNotSellList.Add("Leggings of Concentrated Darkness");
                    Setting.DoNotSellList.Add("Sash of Silent Blades");
                    Setting.DoNotSellList.Add("Hauberk of Totemic Rage");
                    Setting.DoNotSellList.Add("Gloves of Ferocity");
                    //wManager.Setting.DoNotSellList.Add("Robe of the Crimson Order");
                    Setting.DoNotSellList.Add("Necklace of Trophies");
                    Setting.DoNotSellList.Add("Boots of Zealotry");
                    Setting.DoNotSellList.Add("Pathfinder's Band");
                    Setting.DoNotSellList.Add("Thundercaller's Gauntlets");
                    Setting.DoNotSellList.Add("Mask of Veiled Death");
                    Setting.DoNotSellList.Add("Shroud of Spiritual Purity");
                    Setting.DoNotSellList.Add("Sash of Sealed Fate");
                    Setting.DoNotSellList.Add("The Master's Treads");
                    Setting.DoNotSellList.Add("Staff of Divine Infusion");
                    Setting.DoNotSellList.Add("Breastplate of Rapid Striking");
                    Setting.DoNotSellList.Add("Chestguard of the Talon");
                    //wManager.Setting.DoNotSellList.Add("Draenei Honor Guard Shield");
                    Setting.DoNotSellList.Add("Elekk Hide Leggings");
                    Setting.DoNotSellList.Add("Scales of the Beast");
                    Setting.DoNotSellList.Add("Cloak of the Craft");
                    Setting.DoNotSellList.Add("Band of Sorrow");
                    Setting.DoNotSellList.Add("Crown of Endless Knowledge");
                    Setting.DoNotSellList.Add("Girdle of Siege");
                    //wManager.Setting.DoNotSellList.Add("Legguards of the Shattered Hand");
                    Setting.DoNotSellList.Add("The Oathkeeper"); // мусор
                                                                 //wManager.Setting.DoNotSellList.Add("Valanos' Longbow");
                                                                 //Setting.DoNotSellList.Add("The Essence Focuser"); // мусор
                    Setting.DoNotSellList.Add("Ced's Carver"); // мусор
                    Setting.DoNotSellList.Add("Leggings of the Sacred Crest");
                    Setting.DoNotSellList.Add("The Bringer of Death"); // мусор
                                                                       //wManager.Setting.DoNotSellList.Add("Pauldrons of Surging Mana");
                                                                       //Setting.DoNotSellList.Add("Girdle of Gale Force"); // мусор
                    Setting.DoNotSellList.Add("Band of Sorrow");
                    print("бк синька добавлена в DoNotSellList");
                    logs("бк синька добавлена в DoNotSellList");
                }

                print("настройки для данжей загружены");
                logs("настройки для данжей загружены");
            }

            if (GetLocale == "ruRU")
            {
                // BC epic //
                
                Setting.DoNotSellList.Add("Клинок ночи");
                Setting.DoNotSellList.Add("Поющий хрустальнокованный топор");
                Setting.DoNotSellList.Add("Клинок волшебства");
                Setting.DoNotSellList.Add("Посох ярости природы");
                Setting.DoNotSellList.Add("Колье покаяния");
                Setting.DoNotSellList.Add("Древний скипетр Су-Мин");
                Setting.DoNotSellList.Add("Небесно-голубая юбка Камэй");
                Setting.DoNotSellList.Add("Воля Эдварда Странного");
                Setting.DoNotSellList.Add("Плющ Шарлотты");
                Setting.DoNotSellList.Add("Штаны живого роста");
                Setting.DoNotSellList.Add("Ночной Дозорный");
                Setting.DoNotSellList.Add("Мгновенный удар");
                Setting.DoNotSellList.Add("Корона молний");
                Setting.DoNotSellList.Add("Дарующий жизнь плащ");
                Setting.DoNotSellList.Add("Поножи повелителя зверей");
                Setting.DoNotSellList.Add("Кольцо точного удара");
                Setting.DoNotSellList.Add("Знаменитая охотничья винтовка дона Сантоса");
                Setting.DoNotSellList.Add("Молот судьбы");
                Setting.DoNotSellList.Add("Нагрудный доспех изгнания");

                if (RealmShortName != "Circle LK x100")
                {
                    // BC blue //
                    Setting.DoNotSellList.Add("Клинок невезения");
                    Setting.DoNotSellList.Add("Нагрудный доспех темного преследователя");
                    Setting.DoNotSellList.Add("Хрустальный вибрирующий щит"); // мусор
                    Setting.DoNotSellList.Add("Секира Хрустальной Кузницы"); // мусор
                    Setting.DoNotSellList.Add("Перчатки благочестия");
                    Setting.DoNotSellList.Add("Перчатки столпотворения");
                    Setting.DoNotSellList.Add("Наплеч из шкуры демона");
                    Setting.DoNotSellList.Add("Подвеска Хитрости");
                    Setting.DoNotSellList.Add("Головной убор спящего");
                    Setting.DoNotSellList.Add("Накидка безумия");
                    Setting.DoNotSellList.Add("Плащ пустоты");
                    //wManager.Setting.DoNotSellList.Add("Fist of Reckoning");
                    Setting.DoNotSellList.Add("Кираса отражения клинков");
                    Setting.DoNotSellList.Add("Очищающие рукавицы");
                    Setting.DoNotSellList.Add("Ремень лорда бури");
                    Setting.DoNotSellList.Add("Поножи сгустка тьмы");
                    Setting.DoNotSellList.Add("Кушак безмолвных лезвий");
                    Setting.DoNotSellList.Add("Хауберк ярости тотема");
                    Setting.DoNotSellList.Add("Перчатки лютости");
                    //wManager.Setting.DoNotSellList.Add("Robe of the Crimson Order");
                    Setting.DoNotSellList.Add("Ожерелье добычи");
                    Setting.DoNotSellList.Add("Сапоги фанатизма");
                    Setting.DoNotSellList.Add("Кольцо землепроходца");
                    Setting.DoNotSellList.Add("Рукавицы Громозова");
                    Setting.DoNotSellList.Add("Маска Сокрытой смерти");
                    Setting.DoNotSellList.Add("Накидка духовной чистоты");
                    Setting.DoNotSellList.Add("Кушак запечатанной судьбы");
                    Setting.DoNotSellList.Add("Ботфорты мастера");
                    Setting.DoNotSellList.Add("Посох божественного вливания");
                    Setting.DoNotSellList.Add("Кираса быстрого удара");
                    Setting.DoNotSellList.Add("Нагрудный доспех Когтя");
                    //wManager.Setting.DoNotSellList.Add("Draenei Honor Guard Shield");
                    Setting.DoNotSellList.Add("Поножи из шкуры элекка");
                    Setting.DoNotSellList.Add("Чешуя Зверя");
                    Setting.DoNotSellList.Add("Плащ темного ремесла");
                    Setting.DoNotSellList.Add("Кольцо скорби");
                    Setting.DoNotSellList.Add("Корона безграничного знания");
                    Setting.DoNotSellList.Add("Ремень осады");
                    //wManager.Setting.DoNotSellList.Add("Legguards of the Shattered Hand");
                    Setting.DoNotSellList.Add("Клятвохранитель"); // мусор
                                                                  //wManager.Setting.DoNotSellList.Add("Valanos' Longbow");
                    Setting.DoNotSellList.Add("Сосредоточитель Сущности"); // мусор
                    Setting.DoNotSellList.Add("Резец Цеда"); // мусор
                    Setting.DoNotSellList.Add("Поножи священного гребня");
                    Setting.DoNotSellList.Add("Предвестник Смерти"); // мусор
                                                                     //wManager.Setting.DoNotSellList.Add("Pauldrons of Surging Mana");
                    Setting.DoNotSellList.Add("Ремень ураганной силы"); // мусор
                    print("бк синька добавлена в DoNotSellList");
                    logs("бк синька добавлена в DoNotSellList");
                }

                print("настройки для данжей загружены");
                logs("настройки для данжей загружены");
            }
        }

        print("Setting.UseMammoth = " + Setting.UseMammoth + "");
        logs("Setting.UseMammoth = " + Setting.UseMammoth + "");

        ///// DO NOT SELL LIST /////////
        // default auction equipment //
        if (GetLocale.Contains("en"))
        {
            Setting.DoNotSellList.Add("Tankard O' Terror");
            Setting.DoNotSellList.Add("Wodin's Lucky Necklase");
            Setting.DoNotSellList.Add("Belt of the Lonely Noble");
            Setting.DoNotSellList.Add("Leggings of Dubious Charms");
            Setting.DoNotSellList.Add("Harbinger's Bone Band");
            Setting.DoNotSellList.Add("Ring of Rotting Sinew");
            Setting.DoNotSellList.Add("King's Square Bracers");
            Setting.DoNotSellList.Add("Saronite Defender");
            Setting.DoNotSellList.Add("Saronite Bulwark");
            Setting.DoNotSellList.Add("Cloak of Bloodied Waters");
            //Setting.DoNotSellList.Add("Aviary Guardsman's Hauberk");
            Setting.DoNotSellList.Add("Tattered Castle Drape");
            Setting.DoNotSellList.Add("Skullcage of Eternal Terror");
            Setting.DoNotSellList.Add("Swiftarrow Shoulderguards");
            Setting.DoNotSellList.Add("Swiftarrow Hauberk");
            Setting.DoNotSellList.Add("Swiftarrow Helm");
            Setting.DoNotSellList.Add("Swiftarrow Belt");
            Setting.DoNotSellList.Add("Swiftarrow Boots");
            Setting.DoNotSellList.Add("Swiftarrow Bracers");
            Setting.DoNotSellList.Add("Swiftarrow Gauntlets");
            Setting.DoNotSellList.Add("Swiftarrow Leggings");
            Setting.DoNotSellList.Add("Refined Ore Gloves");
            Setting.DoNotSellList.Add("Crusader's Square Pauldrons");
            Setting.DoNotSellList.Add("Berserker's Sabatons");
            Setting.DoNotSellList.Add("Savage Saronite Bracers");
            Setting.DoNotSellList.Add("Savage Saronite Gauntlets");
            Setting.DoNotSellList.Add("Savage Saronite Hauberk");
            Setting.DoNotSellList.Add("Savage Saronite Legplates");
            Setting.DoNotSellList.Add("Savage Saronite Pauldrons");
            Setting.DoNotSellList.Add("Savage Saronite Skullshield");
            Setting.DoNotSellList.Add("Savage Saronite Waistguard");
            Setting.DoNotSellList.Add("Savage Saronite Walkers");
            Setting.DoNotSellList.Add("Belt of Tasseled Lanterns");
            Setting.DoNotSellList.Add("Titansteel Destroyer");
            Setting.DoNotSellList.Add("Dragonstompers");
            Setting.DoNotSellList.Add("Cast Iron Shackles");
            Setting.DoNotSellList.Add("Whale-Stick Harpoon");
            Setting.DoNotSellList.Add("Eviscerator's Facemask");
            Setting.DoNotSellList.Add("Spored Tendrils Spaulders");
            Setting.DoNotSellList.Add("Corehound Fang Shoulderpads");
            Setting.DoNotSellList.Add("Belt of Tasseled Lanterns");
            Setting.DoNotSellList.Add("Swiftarrow Belt");
            Setting.DoNotSellList.Add("Eviscerator's Waistguard");
            Setting.DoNotSellList.Add("Dark Arctic Leggings");
            Setting.DoNotSellList.Add("Eviscerator's Legguards");
            Setting.DoNotSellList.Add("Leggings of Visceral Strikes");
            Setting.DoNotSellList.Add("Boots of the Terrestrial Guardian");
            Setting.DoNotSellList.Add("Drake-Champion's Bracers");
            Setting.DoNotSellList.Add("Eviscerator's Bindings");
            Setting.DoNotSellList.Add("Eviscerator's Gauntlets");
            Setting.DoNotSellList.Add("Emerald Choker");
            Setting.DoNotSellList.Add("Burning Skull Pendant");
            Setting.DoNotSellList.Add("Cloak of Bloodied Waters");
            Setting.DoNotSellList.Add("Whalebone Carapace");

            // trade items, profession items //
            Setting.DoNotSellList.Add("Cardinal Ruby");
            Setting.DoNotSellList.Add("King's Amber");
            Setting.DoNotSellList.Add("Majestic Zircon");
            Setting.DoNotSellList.Add("Ametrine");
            Setting.DoNotSellList.Add("Arcane Crystal");
            Setting.DoNotSellList.Add("Star Ruby");
            Setting.DoNotSellList.Add("Mithril Ore");
            Setting.DoNotSellList.Add("Truesilver Ore");
            Setting.DoNotSellList.Add("Fel Iron Ore");
            Setting.DoNotSellList.Add("Adamantite Ore");
            Setting.DoNotSellList.Add("Khorium Ore");
            Setting.DoNotSellList.Add("Primal Fire");
            Setting.DoNotSellList.Add("Eternium Ore");
            Setting.DoNotSellList.Add("Cobalt Ore");
            Setting.DoNotSellList.Add("Saronite Ore");
            Setting.DoNotSellList.Add("Titanium Ore");
            Setting.DoNotSellList.Add("Chalcedony");
            Setting.DoNotSellList.Add("Eternal Life");
            Setting.DoNotSellList.Add("Eternal Earth");
            Setting.DoNotSellList.Add("Eternal Air");
            Setting.DoNotSellList.Add("Eternal Fire");
            Setting.DoNotSellList.Add("Eternal Shadow");
            if (Usefuls.RealmName == "WoW Circle 3.3.5a x1")
            {
                //Setting.DoNotSellList.Add("Eternal Water");
                Setting.DoNotSellList.Add("Crystallized Life");
                Setting.DoNotSellList.Add("Crystallized Earth");
                Setting.DoNotSellList.Add("Crystallized Air");
                Setting.DoNotSellList.Add("Crystallized Fire");
                Setting.DoNotSellList.Add("Crystallized Shadow");
                Setting.DoNotSellList.Add("Goldclover");
                Setting.DoNotSellList.Add("Thorium Ore");
                Setting.DoNotSellList.Add("Thorium Bar");
                Setting.DoNotSellList.Add("Copper Bar");
                Setting.DoNotSellList.Add("Copper Ore");
                Setting.DoNotSellList.Add("Silver Bar");
                Setting.DoNotSellList.Add("Silver Ore");
                Setting.DoNotSellList.Add("Gold Bar");
                Setting.DoNotSellList.Add("Gold Ore");
                Setting.DoNotSellList.Add( "Silverleaf");
                Setting.DoNotSellList.Add( "Peacebloom");
        Setting.DoNotSellList.Add("Earthroot");
        Setting.DoNotSellList.Add("Mageroyal");
        Setting.DoNotSellList.Add("Briarthorn");
        Setting.DoNotSellList.Add("Grave Moss");
        Setting.DoNotSellList.Add("Bruiseweed");
        Setting.DoNotSellList.Add("Kingsblood");
        Setting.DoNotSellList.Add("Goldthorn");
        Setting.DoNotSellList.Add("Wild Steelbloom");
        Setting.DoNotSellList.Add("Khadgar's Whisker");
        Setting.DoNotSellList.Add("Sungrass");
        Setting.DoNotSellList.Add("Golden Sansam");
        Setting.DoNotSellList.Add("Fadeleaf");
        Setting.DoNotSellList.Add("Felweed");
        Setting.DoNotSellList.Add("Dreamfoil");
        Setting.DoNotSellList.Add("Mountain Silversage");
        Setting.DoNotSellList.Add("Nightmare Vine");
        Setting.DoNotSellList.Add("Terocone");
        Setting.DoNotSellList.Add("Plaguebloom");
        Setting.DoNotSellList.Add("Black Lotus");
        Setting.DoNotSellList.Add("Arthas' Tears");
        Setting.DoNotSellList.Add("Dreaming Glory");
        Setting.DoNotSellList.Add("Tiger Lily");
        Setting.DoNotSellList.Add("Icethorn");
                Setting.DoNotSellList.Add("Azerothian Diamond");
                Setting.DoNotSellList.Add("Aquamarine");
                Setting.DoNotSellList.Add("Jade");
                Setting.DoNotSellList.Add("Citrine");
                Setting.DoNotSellList.Add("Huge Emerald");
                Setting.DoNotSellList.Add("Large Opal");
                Setting.DoNotSellList.Add("Blue Sapphire");
                Setting.DoNotSellList.Add("Icethorn");
                Setting.DoNotSellList.Add("Icethorn");
                Setting.DoNotSellList.Add("Icethorn");
            }
        //Setting.DoNotSellList.Add( "Talandra's Rose", 445 );
        //Setting.DoNotSellList.Add( "Frozen Herb", 445 );
        //Setting.DoNotSellList.Add( "Firethorn", 445 );
        //Setting.DoNotSellList.Add("Crystallized Water");

        Setting.DoNotSellList.Add("Adder's Tongue");
            Setting.DoNotSellList.Add("Lichbloom");
            Setting.DoNotSellList.Add("Icethorn");
            //Setting.DoNotSellList.Add("Goldclover");
            //Setting.DoNotSellList.Add("Deadnettle");
            Setting.DoNotSellList.Add("Adamantite Bar");
            Setting.DoNotSellList.Add("Cobalt Bar");
            Setting.DoNotSellList.Add("Saronite Bar");
            Setting.DoNotSellList.Add("Titanium Bar");
            Setting.DoNotSellList.Add("Titansteel Bar");
            Setting.DoNotSellList.Add("Mithril Bar");
            Setting.DoNotSellList.Add("Fel Iron Bar");
            Setting.DoNotSellList.Add("Truesilver Bar");
            Setting.DoNotSellList.Add("Khorium Bar");
            Setting.DoNotSellList.Add("Eternium Bar");
            Setting.DoNotSellList.Add("Netherweave Bag");
            Setting.DoNotSellList.Add("Frostweave Bag");
            Setting.DoNotSellList.Add("Sky Sapphire");
            Setting.DoNotSellList.Add("Scarlet Ruby");
            Setting.DoNotSellList.Add("Autumn's Glow");
            Setting.DoNotSellList.Add("Twilight Opal");
            Setting.DoNotSellList.Add("Forest Emerald");
            Setting.DoNotSellList.Add("Monarch Topaz");
            Setting.DoNotSellList.Add("Primal Might");

            if (ImMage)
            {
                Setting.DoNotSellList.Add("Rune of Teleportation");
                Setting.DoNotSellList.Add("Rune of Portals");
            }

            if (IsFishingProfileName() || ProfileName().ToLower().Contains("auk") || ProfileName().ToLower().Contains("nogger"))
            {
                Setting.DoNotSellList.Add("Oily Blackmouth");
                Setting.DoNotSellList.Add("Stranglekelp");
                Setting.DoNotSellList.Add("Blackmouth Oil");
                Setting.DoNotSellList.Add("Leaded Vial");
                Setting.DoNotSellList.Add("Fishing Pole");
            }

            if (Skill.Has(SkillLine.Enchanting))
            {
                Setting.DoNotSellList.Add("Dream Shard");
                Setting.DoNotSellList.Add("Abyss Crystal");
                Setting.DoNotSellList.Add("Infinite Dust");
            }

            if (Skill.Has(SkillLine.Inscription) || ProfileName().ToLower().Contains("auk"))
            {
                Setting.DoNotSellList.Add("Ink of the Sea");
                Setting.DoNotSellList.Add("Snowfall Ink");
                Setting.DoNotSellList.Add("Virtuoso Inking Set");
            }

            if (Skill.Has(SkillLine.Skinning))
            {
                Setting.DoNotSellList.Add("Skinning Knife");
                Setting.DoNotSellList.Add("Borean Leather Scraps");
                Setting.DoNotSellList.Add("Borean Leather");
                Setting.DoNotSellList.Add("Heavy Borean Leather");
                Setting.DoNotSellList.Add("Arctic Fur");
                Setting.DoNotSellList.Add("Nerubian Chitin");
                Setting.DoNotSellList.Add("Icy Dragonscale");
                Setting.DoNotSellList.Add("Drums of Forgotten Kings");
                Setting.DoNotSellList.Add("Drums of the Wild");
            }

            if (Skill.GetValue(SkillLine.Jewelcrafting) >= 350 && Skill.GetValue(SkillLine.Mining) >= 375)
            {
                Setting.Prospecting = true;
                if (!Setting.ProspectingList.Contains("Cobalt Ore"))
                    Setting.ProspectingList.Add("Cobalt Ore");
            }

            if (Skill.Has(SkillLine.Mining))
            {
                Setting.DoNotSellList.Add("Mining Pick");
            }

            if (Skill.GetValue(SkillLine.Jewelcrafting) >= 350)
            {
                Setting.DoNotSellList.Add("Simple Grinder");
            }

            if (Skill.GetValue(SkillLine.Herbalism) >= 400 && Skill.GetValue(SkillLine.Alchemy) >= 400)
            {
                Setting.DoNotSellList.Add("Goldclover");
                Setting.DoNotSellList.Add("Imbued Vial");
                Setting.DoNotSellList.Add("Enchanted Vial");
            }

            if (Skill.GetValue(SkillLine.Enchanting) >= 350)
            {
                Setting.DoNotSellList.Add("Runed Cobalt Rod");
                Setting.DoNotSellList.Add("Runed Titanium Rod");
                Setting.DoNotSellList.Add("Runed Adamantite Rod");
            }

            if (MyRealName == "Метка" || MyRealName == "Cold" || MyRealName == "Жёсткая" || MyRealName == "Nick" || MyRealName == "Некласс")
                Setting.DoNotSellList.Add("Frostweave Cloth");

            // consumable: food, buffs, reagents, potions, flasks //
            Setting.DoNotSellList.Add("Noggenfogger Elixir");
            Setting.DoNotSellList.Add("Briny Hardcheese");
            Setting.DoNotSellList.Add("Mead Basted Caribou");
            Setting.DoNotSellList.Add("Highland Spring Water");
            Setting.DoNotSellList.Add("Runic Mana Potion");
            Setting.DoNotSellList.Add("Flask of Endless Rage");
            Setting.DoNotSellList.Add("Flask of The Frost Wyrm");
            Setting.DoNotSellList.Add("Potion of Speed");
            Setting.DoNotSellList.Add("Free Action Potion");
            Setting.DoNotSellList.Add("Living Action Potion");
            Setting.DoNotSellList.Add("Runic Mana Potion");
            Setting.DoNotSellList.Add("Flask of Endless Rage");
            Setting.DoNotSellList.Add("Flask of The Frost Wyrm");
            Setting.DoNotSellList.Add("Potion of Speed");
            Setting.DoNotSellList.Add("Savory Deviate Delight");

            if (myitemlevel > 265)
            {
                if (ImPal)
                    Setting.DoNotSellList.Add("Symbol of Kings");

                if (ImPriest)
                    Setting.DoNotSellList.Add("Devout Candle");

                Setting.DoNotSellList.Add("Runic Mana Injector");
                Setting.DoNotSellList.Add("Runic Healing Injector");
                Setting.DoNotSellList.Add("Heavy Frostweave Bandage");
                Setting.DoNotSellList.Add("Grilled Sculpin");
                Setting.DoNotSellList.Add("Dragonfin Filet");
                Setting.DoNotSellList.Add("Cobalt Frag Bomb");
                Setting.DoNotSellList.Add("Swiftness Potion");
                Setting.DoNotSellList.Add("Indestructible Potion");
                Setting.DoNotSellList.Add("Runescroll of Fortitude");
                Setting.DoNotSellList.Add("Drums of Forgotten Kings");
                Setting.DoNotSellList.Add("Drums of the Wild");
                Setting.DoNotSellList.Add("Lesser Flask of Toughness");
            }

            if (Skill.GetValue(SkillLine.Alchemy) >= 350)
            {
                Setting.DoNotSellList.Add("Pygmy Oil");
            }

            if (ImHunter)
            {
                Setting.DoNotSellList.Add("Frostbite Bullets");
                Setting.DoNotSellList.Add("Terrorshaft Arrow");
            }

            if (ImDK)
            {
                Setting.DoNotSellList.Add("Corpse Dust");
            }

            // BIS equip //
            Setting.DoNotSellList.Add("Shadowmourne");
            Setting.DoNotSellList.Add("Death's Choise");
            Setting.DoNotSellList.Add("Death's Verdict");
            Setting.DoNotSellList.Add("Penumbra Pendant");
            Setting.DoNotSellList.Add("Deathbringer's Will");
            Setting.DoNotSellList.Add("Sharpened Twilight Scale");
            Setting.DoNotSellList.Add("Bryntroll, the Bone Arbiter");
            Setting.DoNotSellList.Add("Apocalypse's Advance");
            Setting.DoNotSellList.Add("Skeleton Lord's Circle");
            Setting.DoNotSellList.Add("Winding Sheet");
            Setting.DoNotSellList.Add("Corroded Skeleton Key");
            Setting.DoNotSellList.Add("Whispering Fanged Skull");
            Setting.DoNotSellList.Add("Havoc's Call, Blade of Lordaeron Kings");
            Setting.DoNotSellList.Add("Bloodsurge, Kel'Thuzad's Blade of Agony");
            Setting.DoNotSellList.Add("Coldwraith Links");
            Setting.DoNotSellList.Add("Fleshrending Gauntlets");
            Setting.DoNotSellList.Add("Ring of the Kirin Tor");
            Setting.DoNotSellList.Add("Garrosh's Rage");
            Setting.DoNotSellList.Add("Might of Blight");

            // nord blue & epic //


            //epic
            Setting.DoNotSellList.Add("Avool's Sword of Jin");
            Setting.DoNotSellList.Add("Je'Tze's Bell");
            Setting.DoNotSellList.Add("Namlak's Supernumerary Sticker");
            Setting.DoNotSellList.Add("Sash of Jordan");
            Setting.DoNotSellList.Add("Wapach's Spaulders of Solidarity");
            Setting.DoNotSellList.Add("Corroded Faceguard");
            Setting.DoNotSellList.Add("Zom's Crackling Bulwark");
            Setting.DoNotSellList.Add("Signet of Edward the Odd");



            Setting.DoNotSellList.Add("Agin's Crushing Carapace");
            Setting.DoNotSellList.Add("Banner Slicer");
            Setting.DoNotSellList.Add("Belt of Crystalline Tears");
            Setting.DoNotSellList.Add("Blade-Binding Bulwark");
            Setting.DoNotSellList.Add("Bloodwood Greatstaff");
            Setting.DoNotSellList.Add("Bracers of Accurate Fire");
            Setting.DoNotSellList.Add("Bracers of Sizzling Heat");
            Setting.DoNotSellList.Add("Bracers of Unmitigated Larceny");
            Setting.DoNotSellList.Add("Bulge-Concealing Breastplate");
            Setting.DoNotSellList.Add("Charlotte's Chastizing Pauldrons");
            Setting.DoNotSellList.Add("Cloak of the Agile Mind");
            Setting.DoNotSellList.Add("Condor-Bone Chestguard");
            Setting.DoNotSellList.Add("Cracklefire Wristguards");
            Setting.DoNotSellList.Add("Draconic Choker of Ferocity");
            Setting.DoNotSellList.Add("Dragonjaw Mauler");
            Setting.DoNotSellList.Add("Gauntlets of Disembowelment");
            Setting.DoNotSellList.Add("Girdle of Unerring Flight");
            Setting.DoNotSellList.Add("Gnarled Shovelhorn Spaulders");
            Setting.DoNotSellList.Add("Greathelm of the Unyielding Bull");
            Setting.DoNotSellList.Add("Grips of the Warming Heart");
            Setting.DoNotSellList.Add("Gwyneth's Runed Dragonwand");
            Setting.DoNotSellList.Add("Leggings of the Water Moccasin");
            Setting.DoNotSellList.Add("Leggings of Violent Exsanguination");
            Setting.DoNotSellList.Add("Legguards of the Forlorn Seas");
            Setting.DoNotSellList.Add("Lydia's Sharpened Swordbreaker");
            Setting.DoNotSellList.Add("Melia's Magnificent Scepter");
            Setting.DoNotSellList.Add("Nixod's Chain-Threshed Spaulders");
            Setting.DoNotSellList.Add("Petrified Ironwood Smasher");
            Setting.DoNotSellList.Add("Raine's Choker of Combustion");
            Setting.DoNotSellList.Add("Raine's Signet of Blasting");
            Setting.DoNotSellList.Add("Rhie-Ay's Clutching Gauntlets");
            //Setting.DoNotSellList.Add("Roc-Feather Longbow");
            Setting.DoNotSellList.Add("Ryft's Deathgaze");

            Setting.DoNotSellList.Add("Shimmerthread Girdle");
            Setting.DoNotSellList.Add("Reanimator's Cloak");
            Setting.DoNotSellList.Add("Skullcage of Eternal Terror");
            Setting.DoNotSellList.Add("Torta's Oversized Choker");
            Setting.DoNotSellList.Add("Twisted Puzzle-Ring");

            //Setting.DoNotSellList.Add("Wristguards of Verdant Recovery");
            Setting.DoNotSellList.Add("Zabra's Misplaced Staff");
            Setting.DoNotSellList.Add("Zoe's Comforting Cape");

            Setting.DoNotSellList.Add("Frozen Orb");
            Setting.DoNotSellList.Add("44695");
            

            // other usefuls items //
            Setting.DoNotSellList.Add("Dimensional Ripper - Everlook");
            Setting.DoNotSellList.Add("Dimensional Ripper - Area 52");
            Setting.DoNotSellList.Add("Ultrasafe Transporter: Toshley's Station");
            Setting.DoNotSellList.Add("Ultrasafe Transporter: Gadgetzan");
            Setting.DoNotSellList.Add("World Enlarger");

            // cant sell //
            
            Setting.DoNotSellList.Add("Direbrew's Remote"); 
            Setting.DoNotSellList.Add("Shadowforge Key");
            Setting.DoNotSellList.Add("Hearthstone");
            Setting.DoNotSellList.Add("Soul Shard");
            Setting.DoNotSellList.Add("Fel Healthstone");
            Setting.DoNotSellList.Add("Holy Water");
            Setting.DoNotSellList.Add("Shadow Labyrinth Key");
            Setting.DoNotSellList.Add("Darkmoon Doughnut");
            Setting.DoNotSellList.Add("Healthstone");
            List<string> Sinka = new List<string>
                {
                    "Tattered Castle Drape",
                    "Runecaster's Mantle",
                    "Dragon Prow Amulet",
                    "Blood-Tempered Spaulders",
                    "Wristguards of Verdant Recovery",
                    "Shimmerthread Girdle",
                    "Corehound Fang Shoulderpads",
                    "Roc-Feather Longbow",
                    "Leggings of the Water Moccasin",
                    "Bracers of Accurate Fire",
                    "Corehound Fang Shoulderpads"
                };
            if (IsNordDungeonProfile() && wManager.wManagerSetting.CurrentSetting.DoNotSellList.Count(u => Sinka.Contains(u)) > 0)
            {
                logs("в DoNotSellList есть не нужная синька");
                foreach (var item in Sinka)
                    if (Setting.DoNotSellList.Contains(item))
                    {
                        logs("удалили " + item + " из DoNotSellList");
                        Setting.DoNotSellList.Remove(item);
                    }
            }
            print("список Setting.DoNotSellList составлен");
            logs("список Setting.DoNotSellList составлен");
        }

        if (GetLocale == "ruRU")
        {
            Setting.DoNotSellList.Add("Пинта Ужаса");
            Setting.DoNotSellList.Add("Счастливое ожерелье Водина");
            Setting.DoNotSellList.Add("Пояс одинокого благородства");
            Setting.DoNotSellList.Add("Поножи неявных чар");
            Setting.DoNotSellList.Add("Костяное кольцо провозвестника");
            Setting.DoNotSellList.Add("Кольцо из гниющих сухожилий");
            Setting.DoNotSellList.Add("Полевые наручи короля");
            Setting.DoNotSellList.Add("Саронитовый защитник");
            Setting.DoNotSellList.Add("Саронитовый защитник");
            Setting.DoNotSellList.Add("Плащ Кровавых вод");
            Setting.DoNotSellList.Add("Хауберк охранника вольера");
            Setting.DoNotSellList.Add("Потрепанная пелерина");
            Setting.DoNotSellList.Add("Полный шлем вечного ужаса");
            Setting.DoNotSellList.Add("Наплечные щитки быстрой стрелы");
            Setting.DoNotSellList.Add("Хауберк быстрой стрелы");
            Setting.DoNotSellList.Add("Шлем быстрой стрелы");
            Setting.DoNotSellList.Add("Пояс быстрой стрелы");
            Setting.DoNotSellList.Add("Сапоги быстрой стрелы");
            Setting.DoNotSellList.Add("Наручи быстрой стрелы");
            Setting.DoNotSellList.Add("Рукавицы быстрой стрелы");
            Setting.DoNotSellList.Add("Поножи быстрой стрелы");
            Setting.DoNotSellList.Add("Перчатки из очищенной руды");
            Setting.DoNotSellList.Add("Полевое наплечье рыцаря");
            Setting.DoNotSellList.Add("Башмаки берсерка");
            Setting.DoNotSellList.Add("Саронитовые наручи свирепости");
            Setting.DoNotSellList.Add("Саронитовые рукавицы свирепости");
            Setting.DoNotSellList.Add("Саронитовый хауберк свирепости");
            Setting.DoNotSellList.Add("Саронитовые ножные латы свирепости");
            Setting.DoNotSellList.Add("Саронитовое наплечье свирепости");
            Setting.DoNotSellList.Add("Саронитовый шлем свирепости");
            Setting.DoNotSellList.Add("Саронитовый воинский пояс свирепости");
            Setting.DoNotSellList.Add("Саронитовые сапоги свирепости");
            Setting.DoNotSellList.Add("Пояс Фонариков");
            Setting.DoNotSellList.Add("Разрушитель из титановой стали");
            Setting.DoNotSellList.Add("Высокие драконьи ботинки");
            Setting.DoNotSellList.Add("Наколдованные железные кандалы");
            Setting.DoNotSellList.Add("Китобойный гарпун");
            Setting.DoNotSellList.Add("Маска потрошителя");
            Setting.DoNotSellList.Add("Наплеч со споровыми усиками");
            Setting.DoNotSellList.Add("Наплечные пластины из клыков гончей Недр");
            Setting.DoNotSellList.Add("Пояс быстрой стрелы");
            Setting.DoNotSellList.Add("Воинский пояс потрошителя");
            Setting.DoNotSellList.Add("Черные полярные поножи");
            Setting.DoNotSellList.Add("Набедренники потрошителя");
            Setting.DoNotSellList.Add("Поножи интуитивного боя");
            Setting.DoNotSellList.Add("Сапоги земного стража");
            Setting.DoNotSellList.Add("Наручи дракона-воителя");
            Setting.DoNotSellList.Add("Наручники потрошителя");
            Setting.DoNotSellList.Add("Рукавицы потрошителя");
            Setting.DoNotSellList.Add("Изумрудное колье");
            Setting.DoNotSellList.Add("Подвеска Горящего черепа");

            // trade items, profession items //
            Setting.DoNotSellList.Add("Чернила моря");
            Setting.DoNotSellList.Add("Чернила снегопада");
            Setting.DoNotSellList.Add("Набор виртуозного начертателя");
            Setting.DoNotSellList.Add("Удочка");
            Setting.DoNotSellList.Add("Шлифовальный камень");
            Setting.DoNotSellList.Add("Величественный циркон");
            Setting.DoNotSellList.Add("Царский янтарь");
            Setting.DoNotSellList.Add("Багровый рубин");
            Setting.DoNotSellList.Add("Страхолит");
            Setting.DoNotSellList.Add("Аметрин");
            Setting.DoNotSellList.Add("Страхолит");
            Setting.DoNotSellList.Add("Око Зула");
            Setting.DoNotSellList.Add("Шахтерская кирка");
            Setting.DoNotSellList.Add("Чародейный кристалл");
            Setting.DoNotSellList.Add("Звездный рубин");
            Setting.DoNotSellList.Add("Мифриловая руда");
            Setting.DoNotSellList.Add("Руда истинного серебра");
            Setting.DoNotSellList.Add("Руда оскверненного железа");
            Setting.DoNotSellList.Add("Адамантитовая руда");
            Setting.DoNotSellList.Add("Кориевая руда");
            Setting.DoNotSellList.Add("Изначальный Огонь");
            Setting.DoNotSellList.Add("Этерниевая руда");
            Setting.DoNotSellList.Add("Кобальтовая руда");
            Setting.DoNotSellList.Add("Саронитовая руда");
            Setting.DoNotSellList.Add("Титановая руда");
            Setting.DoNotSellList.Add("Кальцедоний");
            Setting.DoNotSellList.Add("Извечная жизнь");
            Setting.DoNotSellList.Add("Извечная земля");
            Setting.DoNotSellList.Add("Извечный воздух");
            Setting.DoNotSellList.Add("Извечный огонь");
            Setting.DoNotSellList.Add("Извечная тьма");
            //Setting.DoNotSellList.Add("Eternal Water");
            //Setting.DoNotSellList.Add("Crystallized Life");
            //Setting.DoNotSellList.Add("Crystallized Earth");
            //Setting.DoNotSellList.Add("Crystallized Air");
            //Setting.DoNotSellList.Add("Crystallized Fire");
            //Setting.DoNotSellList.Add("Crystallized Shadow");
            //Setting.DoNotSellList.Add("Crystallized Water");
            Setting.DoNotSellList.Add("Язык аспида");
            Setting.DoNotSellList.Add("Личецвет");
            //Setting.DoNotSellList.Add("Goldclover");
            //Setting.DoNotSellList.Add("Deadnettle");
            Setting.DoNotSellList.Add("Слиток кобальта");
            Setting.DoNotSellList.Add("Слиток саронита");
            Setting.DoNotSellList.Add("Титановый слиток");
            Setting.DoNotSellList.Add("Слиток титановой стали");
            Setting.DoNotSellList.Add("Мифриловый слиток");
            Setting.DoNotSellList.Add("Слиток оскверненного железа");
            Setting.DoNotSellList.Add("Кориевый слиток");
            Setting.DoNotSellList.Add("Этерниевый слиток");
            Setting.DoNotSellList.Add("Осколок грез");
            Setting.DoNotSellList.Add("Кристалл пропасти");
            Setting.DoNotSellList.Add("Абсолютная пыль");
            Setting.DoNotSellList.Add("Масляный черноротик");
            Setting.DoNotSellList.Add("Удавник");
            Setting.DoNotSellList.Add("Масло черноротика");
            Setting.DoNotSellList.Add("Нож для снятия шкур");
            Setting.DoNotSellList.Add("Борейская кожа");
            Setting.DoNotSellList.Add("Толстая борейская кожа");
            Setting.DoNotSellList.Add("Арктический мех");
            Setting.DoNotSellList.Add("Обрывки борейской кожи");
            Setting.DoNotSellList.Add("Сумка из ткани Пустоты");
            Setting.DoNotSellList.Add("Сумка из ледяной ткани");
            Setting.DoNotSellList.Add("Небесный сапфир");
            Setting.DoNotSellList.Add("Алый рубин");
            Setting.DoNotSellList.Add("Сияние осени");
            Setting.DoNotSellList.Add("Сумеречный опал");
            Setting.DoNotSellList.Add("Лесной изумруд");
            Setting.DoNotSellList.Add("Императорский топаз");
            Setting.DoNotSellList.Add("Нерубский хитин");
            Setting.DoNotSellList.Add("Мерзлая чешуя дракона");
            Setting.DoNotSellList.Add("Руна порталов");
            Setting.DoNotSellList.Add("Сердце дикой природы");
            Setting.DoNotSellList.Add("Ледяной зев");
            Setting.DoNotSellList.Add("Горный серебряный шалфей");
            Setting.DoNotSellList.Add("Ледяной шар");

            if (MyRealName == "Метка" || MyRealName == "Cold" || MyRealName == "Жёсткая" || MyRealName == "Nick" || MyRealName == "Некласс")
                Setting.DoNotSellList.Add("Ледяная ткань");

            // consumable: food, buffs, reagents, potions, flasks //
            Setting.DoNotSellList.Add("Рунический флакон с зельем маны");
            Setting.DoNotSellList.Add("Прах");
            Setting.DoNotSellList.Add("Свеча благочестия");
            Setting.DoNotSellList.Add("Настой бесконечной ярости");
            Setting.DoNotSellList.Add("Эликсир Гогельмогеля");
            Setting.DoNotSellList.Add("Барабаны забытых королей");
            Setting.DoNotSellList.Add("Карломасло");
            Setting.DoNotSellList.Add("Зелье несокрушимости");
            Setting.DoNotSellList.Add("Рунический свиток стойкости");
            Setting.DoNotSellList.Add("Барабаны дикой природы");
            Setting.DoNotSellList.Add("Зелье свободы действий");
            Setting.DoNotSellList.Add("Слабый настой крепости");
            Setting.DoNotSellList.Add("Зелье скорости");
            Setting.DoNotSellList.Add("Плотные бинты из ледяной ткани");
            Setting.DoNotSellList.Add("Рунический набор для инъекций маны");
            Setting.DoNotSellList.Add("Рунический набор для лечебных инъекций");
            Setting.DoNotSellList.Add("Загадочное острое лакомство");
            Setting.DoNotSellList.Add("Кобальтовая осколочная бомба");
            Setting.DoNotSellList.Add("Знак королей");
            Setting.DoNotSellList.Add("Филе дракоперой рыбы-ангела");
            Setting.DoNotSellList.Add("Соленый сыр");
            Setting.DoNotSellList.Add("Подкаменщик-гриль");
            Setting.DoNotSellList.Add("Обмораживающие пули");
            Setting.DoNotSellList.Add("Наводящие ужас стрелы");
            Setting.DoNotSellList.Add("Зелье неудержимости");
            Setting.DoNotSellList.Add("Карибу в медовом соусе");

            // BIS equip //
            Setting.DoNotSellList.Add("Темная Скорбь");
            Setting.DoNotSellList.Add("Выбор смерти");
            Setting.DoNotSellList.Add("Приговор смерти");
            Setting.DoNotSellList.Add("Подвеска полутени");
            Setting.DoNotSellList.Add("Воля Смертоносного");
            Setting.DoNotSellList.Add("Заостренная сумеречная чешуя");
            Setting.DoNotSellList.Add("Бринтролль, Костяной Судья");
            Setting.DoNotSellList.Add("Приближение Апокалипсиса");
            Setting.DoNotSellList.Add("Кольцо повелителя скелетов");
            Setting.DoNotSellList.Add("Развевающийся саван");
            Setting.DoNotSellList.Add("Проржавевший костяной ключ");
            Setting.DoNotSellList.Add("Шепчущий клыкастый череп");
            Setting.DoNotSellList.Add("Зов хаоса, топор королей Лордерона");
            Setting.DoNotSellList.Add("Прилив Крови, клинок агонии Кел'Тузада");
            Setting.DoNotSellList.Add("Узы хладного духа");
            Setting.DoNotSellList.Add("Раздирающие плоть рукавицы");
            Setting.DoNotSellList.Add("Гравированный перстень Кирин-Тора");
            Setting.DoNotSellList.Add("Ярость Гарроша");
            Setting.DoNotSellList.Add("Сила Гнили");

            // nord blue & epic //
            Setting.DoNotSellList.Add("Панцирь сокрушения Агина");
            Setting.DoNotSellList.Add("Авулов меч Цинь");
            Setting.DoNotSellList.Add("Знамерез");
            Setting.DoNotSellList.Add("Пояс хрустальных слез");
            Setting.DoNotSellList.Add("Оплот-мечелом");
            Setting.DoNotSellList.Add("Большой посох из кровавого дерева");
            Setting.DoNotSellList.Add("Наручи меткого выстрела");
            Setting.DoNotSellList.Add("Наручи горячего сердца");
            Setting.DoNotSellList.Add("Наручи непрекращающегося воровства");
            Setting.DoNotSellList.Add("Уравнивающая кираса");
            Setting.DoNotSellList.Add("Наплечье покарания Шарлотты");
            Setting.DoNotSellList.Add("Плащ сообразительности");
            Setting.DoNotSellList.Add("Нагрудный доспех из кости кондора");
            Setting.DoNotSellList.Add("Накулачники потрескивающего пламени");
            Setting.DoNotSellList.Add("Драконье колье лютости");
            Setting.DoNotSellList.Add("Драконий зубодробитель");
            Setting.DoNotSellList.Add("Рукавицы потрошения");
            Setting.DoNotSellList.Add("Пояс свободного полета");
            Setting.DoNotSellList.Add("Наплеч из грубой шкуры черпоклыка");
            Setting.DoNotSellList.Add("Великий рогатый шлем непреклонности");
            Setting.DoNotSellList.Add("Захваты доброго сердца");
            Setting.DoNotSellList.Add("Рунический драконий жезл Гвинета");
            Setting.DoNotSellList.Add("Колокол Дже'Тце");
            Setting.DoNotSellList.Add("Поножи хождения по воде");
            Setting.DoNotSellList.Add("Поножи интенсивного кровотечения");
            Setting.DoNotSellList.Add("Набедренники моря отчаяния");
            Setting.DoNotSellList.Add("Заостренный мечелом Линдии");
            Setting.DoNotSellList.Add("Величественный скипетр Мелии");
            Setting.DoNotSellList.Add("Лишний шип Намлака");
            Setting.DoNotSellList.Add("Опутанный цепями наплеч Никсода");
            Setting.DoNotSellList.Add("Сокрушитель из окаменелого железного дерева");
            Setting.DoNotSellList.Add("Неугасающее колье Рейна");
            Setting.DoNotSellList.Add("Разрушительный перстень Рейна");
            Setting.DoNotSellList.Add("Когтистые рукавицы Рай-эй");
            Setting.DoNotSellList.Add("Длинный лук с перьями руха");
            Setting.DoNotSellList.Add("Убийственный Взгляд Рифта");
            Setting.DoNotSellList.Add("Кушак Джордана");
            Setting.DoNotSellList.Add("Светлотканый ремень");
            Setting.DoNotSellList.Add("Перстень Эдварда Странного");
            Setting.DoNotSellList.Add("Полный шлем вечного ужаса");
            Setting.DoNotSellList.Add("Огромное колье Торты");
            Setting.DoNotSellList.Add("Крученое кольцо-головоломка");
            Setting.DoNotSellList.Add("Вапачев наплеч единства");
            Setting.DoNotSellList.Add("Накулачники природного исцеления");
            Setting.DoNotSellList.Add("Аномальный посох Забры");
            Setting.DoNotSellList.Add("Удобная накидка Зои");
            Setting.DoNotSellList.Add("Потрескивающий оплот Зома");

            // other usefuls items //
            Setting.DoNotSellList.Add("Пространственный проходчик - Круговзор");
            Setting.DoNotSellList.Add("Пространственный проходчик - Зона 52");
            Setting.DoNotSellList.Add("Сверхбезопасный транспортер: станция Тошли");
            Setting.DoNotSellList.Add("Сверхбезопасный транспортер: Прибамбасск");
            Setting.DoNotSellList.Add("Увеличитель мира");

            // cant sell items //
            Setting.DoNotSellList.Add("Камень возвращения");

            print("список Setting.DoNotSellList составлен");
            logs("список Setting.DoNotSellList составлен");
        }

        // icecap / silverage / wild heart //
        if (Products.ProductName == "Quester" && (ProfileName() == "icecap.xml" || ProfileName() == "icecap-mountainsilversage-heartofthewild.xml" || ProfileName() == "heartofthewild-ungoro.xml" || ProfileName() == "heartofthewild-ungoro2.xml"))
        {
            Setting.DoNotSellList.Add("Heart of the Wild");
            Setting.DoNotSellList.Add("Icecap");
            Setting.DoNotSellList.Add("Mountain Silversage");
            Setting.HarvestHerbs = false;
            Setting.HarvestMinerals = false;
            Setting.MaxUnitsNearMobs = 50;
            Setting.MaxUnitsNearObjects = 50;
            Setting.LootMobs = true;
            Setting.MinFreeBagSlotsToGoToTown = 2;
            Setting.Repair = true;
            Setting.Selling = true;
            Setting.SellGray = true;
            Setting.SellWhite = true;
            Setting.SellGreen = true;
            Setting.SellBlue = false;
            Setting.SellPurple = false;
            Setting.SearchRadiusMobs = 50;
            Setting.HearthstoneAfterXBlockagesLatest10Minutes = 10;
            Setting.CloseAfterXBlockagesLatest10Minutes = 15;
            Setting.SearchRadiusObjects = 300;
            if (IsFpsExclusionProfile() && Continent() != "Expansion01")
                runlua("SetCVar('maxFPS','44') SetCVar('maxFPSBk','44') print('44 fps')");
            print("настройки для " + ProfileName() + " загружены");
            logs("настройки для " + ProfileName() + " загружены");
        }

        if (Products.ProductName == "Quester" && (ProfileName().ToLower().Contains("saronit") || ProfileName().ToLower().Contains("cobalt") || ProfileName().ToLower().Contains("mithril")))
        {
            wManager.wManagerSetting.CurrentSetting.LootMobs = true;
            wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;
            wManager.wManagerSetting.CurrentSetting.Selling = true;
            wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 2;
            wManager.wManagerSetting.CurrentSetting.Repair = true;
            wManager.wManagerSetting.CurrentSetting.SellGray = true;
            wManager.wManagerSetting.CurrentSetting.SellWhite = true;
            wManager.wManagerSetting.CurrentSetting.SellGreen = true;
            wManager.wManagerSetting.CurrentSetting.SellBlue = false;
            wManager.wManagerSetting.CurrentSetting.SellPurple = false;
            wManager.wManagerSetting.CurrentSetting.LootChests = true;
            wManager.wManagerSetting.CurrentSetting.SearchRadiusMobs = 50;
            wManager.wManagerSetting.CurrentSetting.LootInCombat = true;
            wManager.wManagerSetting.CurrentSetting.SkipNodesInWater = true;
            wManager.wManagerSetting.CurrentSetting.SkipInOutDoors = true;
            wManager.wManagerSetting.CurrentSetting.DetectNodesStuck = false;
            wManager.wManagerSetting.CurrentSetting.MaxTryPerNode = 3;
            wManager.wManagerSetting.CurrentSetting.HarvestAvoidPlayersRadius = 500;
            wManager.wManagerSetting.CurrentSetting.IgnoreFightDuringFarmIfDruidForm = true;
            wManager.wManagerSetting.CurrentSetting.MaxUnitsNearObjects = 100;
            wManager.wManagerSetting.CurrentSetting.HarvestMinerals = true;
            wManager.wManagerSetting.CurrentSetting.HarvestHerbs = true;
            wManager.wManagerSetting.CurrentSetting.SearchRadiusObjects = 300;
            print("настройки для " + ProfileName() + " загружены");
            logs("настройки для " + ProfileName() + " загружены");
        }

        if (Products.ProductName == "Quester" && ProfileName().Contains("gatherer"))
        {
            wManager.wManagerSetting.CurrentSetting.LootMobs = false;
            wManager.wManagerSetting.CurrentSetting.LootInCombat = false;
            wManager.wManagerSetting.CurrentSetting.Selling = true;
            wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
            wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;
            wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 1;
            wManager.wManagerSetting.CurrentSetting.Repair = true;
            wManager.wManagerSetting.CurrentSetting.SellGray = true;
            wManager.wManagerSetting.CurrentSetting.SellWhite = true;
            wManager.wManagerSetting.CurrentSetting.SellGreen = true;
            wManager.wManagerSetting.CurrentSetting.SellBlue = true;
            wManager.wManagerSetting.CurrentSetting.SellPurple = true;
            wManager.wManagerSetting.CurrentSetting.CloseIfWhisperBiggerOrEgalAt = 1000;
            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = true;
            wManager.wManagerSetting.CurrentSetting.RetrieveCorpseMaxDistance = 45;
            wManager.wManagerSetting.CurrentSetting.LootChests = false;
            wManager.wManagerSetting.CurrentSetting.AddToNpcDb = false;
            wManager.wManagerSetting.CurrentSetting.SearchRadiusObjects = 300;
            wManager.wManagerSetting.CurrentSetting.SearchRadiusMobs = 100;
            wManager.wManagerSetting.CurrentSetting.AcceptOnlyProfileNpc = true;
            wManager.wManagerSetting.CurrentSetting.IgnoreFightWhenInMove = false;
            wManager.wManagerSetting.CurrentSetting.HearthstoneAfterXBlockagesLatest10Minutes = 15;
            wManager.wManagerSetting.CurrentSetting.TrainNewSkills = true;
            wManager.wManagerSetting.CurrentSetting.HarvestMinerals = true;
            wManager.wManagerSetting.CurrentSetting.HarvestHerbs = true;
            wManager.wManagerSetting.AddBlackListZone(new Vector3(2728, -425, 108), 200, RDManaged.RD.PolyArea.POLYAREA_BIGDANGER, isSessionBlacklist: false);
        }

        if (IsFishingProfileName())
        {
            wManager.wManagerSetting.CurrentSetting.Repair = false;
            wManager.wManagerSetting.CurrentSetting.Selling = false;
            wManager.wManagerSetting.CurrentSetting.IgnoreServerRoadsWater = true;
            wManager.wManagerSetting.CurrentSetting.CloseAfterXBlockagesLatest10Minutes = 3;
            wManager.wManagerSetting.CurrentSetting.LootMobs = false;
        }

        NormalRegenSettings();

        FoodCheckAndRegenControl();

        if (Skill.GetValue(SkillLine.Skinning) > 400 && ItemsManager.GetItemCountById(7005) > 0)
        {
            Setting.SkinNinja = true;
            Setting.SkinMobs = true;
            logs("есть снятие шкур и нож - включаем профу");
            print("есть снятие шкур и нож - включаем профу");
        }
        //загрузка профиля если нет камня возвращения
        if((Lua.LuaDoString<bool>("if GetBindLocation() ~= 'Dalaran' and GetBindLocation() ~= 'The Underbelly' then return true end") || ItemsManager.GetItemCountById(6948) == 0) && Conditions.InGameAndConnected && Quest.QuesterCurrentContext.ProfileName != "Bind_or_create_hs.xml")
        {
            logs("Загрузка профиля Bind_or_create_hs.xml");
            LoadProfile(wManager.Wow.Class.QuestAction.LoadProfile, "Bind_or_create_hs.xml");
        }
    }

    public static void LoadProfile(wManager.Wow.Class.QuestAction questAction, String Code)
    {
        var p = Quest.QuesterCurrentContext.Profile as QuesterProfile;
        if (p != null)
        {
            var newstep = new wManager.Wow.Class.QuestsSorted { Action = questAction, NameClass = Code };
            p.QuestsSorted.Add(newstep);
            p.QuestsSorted.Add(newstep);
            p.QuestsSorted.Add(newstep);
            if ((p.QuestsSorted[Quest.QuesterCurrentContext.CurrentStep].Action == wManager.Wow.Class.QuestAction.Pulse || p.QuestsSorted[Quest.QuesterCurrentContext.CurrentStep].Action == wManager.Wow.Class.QuestAction.While || p.QuestsSorted[Quest.QuesterCurrentContext.CurrentStep].Action == wManager.Wow.Class.QuestAction.RunCode))
            {
                Lua.LuaDoString("if " + Var.GetVar<string>("PauseButtonFrameName") + ":IsShown() then " + Var.GetVar<string>("PauseButtonFrameName") + ":SetChecked(true) end");
                robotManager.Products.Products.InPause = true;
                Thread.Sleep(2000);
                robotManager.Products.Products.InPause = false;
                Lua.LuaDoString("if " + Var.GetVar<string>("PauseButtonFrameName") + ":IsShown() then " + Var.GetVar<string>("PauseButtonFrameName") + ":SetChecked(false) end");
            }
            Quest.QuesterCurrentContext.CurrentStep = p.QuestsSorted.IndexOf(newstep);

            Logging.Write("[QuestHelper] load profile " + Code + " Index of newstep " + p.QuestsSorted.IndexOf(newstep));
        }

    }
    private void plagins()
    {
        // плагины //            

        if (wManager.wManagerSetting.CurrentSetting.PluginsSettings.FindAll(p => p.Actif && p.FileName == "UsefulPluginV2.cs").FirstOrDefault() == null || wManager.wManagerSetting.CurrentSetting.PluginsSettings.FindAll(p => p.Actif && p.FileName == "Roboalert.dll").FirstOrDefault() == null || wManager.wManagerSetting.CurrentSetting.PluginsSettings.FindAll(p => p.Actif && p.FileName == "WhisperReply.dll").FirstOrDefault() == null ||
            wManager.wManagerSetting.CurrentSetting.PluginsSettings.FindAll(p => p.Actif && p.FileName == "RequestHandler.cs").FirstOrDefault() == null)
        {

            Logging.Write("один из плагинов не отмечен включеным");
            wManager.Plugin.PluginsManager.DisposeAllPlugins();
            Thread.Sleep(5000);

            foreach (var p in wManager.wManagerSetting.CurrentSetting.PluginsSettings)
            {
                if ((p.FileName == "UsefulPluginV2.cs" || p.FileName == "Roboalert.dll" || p.FileName == "Roboalert.dll" || p.FileName == "RequestHandler.cs") && !p.Actif)
                {
                    wManager.Plugin.PluginsManager.DisposeAllPlugins();
                    p.Actif = true;
                    Logging.Write("подрубаем " + p.FileName);
                }
            }
            Logging.Write("загружаем плагины");
            wManager.Plugin.PluginsManager.LoadAllPlugins();
            Thread.Sleep(20000);
        }

        Var.SetVar("LastUsedProfile", wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName);

        var x = 0;
        // ожидание загрузки UsefulPluginV2.cs //
        while (x < 60 && !Var.GetVar<bool>("InitializedAndLaunched") && wManager.wManagerSetting.CurrentSetting.PluginsSettings.FindAll(p => p.Actif && p.FileName == "UsefulPluginV2.cs").FirstOrDefault() != null)
        {
            Logging.Write("ожидание загрузки UsefulPluginV2.cs");
            Thread.Sleep(1000);
            x++;
        }

        if (x >= 60)
        {
            Logging.Write("время ожидания загрузки UsefulPluginV2.cs истекло, возможно ошибка");
        }


    }
    private void DismountWhenMeIsAttackedOnLowHPAndStayIdle()
    {
        if (MeIsKacher() && me.IsMounted && !me.IsFlying && me.HealthPercent < rnd(50, 70) && me.InCombat && ((!me.GetMove && !MovementManager.InMovement) || (me.GetMove && EnemyPlayerThatAttackingMeAndAlive() != null && me.SpeedMoving < 10 && tar().GetDistance < 20)) && (ObjectManager.GetUnitAttackPlayer().Count(u => u.GetDistance <= 40) > 0 || EnemyPlayerThatAttackingMeAndAlive() != null) && !MeIsInCityOrNearToCityOrSanctuary())
        {
            Dismount();
            print("дизмаунт если просаживают по хп а мы просто стоим на наземном маунте / игрок напал на нас и замедляет скорость передвижения");
            logs("дизмаунт если просаживают по хп а мы просто стоим на наземном маунте / игрок напал на нас и замедляет скорость передвижения");
            if (EnemyPlayerThatAttackingMeAndAlive() != null)
            {
                SendDiscordMessageDebug2("[" + Time() + "] [" + MyRealName + "]: дизмаунт если игрок напал на нас и замедляет скорость передвижения, атакующий: " + EnemyPlayerThatAttackingMeAndAlive().Name + " " + EnemyPlayerThatAttackingMeAndAlive().Guid + "");
                print("атакующий нас на маунте игрок: " + EnemyPlayerThatAttackingMeAndAlive().Name + " " + EnemyPlayerThatAttackingMeAndAlive().Guid + "");
                logs("атакующий нас на маунте игрок: " + EnemyPlayerThatAttackingMeAndAlive().Name + " " + EnemyPlayerThatAttackingMeAndAlive().Guid + "");
            }
            else
                SendDiscordMessageDebug2("[" + Time() + "] [" + MyRealName + "]: дизмаунт если мобы просаживают по хп а мы просто стоим на наземном маунте");
            ScreenAlertVisualMedium("дизмаунт если просаживают по хп");
            MaximizeWowWindow();
        }
    }

    private void ActivateTaxiNodes()
    {
        if (ActivateTaxiNodesTime < DateTime.Now)
        {
            ActivateTaxiNodesTime = DateTime.Now.AddSeconds(1000000);

            lock (Taxi.TaxiList.Locker)
            {
                foreach (var node in Taxi.TaxiList.Nodes)
                {
                    if (!node.Active)
                    {
                        Taxi.TaxiList.Active(node);
                        logs("активировали использование таксиста: [" + node.Name + "] [" + node.Position + "]");
                        print("активировали использование таксиста: [" + node.Name + "] [" + node.Position + "]");
                        SendDiscordMessageDebug1("[" + Time() + "] [" + me.Name + "] активировали использование таксиста: [" + node.Name + "] [" + node.Position.X + ", " + node.Position.Y + ", " + node.Position.Z + "]");
                        Taxi.TaxiList.Save();
                        sleep(100);
                    }
                }
            }
        }
    }

    private void PauseOnShittyBGs()
    {
        if (Mapzone() == "Isle of Conquest" || Mapzone() == "Strand of the Ancients")
        {
            if (Var.GetVar<bool>("Battlegounder"))
                return;
            Var.SetVar("MeWasOnBG", 1);
            print("[PauseOnShittyBGs] пауза на Isle of Conquest/Strand of the Ancients");
            logs("[PauseOnShittyBGs] пауза на Isle of Conquest/Strand of the Ancients");
            PauseOn();
            sleep(60000);
            PauseOff();
        }
    }

    private void CalculateItemLevel()
    {
        // my item level //
        myitemlevel = Lua.LuaDoString<int>(@"
            if GetInventoryItemID('player', 1) ~= nil then _,_,_,a = GetItemInfo(GetInventoryItemID('player', 1)) else a = 0 end --DEFAULT_CHAT_FRAME:AddMessage('head:'..a..'', 0, 1, 0.7)		        --> head
            if GetInventoryItemID('player', 2) ~= nil then _,_,_,b = GetItemInfo(GetInventoryItemID('player', 2)) else b = 0 end --DEFAULT_CHAT_FRAME:AddMessage('neck: '..b..'', 0, 1, 0.7)		        --> neck
            if GetInventoryItemID('player', 3) ~= nil then _,_,_,c = GetItemInfo(GetInventoryItemID('player', 3)) else c = 0 end --DEFAULT_CHAT_FRAME:AddMessage('shoulders: '..c..'', 0, 1, 0.7)			--> shoulders
            if GetInventoryItemID('player', 5) ~= nil then _,_,_,e = GetItemInfo(GetInventoryItemID('player', 5)) else e = 0 end --DEFAULT_CHAT_FRAME:AddMessage('chest: '..e..'', 0, 1, 0.7)				--> chest
            if GetInventoryItemID('player', 6) ~= nil then _,_,_,f = GetItemInfo(GetInventoryItemID('player', 6)) else f = 0 end --DEFAULT_CHAT_FRAME:AddMessage('waist: '..f..'', 0, 1, 0.7)				--> waist
            if GetInventoryItemID('player', 7) ~= nil then _,_,_,g = GetItemInfo(GetInventoryItemID('player', 7)) else g = 0 end --DEFAULT_CHAT_FRAME:AddMessage('legs: '..g..'', 0, 1, 0.7)		        --> legs
            if GetInventoryItemID('player', 8) ~= nil then _,_,_,h = GetItemInfo(GetInventoryItemID('player', 8)) else h = 0 end --DEFAULT_CHAT_FRAME:AddMessage('boots: '..h..'', 0, 1, 0.7)				--> boots
            if GetInventoryItemID('player', 9) ~= nil then _,_,_,i = GetItemInfo(GetInventoryItemID('player', 9)) else i = 0 end --DEFAULT_CHAT_FRAME:AddMessage('wrist: '..i..'', 0, 1, 0.7)				--> wrist
            if GetInventoryItemID('player', 10) ~= nil then _,_,_,j = GetItemInfo(GetInventoryItemID('player', 10)) else j = 0 end --DEFAULT_CHAT_FRAME:AddMessage('hands: '..j..'', 0, 1, 0.7) 	        --> hands
            if GetInventoryItemID('player', 11) ~= nil then _,_,_,k = GetItemInfo(GetInventoryItemID('player', 11)) else k = 0 end --DEFAULT_CHAT_FRAME:AddMessage('ring top: '..k..'', 0, 1, 0.7)			--> ring top
            if GetInventoryItemID('player', 12) ~= nil then _,_,_,l = GetItemInfo(GetInventoryItemID('player', 12)) else l = 0 end --DEFAULT_CHAT_FRAME:AddMessage('ring bottom: '..l..'', 0, 1, 0.7)		--> ring bottom
            if GetInventoryItemID('player', 13) ~= nil then _,_,_,m = GetItemInfo(GetInventoryItemID('player', 13)) else m = 0 end --DEFAULT_CHAT_FRAME:AddMessage('trinket top: '..m..'', 0, 1, 0.7) 		--> trinket top
            if GetInventoryItemID('player', 14) ~= nil then _,_,_,n = GetItemInfo(GetInventoryItemID('player', 14)) else n = 0 end --DEFAULT_CHAT_FRAME:AddMessage('trinket bottom: '..n..'', 0, 1, 0.7)	--> trinket bottom
            if GetInventoryItemID('player', 15) ~= nil then _,_,_,o = GetItemInfo(GetInventoryItemID('player', 15)) else o = 0 end --DEFAULT_CHAT_FRAME:AddMessage('cloak: '..o..'', 0, 1, 0.7)	        --> cloak
            if GetInventoryItemID('player', 16) ~= nil then _,_,_,p = GetItemInfo(GetInventoryItemID('player', 16)) else p = 0 end --DEFAULT_CHAT_FRAME:AddMessage('right hand: '..p..'', 0, 1, 0.7)	    --> right hand
            if GetInventoryItemID('player', 17) ~= nil then _,_,_,q = GetItemInfo(GetInventoryItemID('player', 17)) else q = 0 end --DEFAULT_CHAT_FRAME:AddMessage('left hand: '..q..'', 0, 1, 0.7) 	    --> left hand
            if GetInventoryItemID('player', 18) ~= nil then _,_,_,r = GetItemInfo(GetInventoryItemID('player', 18)) else r = 0 end --DEFAULT_CHAT_FRAME:AddMessage('ranged: '..r..'', 0, 1, 0.7) 	    	--> ranged

            divisor = 0
            myitemlevel = 0

            if p ~= 0 then 

		        name,_,_,_,_,_,subclass = GetItemInfo(GetInventoryItemID('player', 16)) 

		        --DEFAULT_CHAT_FRAME:AddMessage('weapon: '..name..'', 0, 1, 0.7) DEFAULT_CHAT_FRAME:AddMessage('weapon subclass: '..subclass..'', 0, 1, 0.7)

                if (GetLocale() == 'enUS' or GetLocale() == 'enGB') then
                    if (subclass == 'Two-Handed Axes' or subclass == 'Two-Handed Maces' or subclass == 'Two-Handed Swords' or subclass == 'Polearms' or subclass == 'Staves') then divisor = 16; myitemlevel = ((a+b+c+e+f+g+h+i+j+k+l+m+n+o+p+q+r) / divisor) end
                    if (subclass == 'One-Handed Axes' or subclass == 'One-Handed Maces' or subclass == 'One-Handed Swords' or subclass == 'Daggers' or subclass == 'Fist Weapons') then divisor = 17; myitemlevel = ((a+b+c+e+f+g+h+i+j+k+l+m+n+o+p+q+r) / divisor) end
                end

                if GetLocale() == 'ruRU' then
                    if (subclass == 'Двуручные топоры' or subclass == 'Двуручное дробящее оружие' or subclass == 'Двуручные мечи' or subclass == 'Древковое оружие' or subclass == 'Посохи') then divisor = 16; myitemlevel = ((a+b+c+e+f+g+h+i+j+k+l+m+n+o+p+q+r) / divisor) end
                    if (subclass == 'Топоры' or subclass == 'Дробящее оружие' or subclass == 'Мечи' or subclass == 'Кинжалы' or subclass == 'Кистевое оружие') then divisor = 17; myitemlevel = ((a+b+c+e+f+g+h+i+j+k+l+m+n+o+p+q+r) / divisor) end
                end

            end

            if p == 0 then DEFAULT_CHAT_FRAME:AddMessage('[UP log]: Нельзя просто так взять и посчитать итем лвл без пухи, одевай и рестарти плагин бро!', 1, 0, 0) myitemlevel = 0 end

		    --DEFAULT_CHAT_FRAME:AddMessage('character average item level: '..myitemlevel..'', 0, 1, 0.7)

            return myitemlevel
            ");

        logs("общий итем лвл: " + myitemlevel + "");
        print("общий итем лвл: " + myitemlevel + "");
    }

    private void NormalRegenSettings()
    {
        // food settings //
        if (!IsHonorFarmProfileName() && !IsMiningHerbalismUpProfileName())
        {
            if (me.Level >= 80)
            {
                if (ImWarlock || ImMage || ImHunter || ImRogue)
                {
                    Setting.FoodMaxPercent = 99;
                    Setting.DrinkMaxPercent = 99;
                    Setting.FoodPercent = 65;
                    Setting.DrinkPercent = 65;
                }

                if (ImDK || ImWarr || ImRogue)
                {
                    Setting.FoodMaxPercent = 99;
                    Setting.FoodPercent = 60;
                    Setting.DrinkPercent = 1;
                    Setting.DrinkMaxPercent = 1;
                    Setting.RestingMana = false;
                }

                if (ImPriest || ImDruid || ImShaman || ImPal)
                {
                    Setting.FoodIsSpell = true;
                    Setting.FoodMaxPercent = 82;
                    Setting.FoodPercent = 80;
                    Setting.DrinkMaxPercent = 50;
                    Setting.DrinkPercent = 25;
                    if (ImPal)
                    {
                        if (GetLocale.Contains("en"))
                            Setting.FoodName = "Flash of Light";
                        else
                            Setting.FoodName = "Вспышка света";
                    }
                    if (ImPriest)
                    {
                        wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                        if (GetLocale.Contains("en"))
                            Setting.FoodName = "Flash Heal";
                        else
                            Setting.FoodName = "Быстрое исцеление";
                    }
                    if (ImShaman)
                    {
                        if (GetLocale.Contains("en"))
                            Setting.FoodName = "Lesser Healing Wave";
                        else
                            Setting.FoodName = "Малая волна исцеления";
                    }
                    if (ImDruid)
                    {
                        wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                        if (GetLocale.Contains("en"))
                            Setting.FoodName = "Nourish";
                        else
                            Setting.FoodName = "Покровительство природы";
                    }
                }

                if (ImMage)
                {
                    wManager.wManagerSetting.CurrentSetting.RestingMana = true;
                    Setting.FoodName = "Conjured Mana Strudel";
                    Setting.DrinkName = "Conjured Mana Strudel";
                    wManager.wManagerSetting.CurrentSetting.TryToUseBestBagFoodDrink = false;
                    /*wManager.wManagerSetting.CurrentSetting.DrinkName = "Conjured Mana Strudel";
                    wManager.wManagerSetting.CurrentSetting.DrinkPercent = 65;
                    wManager.wManagerSetting.CurrentSetting.TryToUseBestBagFoodDrink = true;*/

                }
                    

                print("настройки регена для 80 лвл загружены");
                logs("настройки регена для 80 лвл загружены");

            }

            if (MeIsKacher())
            {
                if (ImPal)
                {
                    if (GetLocale.Contains("en"))
                        Setting.FoodName = "Holy Light";
                    else
                        Setting.FoodName = "Свет небес";
                    Setting.FoodIsSpell = true;
                    Setting.FoodMaxPercent = rnd(80, 99);
                    Setting.FoodPercent = rnd(53, 65); ;
                    Setting.DrinkMaxPercent = rnd(65, 80);
                    Setting.DrinkPercent = rnd(25, 35); 
                    //robotManager.Helpful.Var.SetVar("dbgOutput", wManager.wManagerSetting.CurrentSetting.dr);
                }

                if (ImDK)
                {
                    Setting.FoodMaxPercent = rnd(80, 99);
                    Setting.DrinkMaxPercent = 1;
                    Setting.FoodPercent = rnd(53, 65);
                    Setting.DrinkPercent = 1;
                }

                print("настройки регена для кача загружены");
                logs("настройки регена для кача загружены");

            }
        }
    }

    private void Kach()
    {
        if (MeIsKacher())
        {
            if (!ImDK)
            {
                if (RealmShortName == "Circle LK x5")
                {
                    var l = new List<uint> { 6, 10, 12, 14, 16, 20, 22, 24, 28, 30, 34, 36, 38, 40, 42, 46, 50, 54, 58, 60, 68, 80 };
                    Setting.TrainNewSkills = l.Contains(me.Level);
                }

                if (RealmShortName == "Circle LK x100")
                {
                    var l = new List<uint> { 6, 12, 20, 30, 36, 44, 52, 60 };
                    Setting.TrainNewSkills = l.Contains(me.Level);
                }
                else if (RealmShortName == "Circle LK x1")
                {
                    var l = new List<uint> { 4, 6, 8, 10, 12, 14, 16, 20, 22, 24, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 58, 60, 68, 80 };
                    Setting.TrainNewSkills = l.Contains(me.Level);
                }
            }

            // меняет репу у кланов кентавров в пустошах чтобы можно было атаковать их //
            if (ReputationChangeInDesolaceTimer < DateTime.Now && me.Level < 43 && Mapzone() == "Desolace")
            {
                ReputationChangeInDesolaceTimer.Date.AddSeconds(rnd(55, 111));
                runlua("f='Gelkis Clan Centaur' for i=1,GetNumFactions() do local n,_,_,_,_,_,w,a=GetFactionInfo(i) if f==n and a==1 then if w==nil then FactionToggleAtWar(i) end end end");
                runlua("f='Magram Clan Centaur' for i=1,GetNumFactions() do local n,_,_,_,_,_,w,a=GetFactionInfo(i) if f==n and a==1 then if w==nil then FactionToggleAtWar(i) end end end");
            }

            LearnTalents(); // каждые 200-300 сек
            SearchHelpers(); //чек союзников для помощи в квестах
            if (Var.GetVar<int>("MeIsKacher") != 1)
                Var.SetVar("MeIsKacher", 1);
        }
    }

    private void InitializeHatersGuidsList()
    {
        HatersGuidsList = new List<ulong>(new ulong[] {
                6796937 // тамби
                , 1746177 // Darksuln
                , 157405 // Определённо
                , 4913430 // Raidho
                , 3102271 // Якрысычь
                , 6855887 // Jeemee
                , 4135196 // Анчоусик
                , 6753520 // Arefin
                , 4117138 // Приистус
                , 983760 // Automute
                , 6767395 // Sonicmaster
                , 6617527 // Trunembra
                , 1713444 // Kosolapaya
                , 2424345 // Miliena
                , 791105 // Xalerka
                //, 5511668 //Diablotar перм
                , 16126 // Безжалостная
                , 1838308 // Бенхарт
                , 6688331 // Тянучька
                , 2815249  // Dizerxd
                , 2204192 //Dizerxnova 
                , 961261 // Dizermod
                , 5935032 // Dizermoder
                , 4280500 // Druidicha
                , 6800299 //Juciewrld 
                , 6228125 // Dreammage
                , 6309415 // Evilbun
                , 6218547 //Goozert
                , 6518463 //Acstepko
                , 6516082 //Торапышкаа
                , 6333158 // Трепещите
                , 5607933 // Хитрыйдруу
                , 5113957 //Сепфисто
                , 5869978 //Желтыйгриб
                , 807691 //Signetic
                , 6577337 //Acstep
                , 1824089 //Bloodypalad
                , 6024759 // Holyanna
                , 3338063  //Krivedka
                //, 127150 // Quickley
                , 6021483 // Аббадонис
                , 4600191 // Скорпирон
                , 3368695 // Necromancer
                , 4244941 // Siege
                , 3818617 // Kybot
                , 2793373 // Payn
                , 5333665 // Tkeyah
                , 4318058 // Беатрич
                , 5243394 // Gilliona
                , 2728220 //Anrolik
                , 6104288 // Raxaji
                , 3392153 // Gylve
                , 3969794 // Линси
                , 4808512 // Pidje
                , 5480714 // Призраквойны
                , 3841927 // Обнаженная
                , 6392239 // Обнажённая
                , 2723246 // Грохотуля
                , 2874998 // Милашкаприст
                , 2319981 // Rozochka
                , 2992608 // Шампа
                , 3122509 // Суфле
                , 5585418 // Sequoya
                , 6101678 // Krisvon
                , 4582416 // Qollgate
                , 5132461 // Tianero
                , 4696576 // Шайтана
                , 6097586 // Корелла
                , 4523508 // Эдарби
                , 600794 // Милашкамайя
                , 2169949 // Маюша
                , 2078980 // Maya
                , 2238471 // Елизаздра
                , 4731874 // Hesenberg
                , 2806934 // Милашкадру
                , 4419340 // Леснойсон
                , 5865727 // Tanazal
                , 2174984 // Euphoriagm
                , 747372 // Пиффия
                , 3547278 // Прихлоп
                , 870651 // Рабыня
                , 5996156 // Конецнастал
                , 278094 // Идзайка
                , 2420912 // Баблдинша
                //, 5393240 // Злойбычарра
                //, 5858578 // Ыщаырвзщрыдп
                , 2150522 // Dllink
                , 2242521 // Тролодин
                , 2260713 // Девачка
                , 2149629 // Леми
                //, 5259622 // Musorniy
                , 6422434 // Провинился
                , 4513779 // Каккух
                , 4554326 // Чучурындра
                , 5902474 // Шалунишо
                , 2966487 // Деска
                , 6289820 // Prinujdenie
                , 6317306 // Бешкэтнык
                , 4539246 // Леснойапух
                , 157405 // Определённо
                , 4913430 // Raidho
                , 3102271 // Якрысычь
                , 6855887 // Jeemee
                , 4135196 // Анчоусик
                , 6753520 // Arefin
                , 5465265 // Мирфеа
                , 3416703 // Соне
                , 3621435 // Срустоя
                , 6903646 // Йохен
                , 6289820 // Prinujdenie
                //, 6778535 // Иксфактор
                , 2665650 // мэрилинка
                , 5807870 // sonora
                , 2053937 // soulfiery
                , 6960945 // аАТВИНТА
                , 4648699 // МИЛИКИ
                , 2816998 // supergeil
                , 3112992 // ispandora
                , 4278001 // Шамашамашан
                , 5133945 // Likkili
                //, 4333093 // Иксфактор
                , 4333093 // javadonna
                , 1924819 // заябулочка
                , 5908053 // nemidora 
                , 7016479 // rishalo
                , 2779893 // Larcen
                , 4580726 // безжалостная
                , 2672484 // Dizerbad
                , 857186 // непобедимая твин дизера
                , 6254193 // vusalegm
                , 2220590 // kastelo
                , 7026785 // Эльдриаса
                , 5680685 // Жииваая
                , 6818433 // Salanne
                , 5236450 // Newer
                , 7073156 // Недлядпс
                , 1124210 // Altela
                , 6935156 // Эльброхо
                , 4512592 // Besthakc
                , 6956362 // Grinexx
                , 7048848 // Samaara
                , 6895513 // Ландор
                , 1751367 // Настенько
                , 2817890 // neolog
                , 4135640 // mungalova
                , 3901134 // Ariala
                , 3995491 // Sinsaint
                , 4557993 // Янебарыга
                , 7105245 // Shapely
                , 3921814 // Костеро
                , 7046877 // Wintage
                , 5009635 // thighgap
                , 4360483 // Дратутиня
                , 7061916 // Вее
                , 7137125 // Wishkillr
                , 6461030 // напишимне
                //, 3802680 // Qwgfghjh
                //, 5757357 // Khambir //перм
                , 3802680 // Дворфпристт
                , 7237876 // Druidichko 
                , 7248370 // Coolsindra лузернейм
                , 2455770 // Чудоя лузернейм
                , 6740910 // Dzhina 
                ,811679 // Каталина Dizermeow
                ,273033 //прихлопбил дезер петушара
                ,6211922 //Предсмертная
                ,1050810 //lesly
                ,597481 //lisa
                ,1278991 // Byrevesnica
                ,379659//чара
                ,108369//Beby
                ,212694 //Buntarka
                ,4719758 //Катястрофа
                ,2372906 //Zzajka
                ,3570 //Frostmigera
                ,157571 //Byntarka
                ,4620440 //Meowkissme
                ,5308971 //Патрикеевна
                ,5549460 //Саломка 
                ,4046513 //soraf
                ,1745282 //Ловиподхил
                //,3902980 //Suchecka
                ,2783965 // Кулина
                ,5236450 // Newer
                ,5212623 // Невер
                ,6519337 // Newermour
                ,5266151 // Lovestory
                ,5565697 // Экзистенция
                ,5546063 // Ностальгия
                ,6521345 // Милосердие
                ,5487680 // Зайка
                ,7366038 // Ктояктоты
                ,4080321 // Nikromm
                ,7209863 // kakprince
                ,3384474 // Yodudee
                //,5874 // pal
                ,3710533 // Blon
                ,4196373 // эллару
			    ,4051788 // sorc
                ,6414543 // qqapp
                ,7399592 // Алиначка
			    ,1877833 // hateall
			    ,5719254 // Mydvaksedmoy
			    ,7359391 // Алкошоид
			    ,7359299 // Rastavan
                ,7393756 // Fyar
                ,7492099 // Sharapoff
                ,7492099 // 4300351
            });
    }
    private void InitializeHatersNamesList()
    {
        HatersNamesList = new List<string>(new string[]
        {
                  "Тамби"
                ,  "Darksuln"
                ,  "Определённо"
                ,   "Raidho"
                ,   "Якрысычь"
                ,   "Jeemee"
                ,   "Анчоусик"
                ,   "Arefin"
                ,   "Приистус"
                ,  "Automute"
                ,   "Sonicmaster"
                ,   "Trunembra"
                ,   "Kosolapaya"
                ,   "Miliena"
                ,  "Xalerka"
                ,  "Безжалостная"
                ,   "Бенхарт"
                ,   "Тянучька"
                ,    "Dizerxd"
                ,  "Dizerxnova"
                ,  "Dizermod"
                ,   "Dizermoder"
                ,   "Druidicha"
                ,  "Juciewrld"
                ,   "Dreammage"
                ,   "Evilbun"
                ,  "Goozert"
                ,  "Acstepko"
                ,  "Торапышкаа"
                ,   "Трепещите"
                ,   "Хитрыйдруу"
                ,  "Сепфисто"
                ,  "Желтыйгриб"
                , "Signetic"
                ,  "Acstep"
                , "Bloodypalad"
                ,   "Krivedka"
                ,  "Quickley"
                ,   "Аббадонис"
                ,   "Скорпирон"
                ,   "Necromancer"
                ,   "Siege"
                ,   "Kybot"
                ,   "Payn"
                ,   "Tkeyah"
                ,   "Беатрич"
                ,   "Gilliona"
                ,  "Anrolik"
                ,   "Raxaji"
                ,   "Gylve"
                ,   "Линси"
                ,   "Pidje"
                ,   "Призраквойны"
                ,   "Обнаженная"
                ,   "Обнажённая"
                ,   "Грохотуля"
                ,   "Милашкаприст"
                ,   "Rozochka"
                ,   "Шампа"
                ,   "Суфле"
                ,   "Sequoya"
                ,   "Krisvon"
                ,   "Qollgate"
                ,   "Tianero"
                ,   "Шайтана"
                ,   "Корелла"
                ,   "Эдарби"
                ,   "Милашкамайя"
                ,   "Маюша"
                ,   "Maya"
                ,   "Елизаздра"
                ,   "Hesenberg"
                ,   "Милашкадру"
                ,   "Леснойсон"
                ,   "Tanazal"
                ,   "Euphoriagm"
                ,  "Пиффия"
                ,   "Прихлоп"
                ,  "Рабыня"
                ,   "Конецнастал"
                ,  "Идзайка"
                ,   "Баблдинша"
     /*           ,  "Злойбычарра"
                 ,"Ыщаырвзщрыдп"
                ,   "Dllink"*/
                ,   "Тролодин"
                ,   "Девачка"
                ,   "Леми"
                //,  "Musorniy"
                ,   "Провинился"
                ,   "Каккух"
                ,   "Чучурындра"
                ,   "Шалунишо"
                ,   "Деска"
                ,   "Prinujdenie"
                ,   "Бешкэтнык"
                ,   "Леснойапух"
                ,  "Определённо"
                ,   "Raidho"
                ,   "Якрысычь"
                ,   "Jeemee"
                ,   "Анчоусик"
                ,   "Arefin"
                ,   "Мирфеа"
                ,   "Соне"
                ,   "Срустоя"
                ,   "Йохен"
                ,   "Prinujdenie"
                ,   "Иксфактор"
                ,   "мэрилинка"
                ,   "sonora"
                ,   "soulfiery"
                ,   "Аатвинта"
                ,   "Милики"
                ,   "supergeil"
                ,   "ispandora"
                ,   "Шамашамашан"
                ,  "Likkili"
                ,   "Иксфактор"
                ,   "javadonna"
                ,   "заябулочка"
                ,   "nemidora"
                ,   "rishalo"
                ,   "Larcen"
                ,   "безжалостная"
                ,   "Dizerbad"
                ,  "непобедимая"
                ,   "vusalegm"
                ,   "kastelo"
                ,   "Эльдриаса"
                ,   "Жииваая"
                ,   "Salanne"
                ,   "Недлядпс"
                ,   "Altela"
                ,   "Эльброхо"
                ,   "Besthakc"
                ,   "Grinexx"
                ,   "Samaara"
                ,   "Ландор"
                ,   "Настенько"
                ,   "neolog"
                ,   "mungalova"
                ,   "Ariala"
                ,   "Sinsaint"
                ,   "Янебарыга"
                ,   "Shapely"
                ,   "Костеро"
                ,   "Wintage"
                ,   "thighgap"
                ,   "Дратутиня"
                ,   "Вее"
                ,   "Wishkillr"
                ,   "Напишимне"
                //,   "Qwgfghjh" //перм 
                //,   "Khambir" //перм
                ,   "Дворфпристт"
                ,   "Druidichko"
                ,   "Coolsindra"
                ,   "Qq"
                  , "Каталина"
                  ,"Прихлопбил"
                  ,"Предсмертная"
                  ,"Lesly"
                  ,"Lisa"
                  ,"Byrevesnica"
                ,"Чара"
                ,"Beby"
                ,"Buntarka"
                ,"Катястрофа"
                ,"Zzajka"
                ,"Frostmigera"
                ,"Byntarka"
                ,"Meowkissme"
                ,"Патрикеевна"
                ,"Саломка"
                ,"soraf"
                ,"Ловиподхил"
                ,"Suchecka"
                ,"Кулина"
                ,"Ктояктоты"
                ,"Nikromm"
                ,"kakprince"
                ,"Dizermya"
                ,"Bloodeath"
                ,"Yodudee"
                ,"Явсёпоменяю"
                ,"Пактман"
                ,"Newer"
                ,"Невер"
                ,"Newermour"
                ,"Lovestory"
                ,"Экзистенция"
                ,"Ностальгия"
                ,"Милосердие"
                ,"Зайка"
                //,"pal"
                ,"Blon"
                ,"Dizermeow"
                ,"эллару"
                ,"sorc"
                ,"qqapp"
                ,"Алиначка"
                ,"hateall"
                ,"Mydvaksedmoy"
                ,"Алкошоид"
                ,"Rastavan"
                ,"Fyar"
                ,"Sharapoff"
                ,"xumavaru"
        });
    }

    private void HaterAlert()
    {
        if (HaterChecksPulse < DateTime.Now)
        {
            var HatersNearMe = GetHatersNearMe();

            if (HatersNearMe.Count > 0)
            {
                BasicScriptsErrorsCloseTime = DateTime.Now.AddSeconds(60);
                HaterChecksPulse = DateTime.Now.AddSeconds(rnd(7, 15));
                //FramesUpdatePulse = DateTime.Now.AddSeconds(100);

                var HaterNames = "";
                foreach (var hater in HatersNearMe)
                {
                    HaterNames += (hater.Name + "");
                }

                var Hater = ObjectManager.GetNearestWoWPlayer(HatersNearMe);

                //CreateCenterTextFrame();
                CreateAllFrames();
                sleep(10);

                // хейтер алерт (не в городе/не на бг) //
                if (!MeIsInCityOrNearToCityOrSanctuary() && !Battleground.IsInBattleground() && Mapzone() != "Crystalsong Forest" && Mapzone() != "Лес Хрустальной Песни")
                {
                    // хейтер враг //
                    if (Hater.IsAttackable)
                    {
                        logs("[HaterAlert] хейтер враг: [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", таргетит: " + Hater.IsTargetingMe + ", атакует: " + Hater.InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        print("[HaterAlert] хейтер враг: [" + HaterNames + "], гуид " + Hater.Guid + "");
                        SendDiscordMessageEnemyHater("[" + Time() + "] [" + MyRealName + "]: хейтер враг: [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", таргетит: " + Hater.IsTargetingMe + ", атакует: " + Hater.InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        ScreenAlertVisualUber("хейтер враг\\n" + HaterNames + " " + Hater.Guid + "");

                        if (Hater.GetDistance < 30 || Hater.IsTargetingMe)
                        {
                            logs("[HaterAlert] хейтер враг оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + "");
                            runlua("PlaySoundFile('Sound/Doodad/DwarfHorn.wav')");
                            runlua("SetCVar('maxFPS','44') SetCVar('maxFPSBk','44')");
                            print("[HaterAlert] хейтер враг оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + "");
                            SendDiscordMessageEnemyHater("[" + Time() + "] [" + MyRealName + "]: хейтер враг оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", таргетит: " + Hater.IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                            ScreenAlertVisualUber("хейтер враг близко\\nтаргетит: " + Hater.IsTargetingMe + "\\n" + HaterNames + " " + Hater.Guid + "");
                            JoinBG();
                            AcceptBG();
                            MaximizeWowWindow();
                        }
                    }

                    // хейтер союзник //
                    if (!Hater.IsAttackable)
                    {
                        logs("[HaterAlert] хейтер союзник: [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", таргетит: " + Hater.IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        print("[HaterAlert] хейтер союзник: [" + HaterNames + "], гуид " + Hater.Guid + "");
                        SendDiscordMessageFriendlyHater("[" + Time() + "] [" + MyRealName + "]: хейтер союзник: [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", таргетит: " + Hater.IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        ScreenAlertVisualMedium("хейтер союзник\\n" + HaterNames + " " + Hater.Guid + "");

                        if (Hater.GetDistance < 30 || Hater.IsTargetingMe)
                        {
                            logs("[HaterAlert] хейтер союзник оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + "");
                            print("[HaterAlert] хейтер союзник оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + "");
                            SendDiscordMessageEnemyHater("[" + Time() + "] [" + MyRealName + "]: хейтер союзник оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", таргетит: " + Hater.IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                            print("[HaterAlert] хейтер союзник оч близко, таргетит: " + Hater.IsTargetingMe + ", [" + HaterNames + "], гуид " + Hater.Guid + "");
                            ScreenAlertVisualMedium("хейтер союзник близко\\nтаргетит: " + Hater.IsTargetingMe + "\\n" + HaterNames + " " + Hater.Guid + "");
                            runlua("PlaySoundFile('Sound/Spells/JennysWhistle.wav')");
                            runlua("SetCVar('maxFPS','44') SetCVar('maxFPSBk','44')");
                            JoinBG();
                            AcceptBG();
                            MaximizeWowWindow();
                        }
                    }
                }

                // хейтер таргетит в городах/на бг //
                if (Hater.IsTargetingMe && Hater.GetDistance < 50 && (MeIsInCityOrNearToCityOrSanctuary() || Battleground.IsInBattleground()))
                {
                    logs("[HaterAlert] хейтер таргетит в городе/бг: [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    print("[HaterAlert] хейтер таргетит в городе/бг: [" + HaterNames + "], гуид " + Hater.Guid + "");
                    SendDiscordMessageEnemyHater("[" + Time() + "] [" + MyRealName + "]: хейтер таргетит в городе: [" + HaterNames + "], гуид " + Hater.Guid + ", " + Hater.Level + " лвл " + Hater.WowRace + " " + Hater.WowClass + ", дистанция: " + (int)Hater.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)Hater.Position.X + ", " + (int)Hater.Position.Y + ", " + (int)Hater.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    runlua("PlaySoundFile('Sound/Doodad/DwarfHorn.wav')");
                    ScreenAlertVisualMedium("хейтер таргетит в городе/бг\\n" + HaterNames + " " + Hater.Guid + "");
                    JoinBG();
                    AcceptBG();
                    MaximizeWowWindow();
                }
            }
        }
    }

    private void LogoutIfDeadInGhostBug()
    {
        if (me.HaveBuff("Ghost") && me.Health == 0)
        {
            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: лежит дохлый в призраке => логаут для фикса, зона: " + MyPosXYZ() + ", " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
            logs("лежит в призраке => логаут для фикса");
            PauseAndLogout();
            EnterWorldAndOffPause();
        }
    }

    private void CheckLogs()
    {
        // чекаем записи в логах //
        if (!Var.Exist("CheckLogs"))
        {
            Var.SetVar("CheckLogs", true);
            LoggingEvents.OnAddLog += delegate (Logging.Log logx)
            {

                /*            // pathfinder server down bug - kill wrobot.exe //
                            if (logx.Text.Contains("[Security] Pathfinder server seem down") && Subzone() != "Auchindoun" && Subzone() != "The Bone Wastes" && Subzone() != "Аукидон" && Subzone() != "Костяные пустоши")
                            {
                                Var.SetVar("PathfinderDown", Var.GetVar<int>("PathfinderDown") + 1);
                                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: kill wrobot => pathfinder server down, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                                logs("[CheckLogs] kill wrobot => pathfinder server down");
                                print("[CheckLogs] kill wrobot => pathfinder server down");
                                sleep(10);
                                //System.Diagnostics.Process.GetCurrentProcess().Kill();
                                System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                            }

                            // pathfinder server down bug - kill wrobot.exe //
                            if (logx.Text.Contains("[Security] Pathfinder server seem down") && Subzone() != "Auchindoun" && Subzone() != "The Bone Wastes" && Subzone() != "Аукидон" && Subzone() != "Костяные пустоши")
                            {
                                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: kill wrobot => pathfinder server down, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                                logs("[CheckLogs] kill wrobot => pathfinder server down");
                                print("[CheckLogs] kill wrobot => pathfinder server down");
                                sleep(10);
                                //System.Diagnostics.Process.GetCurrentProcess().Kill();
                                System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                            }*/
                if (logx.Text.Contains("Sell items"))
                {

                    Var.SetVar("TotownCount", Var.GetVar<int>("TotownCount") + 1);
                    logs("[CheckLogs] TotownCount " + Var.GetVar<int>("TotownCount"));
                    print("[CheckLogs] TotownCount " + Var.GetVar<int>("TotownCount"));
                    if (Var.GetVar<int>("TotownCount") > 25/* && Bag.GetBagItem().Count(i => i.GetItemInfo.ItemSellPrice > 0 && !Setting.DoNotSellList.Contains(i.Name)) == 0*/)
                    {
                        logs("[CheckLogs] Забагался тутаун - не может продать ничего - фул сумка шмоток - офаем селлинг");
                        print("[CheckLogs] Забагался тутаун -не может продать ничего - фул сумка шмоток -офаем селлинг");
                        Setting.Selling = false;
                    }
                    //SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: Compilator Error, " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", профиль " + ProfileName() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + "");
                    //MaximizeWowWindow();
                    //robotManager.Helpful.Win32.Native.ShowWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle, 4); // развернуть окно робота
                    //robotManager.Helpful.Win32.Native.SetForegroundWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle); // сделать окно робота поверх
                }
                if (logx.Text.ToLower().Contains(".questhelper.checkplugins()"))
                {
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: checkplugins bug - коллекция была изменена - кил процесса бота, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] checkplugins bug - коллекция была изменена - кил процесса бота");
                    print("[CheckLogs] checkplugins bug - коллекция была изменена - кил процесса бота");
                    Lua.LuaDoString("Logout()");
                    System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                    //ScreenAlertVisualUber("cannot reach position of taxi node");
                    sleep(10);
                }
                if (logx.Text.ToLower().Contains("cannot reach position of taxi node") && MeIsKacher())
                {
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: cannot reach position of taxi node, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] cannot reach position of t4xi node");
                    print("[CheckLogs] cannot reach position of taxi node");
                    //ScreenAlertVisualUber("cannot reach position of taxi node");
                    sleep(10);
                }

                if (logx.Text.ToLower().Contains("cannot found npc of taxi") && MeIsKacher())
                {
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: cannot found npc of taxi, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] cannot found npc of t4xi");
                    print("[CheckLogs] cannot found npc of taxi");
                    //ScreenAlertVisualUber("cannot found npc of taxi");
                    sleep(10);
                }

                if (logx.Text.ToLower().Contains("try to take taxi") && MeIsKacher())
                {
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: try to take taxi, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] try to take t4xi");
                    print("[CheckLogs] try to take taxi");
                    //ScreenAlertVisualUber("try to take taxi");
                    sleep(10);
                }

                if (logx.Text.ToLower().Contains("use flightmaster") && MeIsKacher())
                {
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: use flightmaster " + tar().Name + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] use flightm4ster " + tar().Name + "");
                    print("[CheckLogs] use flightmaster " + tar().Name + "");
                    //ScreenAlertVisualUber("use flightmaster " + tar().Name + "");
                    sleep(10);
                }

                // ошибка 'этот файл используется' //
                if (logx.Text.Contains("этот файл используется"))
                {
                    SendDiscordMessageDebug2("[" + Time() + "] [" + MyRealName + "]: ошибка 'этот файл используется' " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] ошибка 'этот файл используется'");
                    print("[CheckLogs] ошибка 'этот файл используется'");
                    sleep(10);
                    System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                }

                if (logx.Text.Contains("[Relog] Player") && Var.GetVar<int>("NeedForLogout") != 1 && !GetGanked && !KilledByPlayer)
                {
                    /*                System.Threading.Tasks.Task.Factory.StartNew(() =>
                                    {
                                        logs("[CheckLogs] NeedForLogout = " + Var.GetVar<int>("NeedForLogout") + "");
                                        print("[CheckLogs] NeedForLogout = " + Var.GetVar<int>("NeedForLogout") + "");
                                        logs("[CheckLogs] кил процесса после дискона");
                                        Thread.Sleep(Others.Random(30000, 60000));
                                        wManager.Wow.Memory.WowMemory.Memory.GetProcess().CloseMainWindow();
                                    });*/
                    //System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                }
                /*if (logx.Text.Contains("[ToTown] Sell items"))
                {
                    
                    Var.SetVar("TotownCount", Var.GetVar<int>("TotownCount") + 1);
                    logs("[CheckLogs] TotownCount " + Var.GetVar<int>("TotownCount"));
                    print("[CheckLogs] TotownCount " + Var.GetVar<int>("TotownCount"));
                    if(Var.GetVar<int>("TotownCount") > 25 && Bag.GetBagItem().Count(i => i.GetItemInfo.ItemSellPrice > 0 && !Setting.DoNotSellList.Contains(i.Name)) == 0)
                    {
                        logs("[CheckLogs] Забагался тутаун - не может продать ничего - фул сумка шмоток - офаем селлинг");
                        print("[CheckLogs] Забагался тутаун -не может продать ничего - фул сумка шмоток -офаем селлинг");
                        Setting.Selling = false;
                    }
                    //SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: Compilator Error, " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", профиль " + ProfileName() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + "");
                    //MaximizeWowWindow();
                    //robotManager.Helpful.Win32.Native.ShowWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle, 4); // развернуть окно робота
                    //robotManager.Helpful.Win32.Native.SetForegroundWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle); // сделать окно робота поверх
                }*/
                if (logx.Text.Contains("Compilator Error"))
                {
                    logs("[CheckLogs] Compi1ator Error");
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: Compilator Error, " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", профиль " + ProfileName() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + "");
                    if(logx.Text.Contains("метадан"))
                    {
                        logs("[CheckLogs] метаданная ошибка - кил процесса");
                        System.Diagnostics.Process.GetCurrentProcess().Kill();
                    }
                    //MaximizeWowWindow();
                    //robotManager.Helpful.Win32.Native.ShowWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle, 4); // развернуть окно робота
                    //robotManager.Helpful.Win32.Native.SetForegroundWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle); // сделать окно робота поверх
                }

                // [FSM] State bug - kill wrobot.exe //
                if (logx.Text.Contains("[FSM] State"))
                {
                    SendDiscordMessageBugs("[" + Time() + "] [" + MyRealName + "]: kill wrobot => FSM State bug, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[CheckLogs] kill wrobot if FSM State bug");
                    print("[CheckLogs] kill wrobot if FSM State bug");
                    sleep(10);
                    System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                }

                // застрявания //
                if (logx.Text.Contains("You try to use flying/swimming path but you cannot fly/swim here"))
                {
                    Var.SetVar("TryToUseFlySwimPathCount", Var.GetVar<int>("TryToUseFlySwimPathCount") + 1);
                    print("TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                    logs("TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                    if (me.Position.DistanceTo2D(CantReachStuckPosition) >= 15)
                        CantReachStuckPosition = me.Position;
                }

                if (logx.Text.Contains("[MovementManager] Trying something funny, hang on"))
                {
                    Var.SetVar("TryingSomethingFunnyCount", Var.GetVar<int>("TryingSomethingFunnyCount") + 1);
                    print("[CheckLogs] TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + "");
                    logs("[CheckLogs] TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + "");
                }

                if (logx.Text.Contains("[StuckResolver] Started"))
                {
                    Var.SetVar("StuckResolverCount", Var.GetVar<int>("StuckResolverCount") + 1);
                    print("[CheckLogs] StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + "");
                    logs("[CheckLogs] StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + "");

                    if (Var.GetVar<int>("StuckResolverCount") > 5 && me.HaveBuff("Ghost"))
                    {
                        logs("[CheckLogs] StuckResolverCount = " + Var.GetVar<int>("StuckResolverCount") + " => UseUnstuckAndSpiritHealer()");
                        print("[CheckLogs] StuckResolverCount = " + Var.GetVar<int>("StuckResolverCount") + " => UseUnstuckAndSpiritHealer()");
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: StuckResolverCount = " + Var.GetVar<int>("StuckResolverCount") + " и в призрике => UseUnstuckAndSpiritHealer()");
                        UseUnstuckAndSpiritHealerWhenDead();
                    }
                }

                if (logx.Text.Contains("[MovementManager] Trying something funny, hang on") || logx.Text.Contains("[StuckResolver] Started"))
                {

                    // аук огри //
                    if ((Mapzone() == "Orgrimmar" || Mapzone() == "Оргриммар") && me.Position.DistanceTo2D(new Vector3(1680.935, -4463.653, 19.04881)) < 20)
                    {
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: застрял на ауке огри => пауза и логует на 10 мин, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        if (me.GetMove)
                            MovementManager.StopMove();
                        sleep(1000);
                        //Screenshot("застрявание");
                        Var.SetVar("NeedForLogout", 1);
                        logs("[CheckLogs] застрял на ауке огри => пауза и логаут на 10 мин");
                        PauseAndLogout();
                        sleep(250000);
                        EnterWorldAndOffPause();
                        logs("[CheckLogs] застрял на ауке огри => оф паузы");
                        Statistics.Stucks = 0;
                    }

                    // шторм //
                    if ((Mapzone() == "Stormwind City" || Mapzone() == "Штормград") && me.Position.DistanceTo2D(new Vector3(-8811.842, 660.022, 96.42252)) < 20)
                    {
                        if (Var.GetVar<int>("TryingSomethingFunnyCount") > 3)
                        {
                            SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: застрял на ауке в шторме, TryingSomethingFunnyCount = " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", кил бота, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                            logs("[CheckLogs] застрял на ауке в шторме, TryingSomethingFunnyCount = " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", кил бота");
                            print("[CheckLogs] застрял на ауке в шторме, TryingSomethingFunnyCount = " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", кил бота");
                            sleep(1000);
                            //System.Diagnostics.Process.GetCurrentProcess().Kill();
                            System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                        }

                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: storwind auction stuck => logout 1 min, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        if (me.GetMove)
                            MovementManager.StopMove();
                        sleep(1000);

                        if (MeIsMountedOrHaveDruidForm())
                            Dismount();

                        if (GetPlayerThatTargetMe().IsValid)
                        {
                            sleep(rnd(1000, 6000));
                            PauseAndLogout();
                            logs("[CheckLogs] застрял на ауке в шторме => пауза и логаут на 1-3 мин");
                            PauseOn();
                            sleep(rnd(60000, 200000));
                            EnterWorldAndOffPause();
                            logs("[CheckLogs] застрял на ауке в шторме => оф паузы");
                        }
                        Statistics.Stucks = 0;
                        //Screenshot("застрявание");
                    }

                    // dismount when stuck in ghost mount //
                    if (me.HaveBuff("Ghost") && MeIsMountedOrHaveDruidForm())
                    {
                        Dismount();
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: дизмаунт на призрачном грифоне, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        ScreenAlertVisualSoft("дизмаунт на призрачном грифоне");
                        logs("[CheckLogs] дизмаунт на призрачном грифоне, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        logs("[CheckLogs] дизмаунт на призрачном грифоне, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                        //Screenshot();
                        ScreenAlertVisualSoft("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\nдизмаунт на призрачном грифоне");
                    }
                }
            };
        }
    }


    private void WowInterfaceSettings()
    {
        // wow interface settings //
        runlua(@"

		    --SetCVar('maxFPS','15')
		    --SetCVar('maxFPSBk','15')
            --TargetFrame:SetScale(1.75)
		    --PlayerFrame:SetScale(1.75)
		    --MailFrame:SetScale(1.15)
		    --MailFrame:SetAlpha(0.75)
		    --StaticPopup1:SetScale(1.5)
		    --StaticPopup2:SetScale(1.5)

		    SetCVar('cameraDistanceMaxFactor','2')
		    SetCVar('cameraSavedDistance','30.000000')
		    SetCVar('cameraSavedPitch','36.300000')
		    SetCVar('blockTrades','0') 
		    SetCVar('guildRecruitmentChannel','0')
		    SetCVar('scriptErrors','1')
		    SetCVar('autoLootDefault','1')
		    SetCVar('autoClearAFK','1')
		    SetCVar('alwaysShowActionBars','1')
		    SetCVar('showNewbieTips','0')
		    SetCVar('UnitNameOwn','0')
		    SetCVar('combatTextFloatMode','2')
		    SetCVar('guildRecruitmentChannel','0')
		    SetCVar('lockActionBars','0')
		    SetCVar('nameplateShowEnemies','1')
		    SetCVar('nameplateShowFriends','1')
		    SetCVar('screenEdgeFlash','0')
		    SetCVar('showTargetOfTarget','1')
		    SetCVar('gameTip','0')
		    SetCVar('showTutorials','0')
		    SetCVar('UberTooltips','0')
            SetCVar('screenshotQuality','1')
            SetCVar('guildMemberNotify','0')
            SetCVar('cameraSmoothTrackingStyle','2')
		    SetDungeonDifficulty(1) 
		    SetPVP(0)

		    if (GetLocale() == 'enGB' or GetLocale() == 'enUS') then LeaveChannelByName('LookingForGroup') LeaveChannelByName('General') LeaveChannelByName('Trade') LeaveChannelByName('GuildRecruitment') end
		    if GetLocale() == 'ruRU' then LeaveChannelByName('ПоискСпутников') LeaveChannelByName('Общий') LeaveChannelByName('Торговля') LeaveChannelByName('Гильдии') end	     

            -- показ/скрытие плаща/шлема
			if GetInventoryItemID('player', 1) ~= nil then _,_,_,helm = GetItemInfo(GetInventoryItemID('player', 1)) else helm = 0 end
			if helm >= 240 then DEFAULT_CHAT_FRAME:AddMessage('head: '..helm..', show it', 0, 1, 0.7) ShowHelm(1) end
			if helm < 240 then DEFAULT_CHAT_FRAME:AddMessage('head: '..helm..', random hide/show it', 0, 1, 0.7) if math.random(1,2) == 2 then ShowHelm(1) else ShowHelm(0) end end
			if math.random(1,2) == 2 then ShowCloak(1) DEFAULT_CHAT_FRAME:AddMessage('random hide cloak', 0, 1, 0.7) else ShowCloak(0) DEFAULT_CHAT_FRAME:AddMessage('random show cloak', 0, 1, 0.7) end

            ");
        
        // pet defensive mode if have pet //
        if (ObjectManager.Pet.IsAlive && ObjectManager.Pet.IsValid && !IsHonorFarmProfileName())
        {
            print("деф режим у пета вкл");
            logs("деф режим у пета вкл");
            runlua("PetDefensiveMode()");
        }

        logs("настройки интерфейса wow загружены");
        print("настройки интерфейса wow загружены");
    }

    private void GankCheckInGhostNOTTESTED()
    {

        if (GetGanked || KilledByPlayer)
        {
            while (me.HaveBuff("Ghost"))
            {
                if (Conditions.InGameAndConnected)
                {
                    if (DateTime.Now > TenSecGankCheckLogEntry)
                    {
                        TenSecGankCheckLogEntry = DateTime.Now.AddSeconds(10);
                        logs("усиленный чек ганка (2-4 раза в сек)");
                        print("усиленный чек ганка (2-4 раза в сек)");
                    }

                    // gank //
                    if (me.HaveBuff("Ghost"))
                    {
                        if (EnemyPlayer() != null && !MeIsInCityOrNearToCityOrSanctuary() && Subzone() != "Forlorn Woods" && Subzone() != "Опустевшие леса" && Subzone() != "The Twilight Rivulet" && Subzone() != "The Azure Front" && Subzone() != "Сумеречный ручей" && Subzone() != "Аметистовая застава" && Subzone() != "Лазурный берег" && Continent() != "DeathKnightStart")
                        {

                            GetGanked = true;

                            if (Var.GetVar<int>("GankCount") == 0)
                                GankWaitTime = rnd(300000, 600000);
                            if (EnemyPlayer().WowRace == WoWRace.NightElf || EnemyPlayer().WowClass == WoWClass.Rogue || EnemyPlayer().WowClass == WoWClass.Druid)
                                GankWaitTime = rnd(600000, 1200000);
                            if (Var.GetVar<int>("GankCount") == 1)
                                GankWaitTime = rnd(600000, 1200000);
                            if (Var.GetVar<int>("GankCount") >= 2)
                                GankWaitTime = rnd(1200000, 1800000);

                            Var.SetVar("GankCount", Var.GetVar<int>("GankCount") + 1);
                            logs("[GankCheckInGhost] счетчик ганка: " + Var.GetVar<int>("GankCount") + "");
                            print("[GankCheckInGhost] GankWaitTime: " + Var.GetVar<int>("GankCount") + "ms");
                        }

                        while (me.HaveBuff("Ghost") && Var.GetVar<int>("GankCount") > 0)
                        {
                            if (Conditions.InGameAndConnected)
                            {
                                logs("[GankCheckInGhost] GankWaitTime: " + GankWaitTime + "ms");
                                print("[GankCheckInGhost] GankWaitTime: " + GankWaitTime + "ms");
                                logs("[GankCheckInGhost] чекаем ганк, GetGanked = " + GetGanked + "");
                                print("[GankCheckInGhost] чекаем ганк, GetGanked = " + GetGanked + "");

                                if (EnemyPlayer() != null && Var.GetVar<int>("GankCount") == 1)
                                {
                                    SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: ганк " + Var.GetVar<int>("GankCount") + ": [" + EnemyPlayer().Name + "], гуид: " + EnemyPlayer().Guid + ", " + EnemyPlayer().Level + " лвл " + EnemyPlayer().WowRace + " " + EnemyPlayer().WowClass + ", дистанция: " + (int)EnemyPlayer().GetDistance + ", таргетит: " + EnemyPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)EnemyPlayer().Position.X + ", " + (int)EnemyPlayer().Position.Y + ", " + (int)EnemyPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + ", пауза: " + GankWaitTime + " ms");
                                    logs("[GankCheckInGhost] ганк: [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + " pause on " + GankWaitTime + " ms");
                                    print("[GankCheckInGhost] ганк: [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + " pause on " + GankWaitTime + " ms");
                                    ScreenAlertVisualMedium("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\ngank\\n" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                                    PauseOn();
                                    sleep(GankWaitTime);
                                }

                                if (EnemyPlayer() != null && Var.GetVar<int>("GankCount") >= 1)
                                {
                                    Var.SetVar("GankCount", Var.GetVar<int>("GankCount") + 1);
                                    if (Var.GetVar<int>("GankCount") >= 2)
                                        GankWaitTime = rnd(600000, 1000000);
                                    if (Var.GetVar<int>("GankCount") >= 3)
                                        GankWaitTime = rnd(1000000, 1500000);

                                    if (Var.GetVar<int>("KilledByEnemyPlayerCount") >= 3)
                                    {
                                        SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: убит больше 2 раз игроком (" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + ") в одной местности (" + Var.GetVar<int>("GankCount") + " раза): [" + EnemyPlayer().Name + "], гуид: " + EnemyPlayer().Guid + ", " + EnemyPlayer().Level + " лвл " + EnemyPlayer().WowRace + " " + EnemyPlayer().WowClass + ", дистанция: " + (int)EnemyPlayer().GetDistance + ", таргетит: " + EnemyPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)EnemyPlayer().Position.X + ", " + (int)EnemyPlayer().Position.Y + ", " + (int)EnemyPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + ", пауза: " + GankWaitTime + " ms");
                                        logs("[GankCheckInGhost] убит больше 2 раз игроком (" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + ") в одной местности (" + Var.GetVar<int>("GankCount") + " раза) => UseUnstuckAndSpiritHealer()");
                                        print("[GankCheckInGhost] убит больше 2 раз игроком (" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + ") в одной местности (" + Var.GetVar<int>("GankCount") + " раза) => UseUnstuckAndSpiritHealer()");
                                        Screenshot("убит больше 2 раз игроком " + EnemyPlayer().Name + " " + EnemyPlayer().Guid + " в одной местности");
                                        ScreenAlertVisualMedium("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\nубит больше 2 раз игроком в одной местности\\n" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                                        MaximizeWowWindow();
                                        UseUnstuckAndSpiritHealerWhenDead();
                                    }

                                    if (me.HaveBuff("Ghost"))
                                    {
                                        SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: логаут если ганк " + Var.GetVar<int>("GankCount") + " продолжился после паузы в несколько минут, снова пауза в меню " + GankWaitTime + " ms");
                                        logs("[GankCheckInGhost] логаут если ганк " + Var.GetVar<int>("GankCount") + " продолжился после паузы в несколько минут, снова пауза в меню " + GankWaitTime + " ms, имя и гуид ганкера: " + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                                        print("[GankCheckInGhost] логаут если ганк " + Var.GetVar<int>("GankCount") + " продолжился после паузы в несколько минут, снова пауза в меню " + GankWaitTime + " ms, имя и гуид ганкера: " + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                                        PauseAndLogout();
                                        sleep(GankWaitTime);
                                    }
                                }
                            }

                            if (!Conditions.InGameAndConnected && !Products.InPause)
                            {
                                SendDiscordMessageGank("[GankCheck] пауза затянулась но теперь офнута, но мы не в игре, цикл 5 сек слипа, ждем входа");
                                logs("[GankCheckInGhost] пауза затянулась но теперь офнута, но мы не в игре, цикл 5 сек слипа, ждем входа");
                                sleep(5000);
                            }

                            if (Conditions.InGameAndConnected && EnemyPlayer() == null)
                            {
                                Var.SetVar("GankCount", 0);
                                SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: ганкеров нет, выход из цикла, оф паузы");
                                logs("[GankCheckInGhost] ганкеров нет, выход из цикла, оф паузы");
                                print("[GankCheckInGhost] ганкеров нет, выход из цикла, оф паузы");
                                EnterWorldAndOffPause();
                            }

                            if (!Conditions.InGameAndConnected && Products.InPause)
                            {
                                SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: пауза затянулась и не офнута, мы не в игре, выход из цикла, оф паузы");
                                logs("[GankCheckInGhost] [цикл если не в игре] пауза затянулась и не офнута, мы не в игре, выход из цикла, оф паузы");
                                EnterWorldAndOffPause();
                            }

                            sleep(500);
                        }

                    }

                    sleep(rnd(250, 500));
                }

                if (!Conditions.InGameAndConnected)
                {
                    PauseOff();
                    logs("выход из цикла, запаузился в меню");
                    break;
                }
            }
        }
    }

    private void GankCheckInGhost()
    {

        // gank //
        if (me.HaveBuff("Ghost"))
        {
            if (EnemyPlayer() != null && !MeIsInCityOrNearToCityOrSanctuary() && Subzone() != "Forlorn Woods" && Subzone() != "Опустевшие леса" && Subzone() != "The Twilight Rivulet" && Subzone() != "The Azure Front" && Subzone() != "Сумеречный ручей" && Subzone() != "Аметистовая застава" && Subzone() != "Лазурный берег" && Continent() != "DeathKnightStart")
            {

                GetGanked = true;

                if (Var.GetVar<int>("GankCount") == 0)
                    GankWaitTime = rnd(300000, 600000);
                if (EnemyPlayer().WowRace == WoWRace.NightElf || EnemyPlayer().WowClass == WoWClass.Rogue || EnemyPlayer().WowClass == WoWClass.Druid)
                    GankWaitTime = rnd(600000, 1200000);
                if (Var.GetVar<int>("GankCount") == 1)
                    GankWaitTime = rnd(600000, 1200000);
                if (Var.GetVar<int>("GankCount") >= 2)
                    GankWaitTime = rnd(1200000, 1800000);

                Var.SetVar("GankCount", Var.GetVar<int>("GankCount") + 1);
                logs("[GankCheckInGhost] счетчик ганка: " + Var.GetVar<int>("GankCount") + ", время ожидания: " + GankWaitTime + " мс");
                print("[GankCheckInGhost] счетчик ганка: " + Var.GetVar<int>("GankCount") + ", время ожидания:" + GankWaitTime + " мс ");
            }

            while (me.HaveBuff("Ghost") && Var.GetVar<int>("GankCount") > 0)
            {
                if (Conditions.InGameAndConnected)
                {
                    logs("[GankCheckInGhost] GankWaitTime: " + GankWaitTime + "ms");
                    print("[GankCheckInGhost] GankWaitTime: " + GankWaitTime + "ms");
                    logs("[GankCheckInGhost] чекаем ганк, GetGanked = " + GetGanked + "");
                    print("[GankCheckInGhost] чекаем ганк, GetGanked = " + GetGanked + "");

                    if (EnemyPlayer() != null && Var.GetVar<int>("GankCount") == 1)
                    {
                        SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: ганк " + Var.GetVar<int>("GankCount") + ": [" + EnemyPlayer().Name + "], гуид: " + EnemyPlayer().Guid + ", " + EnemyPlayer().Level + " лвл " + EnemyPlayer().WowRace + " " + EnemyPlayer().WowClass + ", дистанция: " + (int)EnemyPlayer().GetDistance + ", таргетит: " + EnemyPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)EnemyPlayer().Position.X + ", " + (int)EnemyPlayer().Position.Y + ", " + (int)EnemyPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + ", пауза: " + GankWaitTime + " ms");
                        logs("[GankCheckInGhost] ганк: [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + " pause on " + GankWaitTime + " ms");
                        logs("[GankCheckInGhost] ганк: [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + " pause on " + GankWaitTime + " ms");
                        ScreenAlertVisualMedium("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\ngank\\n" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                        PauseOn();
                        sleep(GankWaitTime);
                    }

                    if (EnemyPlayer() != null && Var.GetVar<int>("GankCount") >= 1)
                    {
                        Var.SetVar("GankCount", Var.GetVar<int>("GankCount") + 1);
                        if (Var.GetVar<int>("GankCount") >= 2)
                            GankWaitTime = rnd(600000, 1000000);
                        if (Var.GetVar<int>("GankCount") >= 3)
                            GankWaitTime = rnd(1000000, 1500000);

                        if (Var.GetVar<int>("KilledByEnemyPlayerCount") >= 3)
                        {
                            SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: убит больше 2 раз игроком (" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + ") в одной местности (" + Var.GetVar<int>("GankCount") + " раза): [" + EnemyPlayer().Name + "], гуид: " + EnemyPlayer().Guid + ", " + EnemyPlayer().Level + " лвл " + EnemyPlayer().WowRace + " " + EnemyPlayer().WowClass + ", дистанция: " + (int)EnemyPlayer().GetDistance + ", таргетит: " + EnemyPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)EnemyPlayer().Position.X + ", " + (int)EnemyPlayer().Position.Y + ", " + (int)EnemyPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + ", пауза: " + GankWaitTime + " ms");
                            logs("[GankCheckInGhost] убит больше 2 раз игроком (" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + ") в одной местности (" + Var.GetVar<int>("GankCount") + " раза) => UseUnstuckAndSpiritHealer()");
                            print("[GankCheckInGhost] убит больше 2 раз игроком (" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + ") в одной местности (" + Var.GetVar<int>("GankCount") + " раза) => UseUnstuckAndSpiritHealer()");
                            Screenshot("убит больше 2 раз игроком " + EnemyPlayer().Name + " " + EnemyPlayer().Guid + " в одной местности");
                            ScreenAlertVisualMedium("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\nубит больше 2 раз игроком в одной местности\\n" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                            MaximizeWowWindow();
                            UseUnstuckAndSpiritHealerWhenDead();
                        }

                        if (me.HaveBuff("Ghost"))
                        {
                            SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: логаут если ганк " + Var.GetVar<int>("GankCount") + " продолжился после паузы в несколько минут, снова пауза в меню " + GankWaitTime + " ms");
                            logs("[GankCheckInGhost] логаут если ганк " + Var.GetVar<int>("GankCount") + " продолжился после паузы в несколько минут, снова пауза в меню " + GankWaitTime + " ms, имя и гуид ганкера: " + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                            print("[GankCheckInGhost] логаут если ганк " + Var.GetVar<int>("GankCount") + " продолжился после паузы в несколько минут, снова пауза в меню " + GankWaitTime + " ms, имя и гуид ганкера: " + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");
                            PauseAndLogout();
                            sleep(GankWaitTime);
                        }
                    }
                }

                if (!Conditions.InGameAndConnected && !Products.InPause)
                {
                    SendDiscordMessageGank("[GankCheck] пауза затянулась но теперь офнута, но мы не в игре, цикл 5 сек слипа, ждем входа");
                    logs("[GankCheckInGhost] пауза затянулась но теперь офнута, но мы не в игре, цикл 5 сек слипа, ждем входа");
                    sleep(5000);
                }

                if (Conditions.InGameAndConnected && EnemyPlayer() == null)
                {
                    Var.SetVar("GankCount", 0);
                    SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: ганкеров нет, выход из цикла, оф паузы");
                    logs("[GankCheckInGhost] ганкеров нет, выход из цикла, оф паузы");
                    print("[GankCheckInGhost] ганкеров нет, выход из цикла, оф паузы");
                    EnterWorldAndOffPause();
                }

                if (!Conditions.InGameAndConnected && Products.InPause)
                {
                    SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: пауза затянулась и не офнута, мы не в игре, выход из цикла, оф паузы");
                    logs("[GankCheckInGhost] [цикл если не в игре] пауза затянулась и не офнута, мы не в игре, выход из цикла, оф паузы");
                    EnterWorldAndOffPause();
                }

                sleep(500);
            }

        }
    }

    // check for enemy players when char is dead: pause when char killed by enemy player/detecting gank in ghost //
    private void KilledByPlayerOrNot()
    {

        if (me.FatigueActive && ObjectManager.Me.Position.DistanceTo2D(new Vector3(9457.091, 550.1663, 236.9634, "Flying")) > 300)
        {
            logs("[KilledByPlayerOrNot] погиб в море + fatigue => UseUnstuckAndSpiritHealer");
            print("[KilledByPlayerOrNot] погиб в море + fatigue => UseUnstuckAndSpiritHealer");
            SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: погиб в море + fatigue => UseUnstuckAndSpiritHealer(), место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
            Setting.UseSpiritHealer = true;
            ScreenAlertVisualMedium("" + MyMoney() + " " + MyFaction + " " + MyRealName + "\\nпогиб в море + усталость\\nUseSpiritHealer = true");
            FramesUpdatePulse = DateTime.Now.AddSeconds(30);
            MaximizeWowWindow();
            UseUnstuckAndSpiritHealerWhenDead();
        }

        // убит челиком //
        if (EnemyPlayer() != null && !MeIsInCityOrNearToCityOrSanctuary() && !Battleground.IsInBattleground() && Continent() != "DeathKnightStart")
        {
            EnemyHaveStealth = false;

            if (EnemyPlayer().WowRace == WoWRace.NightElf || EnemyPlayer().WowClass == WoWClass.Rogue || EnemyPlayer().WowClass == WoWClass.Druid)
            {
                logs("убит друидом/рогой/найтэльфом");
                print("убит друидом/рогой/найтэльфом");
                EnemyHaveStealth = true;
            }

            LastKilledByEnemyPlayerDeathPosition = me.Position;
            KilledByPlayer = true;
            Var.SetVar("KilledByEnemyPlayerCount", Var.GetVar<int>("KilledByEnemyPlayerCount") + 1);

            logs("[KilledByPlayerOrNot] KilledByEnemyPlayerCount: " + Var.GetVar<int>("KilledByEnemyPlayerCount") + "");
            print("[KilledByPlayerOrNot] KilledByEnemyPlayerCount: " + Var.GetVar<int>("KilledByEnemyPlayerCount") + "");

            if (Var.GetVar<int>("KilledByEnemyPlayerCount") == 1)
                GankWaitTime = rnd(10000, 30000);
            if (Var.GetVar<int>("KilledByEnemyPlayerCount") == 2)
                GankWaitTime = rnd(100000, 600000);

            if (Var.GetVar<int>("KilledByEnemyPlayerCount") >= 3)
            {
                Setting.UseSpiritHealer = true;
                logs("[KilledByPlayerOrNot] убит челиком больше 2 раз в одной местности (" + LastKilledByEnemyPlayerDeathPosition + "), включаем юз спирит хилера заранее");
                print("[KilledByPlayerOrNot] убит челиком больше 2 раз в одной местности (" + LastKilledByEnemyPlayerDeathPosition + "), включаем юз спирит хилера заранее");
                MaximizeWowWindow();
                GankWaitTime = rnd(500000, 1000000);
            }

            if (EnemyPlayer().WowRace == WoWRace.NightElf || EnemyPlayer().WowClass == WoWClass.Rogue || EnemyPlayer().WowClass == WoWClass.Druid)
                GankWaitTime = rnd(600000, 1200000);

            logs("[KilledByPlayerOrNot] KilledByPlayer = " + KilledByPlayer + ", GankWaitTime = " + GankWaitTime + "");
            print("[KilledByPlayerOrNot] KilledByPlayer = " + KilledByPlayer + ", GankWaitTime = " + GankWaitTime + "");

            // killed by enemy player //
            if (!me.HaveBuff("Ghost"))
            {
                string message = ObjectManager.Me.Name + " server: [" + Usefuls.RealmName + "] gank from " + EnemyPlayer().Name + " zone: [" + Usefuls.MapZoneName + "] subzone: [" + Usefuls.SubMapZoneName + "] position: [" + ObjectManager.Me.Position + "]";
                TGSMAlert(LetsGoldBotToken, GankInfoChannelID, message);
                SendDiscordMessageGank("[" + Time() + "] [" + MyRealName + "]: убит челиком [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + ", " + EnemyPlayer().Level + " лвл " + EnemyPlayer().WowRace + " " + EnemyPlayer().WowClass + ", дистанция: " + (int)EnemyPlayer().GetDistance + ", таргетит: " + EnemyPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)EnemyPlayer().Position.X + ", " + (int)EnemyPlayer().Position.Y + ", " + (int)EnemyPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + ", пауза: " + GankWaitTime + " ms");
                logs("[KilledByPlayerOrNot] убит челиком [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + ", пауза " + GankWaitTime + " ms");
                print("[KilledByPlayerOrNot] убит челиком [" + EnemyPlayer().Name + "], гуид " + EnemyPlayer().Guid + ", пауза " + GankWaitTime + " ms");
                ScreenAlertVisualMedium("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\nубит челиком\\n" + EnemyPlayer().Name + " " + EnemyPlayer().Guid + "");

                while (me.IsDead && !me.HaveBuff("Ghost")) // пока лежит дохлый и нет бафа призрака
                {
                    sleep(500);

                    if (Conditions.InGameAndConnected)
                    {
                        Var.SetVar("LieCount", Var.GetVar<int>("LieCount") + 1);
                        logs("[KilledByPlayerOrNot] лежим какое-то время если убит челиком " + Var.GetVar<int>("LieCount") + "");
                        print("[KilledByPlayerOrNot] лежим какое-то время если убит челиком " + Var.GetVar<int>("LieCount") + "");
                        if (rnd(1, 5) == 4 && !tar().IsValid)
                        {
                            me.Target = EnemyPlayerIn40Yards().Guid;
                            logs("[KilledByPlayerOrNot] 25% - шанс таргета того кто кильнул когда лежим");
                            print("[KilledByPlayerOrNot] 25% - шанс таргета того кто кильнул когда лежим");
                        }
                        if (rnd(1, 10) == 9)
                        {
                            logs("[KilledByPlayerOrNot] 10% шанс - всё харе лежать - форс покинуть тело");
                            print("[KilledByPlayerOrNot] 10% шанс - всё харе лежать - форс покинуть тело");
                            if (me.IsDead && !me.HaveBuff("Ghost"))
                                runlua("RepopMe()");
                            break;
                        }
                    }

                    if (!Conditions.InGameAndConnected)
                    {
                        PauseOff();
                        logs("[KilledByPlayerOrNot] выход из цикла, запаузился в меню");
                        break;
                    }
                }

                Var.SetVar("LieCount", 0);

                if (Var.GetVar<int>("KilledByEnemyPlayerCount") >= 3)
                {
                    logs("[KilledByPlayerOrNot] убит больше 2 раз челиком в одной местности (" + Var.GetVar<int>("KilledByEnemyPlayerCount") + " раза) => UseUnstuckAndSpiritHealer");
                    print("[KilledByPlayerOrNot] убит больше 2 раз челиком в одной местности (" + Var.GetVar<int>("KilledByEnemyPlayerCount") + " раза) => UseUnstuckAndSpiritHealer");
                    UseUnstuckAndSpiritHealerWhenDead();
                }

                RestoreDownWowWindow();

                if (me.HaveBuff("Ghost"))
                {
                    logs("[KilledByPlayerOrNot] pause on: тело покинуто, убит челиком, пауза " + GankWaitTime + " ms");
                    print("[KilledByPlayerOrNot] pause on: тело покинуто, убит челиком, пауза " + GankWaitTime + " ms");
                    PauseOn();
                    sleep(GankWaitTime);

                    if (EnemyPlayer() == null)
                    {
                        GetGanked = false;
                        logs("[KilledByPlayerOrNot] убит челиком, ганкеров нет, оф паузы");
                        print("[KilledByPlayerOrNot] убит челиком, ганкеров нет, оф паузы");
                        PauseOff();
                    }
                    if (EnemyPlayer() != null)
                    {
                        GetGanked = true;
                        logs("[KilledByPlayerOrNot] убит челиком, ганкеры детектед, переходим чекать ганк");
                        print("[KilledByPlayerOrNot] убит челиком, ганкеры детектед, переходим чекать ганк");
                        GankCheckInGhost();
                    }
                }
            }
        }

        // убит не челиком //
        if (EnemyPlayer() == null)
        {
            PreviousDeathPosition = LastDeathPosition;
            LastDeathPosition = me.Position;
            Var.SetVar("NotPVPKilledCount", Var.GetVar<int>("NotPVPKilledCount") + 1);

            if (Var.GetVar<int>("NotPVPKilledCount") == 1)
            {
                print("таймер в 10 минут для сброса позиции LastDeathPositionResetTimer и счетчика NotPVPKilledCount стартовал");
                logs("таймер в 10 минут для сброса позиции LastDeathPositionResetTimer и счетчика NotPVPKilledCount стартовал");
                LastDeathPositionResetTimer = DateTime.Now.AddMinutes(10);
            }

            if (LastDeathPosition.DistanceTo(PreviousDeathPosition) >= 100)
            {
                print("[KilledByPlayerOrNot] убит не челиком, место: " + LastDeathPosition + "");
                logs("[KilledByPlayerOrNot] убит не челиком, место: " + LastDeathPosition + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                ScreenAlertVisualMedium("" + MyMoney() + " " + MyFaction + "\\n" + MyRealName + "\\nубит не челиком");
                if (me.Level >= 80)
                    SendDiscordMessageDeathPlaces80("[" + Time() + "] [" + MyRealName + "]: убит не челиком, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                if (me.Level < 80)
                    SendDiscordMessageDeathPlacesLowLvl("[" + Time() + "] [" + MyRealName + ", " + me.Level + "]: убит не челиком, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                //Screenshot("убит не челиком");
            }

            if (Var.GetVar<int>("NotPVPKilledCount") < 5 && LastDeathPosition.DistanceTo(PreviousDeathPosition) < 100)
            {
                print("[KilledByPlayerOrNot] убит не челиком в одной местности " + Var.GetVar<int>("NotPVPKilledCount") + " раз, место: " + LastDeathPosition + "");
                logs("[KilledByPlayerOrNot] убит не челиком в одной местности " + Var.GetVar<int>("NotPVPKilledCount") + " раз, место: " + LastDeathPosition + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                ScreenAlertVisualMedium("" + MyMoney() + " " + MyFaction + "\\n" + MyRealName + "\\nубит не челиком " + Var.GetVar<int>("NotPVPKilledCount") + " раз\\nв одной местности");
                if (me.Level >= 80)
                    SendDiscordMessageDeathPlaces80("[" + Time() + "] [" + MyRealName + "]: убит не челиком в одной местности " + Var.GetVar<int>("NotPVPKilledCount") + " раз, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                if (me.Level < 80)
                    SendDiscordMessageDeathPlacesLowLvl("[" + Time() + "] [" + MyRealName + ", " + me.Level + "]: убит не челиком в одной местности " + Var.GetVar<int>("NotPVPKilledCount") + " раз, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                //Screenshot("убит не челиком в одной местности " + Var.GetVar<int>("NotPVPKilledCount") + " раз");
            }

            if (Var.GetVar<int>("NotPVPKilledCount") >= 5 && LastDeathPosition.DistanceTo(PreviousDeathPosition) < 100) // убит не челиком больше 5 раз в одной местности
            {
                Setting.UseSpiritHealer = true;
                logs("[KilledByPlayerOrNot] убит не челиком больше " + Var.GetVar<int>("NotPVPKilledCount") + " раз в одной местности, включаем юз спирит хилера, место: " + LastDeathPosition + ", " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: [" + ProfileName() + "], step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                print("[KilledByPlayerOrNot] убит не челиком больше " + Var.GetVar<int>("NotPVPKilledCount") + " раз в одной местности, включаем юз спирит хилера, место: " + LastDeathPosition + "");
                if (me.Level >= 80)
                    SendDiscordMessageDangerPlaces("[" + Time() + "] [" + MyRealName + "]: убит не челиком больше " + Var.GetVar<int>("NotPVPKilledCount") + " раз в одной местности, включаем юз спирит хилера, место: " + MyPosXYZ() + ", " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: [" + ProfileName() + "], step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                if (me.Level < 80)
                    SendDiscordMessageDangerPlaces("[" + Time() + "] [" + MyRealName + ", " + me.Level + "]: убит не челиком в одной местности " + Var.GetVar<int>("NotPVPKilledCount") + " раз, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + ", step: [" + Step() + "], step name: [" + StepName() + "], status: [" + Logging.Status + "]");
                ScreenAlertVisualMedium("" + MyMoney() + " " + MyFaction + " " + MyRealName + "\\nубит не челиком больше 5 раз\\nв одной местности");
                Screenshot("убит не челиком больше 5 раз (" + Var.GetVar<int>("NotPVPKilledCount") + ") в одной местности " + MyPosXYZ() + " " + Continent() + "");
                sleep(1000);
                MaximizeWowWindow();
                UseUnstuckAndSpiritHealerWhenDead();
            }
        }
    }
    public static string LetsGoldBotToken = "1649810276:AAHU_XXpEbpTKcUsrlwo7XHvzdH0ByfXveE";
    //public string GankAlertBotToken = "5332210965:AAEH_AsW9zoW5Rqy5EKZIxcsO98k2VkzP0Q";
    public string GankInfoChannelID = "-1001645584259";
    private void TGSMAlert(string token, string destID, string text)
    {
        try
        {
            var URL = "https://api.telegram.org/bot" + token + "/sendMessage?chat_id=" + destID + "&text=" + text + "";
            //https://api.telegram.org/bot1818250514:AAFraJjCaC9f0FRFpruTygg6YMO_0omj8-8/sendMessage?chat_id=-1001390449192&text=fdfdfd
            var webReq = System.Net.WebRequest.Create(URL) as System.Net.HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new System.IO.StreamWriter(webReq.GetRequestStream()))
            {
                streamWriter.Write("");
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (System.Net.HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new System.IO.StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
            //_OrderAlertTimer = new robotManager.Helpful.Timer(60 * 10000); //10 min cd

        }
        catch (Exception) { }
    }
    private void InitializeRealmFactionClass()
    {
        // realm short name //
        if (Usefuls.RealmName == "WoW Circle 3.3.5a x5")
            RealmShortName = "Circle LK x5";
        else if (Usefuls.RealmName == "WoW Circle 3.3.5a x100")
            RealmShortName = "Circle LK x100";
        else if (Usefuls.RealmName == "WoW Circle 3.3.5a x1")
            RealmShortName = "Circle LK x1";
        else if (Usefuls.RealmName.Contains("Virgin"))
            RealmShortName = "Virgin";
        else if (Usefuls.RealmName == "WoW Circle 4.3.4 x5")
            RealmShortName = "Circle x5 Cata";
        else
            RealmShortName = Usefuls.RealmName;

        logs("[InitializeRealmFactionClass] RealmShortName = " + RealmShortName + "");
        print("[InitializeRealmFactionClass] RealmShortName = " + RealmShortName + "");

        classcolor = "|cffFFFFFF";
        factioncolor = "|cffFFFFFF";

        // my class colors //
        if (me.WowClass == WoWClass.DeathKnight)
        {
            ImDK = true;
            classcolor = "|cffC41F3B";
        }
        if (me.WowClass == WoWClass.Druid)
        {
            ImDruid = true;
            classcolor = "|cffFF7D0A";
        }
        if (me.WowClass == WoWClass.Hunter)
        {
            ImHunter = true;
            classcolor = "|cffA9D271";
        }
        if (me.WowClass == WoWClass.Mage)
        {
            ImMage = true;
            classcolor = "|cff40C7EB";
        }
        if (me.WowClass == WoWClass.Paladin)
        {
            ImPal = true;
            classcolor = "|cffF58CBA";
        }
        if (me.WowClass == WoWClass.Priest)
        {
            ImPriest = true;
            classcolor = "|cffFFFFFF";
        }
        if (me.WowClass == WoWClass.Rogue)
        {
            ImRogue = true;
            classcolor = "|cffFFF569";
        }
        if (me.WowClass == WoWClass.Shaman)
        {
            ImShaman = true;
            classcolor = "|cff0070DE";
        }
        if (me.WowClass == WoWClass.Warlock)
        {
            ImWarlock = true;
            classcolor = "|cff8787ED";
        }
        if (me.WowClass == WoWClass.Warrior)
        {
            ImWarr = true;
            classcolor = "|cffC79C6E";
        }

        // my faction colors //
        if (me.IsHorde)
        {
            MyFaction = "H";
            factioncolor = "|cffDD1616";
        }
        else if (me.IsAlliance)
        {
            MyFaction = "A";
            factioncolor = "|cff00FFFF";
        }
        else if (me.IsNeutral)
        {
            MyFaction = "N";
            factioncolor = "|cffFFFFFF";
        }

        logs("[InitializeRealmFactionClass] MyFaction = " + MyFaction + "");
        print("[InitializeRealmFactionClass] MyFaction = " + MyFaction + "");

        MeIsMeleeClass = (ImDK || ImWarr || ImPal || ImRogue || (ImDruid && SpellManager.KnowSpell("Berserk")) || (ImShaman && SpellManager.KnowSpell("Feral Spirit")));
        MeIsRangeClass = (ImPriest || ImWarlock || ImMage || ImHunter || (ImDruid && SpellManager.KnowSpell("Starfall")) || (ImShaman && SpellManager.KnowSpell("Thunderstorm")));
        MeIsHealClassOrMage = (ImPriest || ImMage || ImDruid || ImShaman || ImPal);

        print("[InitializeRealmFactionClass] MeIsRangeClass = " + MeIsRangeClass + "");
        print("[InitializeRealmFactionClass] MeIsMeleeClass = " + MeIsMeleeClass + "");
        logs("[InitializeRealmFactionClass] MeIsRangeClass = " + MeIsRangeClass + "");
        logs("[InitializeRealmFactionClass] MeIsMeleeClass = " + MeIsMeleeClass + "");
        logs("[InitializeRealmFactionClass] MeIsHealClassOrMage = " + MeIsHealClassOrMage + "");
        print("[InitializeRealmFactionClass] MeIsHealClassOrMage = " + MeIsHealClassOrMage + "");
    }

    private void LoadFightClass()
    {
        // fightclasses //
        if (ImPal)
        {
            print("[LoadFightClass] наш класс: пал");
            logs("[LoadFightClass] наш класс: пал");

            if (SpellManager.KnowSpell(53385))
            {
                print("[LoadFightClass] наш спек: ретрик");
                logs("[LoadFightClass] наш спек: ретрик");

            }
            if (!SpellManager.KnowSpell(53385) && !SpellManager.KnowSpell(53595))
            {
                print("[LoadFightClass] наш спек: не ретрик и не прот");
                logs("[LoadFightClass] наш спек: не ретрик и не прот");
            }
            if (SpellManager.KnowSpell(53595))
            {
                print("[LoadFightClass] наш спек: прот");
                logs("[LoadFightClass] наш спек: прот");
            }

            if (!SpellManager.KnowSpell(53595))
            {
                if (Usefuls.WowVersion == 12340)
                {
                    if(ProfileName().Contains("Ankahet.xml") || ProfileName().Contains("Gundrak.xml") || ProfileName().Contains("Utgarde_keep.xml") || ProfileName().Contains("Draktharon"))
                    {
                        Setting.CustomClass = "ret_pal_SOL.cs";
                    }
                        else
                    Setting.CustomClass = "ret_pal.cs";
                }
                if (Usefuls.WowVersion == 15595)
                    Setting.CustomClass = "ret_pal_cata.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [ret_pal.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [ret_pal.cs] (" + Setting.CustomClass + ")");
            }

            if (SpellManager.KnowSpell(53595))
            {
                Setting.CustomClass = "pal_def.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [pal_def.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [pal_def.cs] (" + Setting.CustomClass + ")");
            }

            /*
            if (me.Level < 80)
            {
                if ((RealmShortName.Contains("Circle") || RealmShortName.Contains("Icecrown") || RealmShortName.Contains("Single")))
                {
                    Setting.CustomClass = "pal_default.cs";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [pal_default.cs] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [pal_default.cs] (" + Setting.CustomClass + ")");
                }
            }
            */
        }

        if (ImDK)
        {

            print("[LoadFightClass] наш класс: дк");
            logs("[LoadFightClass] наш класс: дк");

            if (SpellManager.KnowSpell("Heart Strike"))
            {
                print("[LoadFightClass] наш спек: блад");
                logs("[LoadFightClass] наш спек: блад");
            }
            if (SpellManager.KnowSpell("Scourge Strike"))
            {
                print("наш спек: анхоли");
                logs("наш спек: анхоли");
            }
            if (SpellManager.KnowSpell("Frost Strike"))
            {
                print("[LoadFightClass] наш спек: фрост");
                logs("[LoadFightClass] наш спек: фрост");
            }

            if (!SpellManager.KnowSpell("Heart Strike") && !SpellManager.KnowSpell("Scourge Strike") && !SpellManager.KnowSpell("Frost Strike"))
            {
                if (Usefuls.WowVersion == 12340)
                    Setting.CustomClass = "gibrid_dk.cs";
                if (Usefuls.WowVersion == 15595)
                    Setting.CustomClass = "udk_cata.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [gibrid_dk.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [gibrid_dk.cs] (" + Setting.CustomClass + ")");
            }

            if (SpellManager.KnowSpell("Heart Strike"))
            {
                Setting.CustomClass = "blood_dk.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [blood_dk.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [blood_dk.cs] (" + Setting.CustomClass + ")");
            }

            if (SpellManager.KnowSpell("Scourge Strike"))
            {
                if (Usefuls.WowVersion == 12340)
                    Setting.CustomClass = "gibrid_dk.cs";
                if (Usefuls.WowVersion == 15595)
                    Setting.CustomClass = "udk_cata.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [gibrid_dk.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [gibrid_dk.cs] (" + Setting.CustomClass + ")");
            }

            if (SpellManager.KnowSpell("Frost Strike"))
            {
                Setting.CustomClass = "frost_dk.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [frost_dk.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [frost_dk.cs] (" + Setting.CustomClass + ")");
            }
        }

        if (ImPriest)
        {

            print("[LoadFightClass] наш класс: прист");
            logs("[LoadFightClass] наш класс: прист");

            if (me.Level >= 80)
            {
                Setting.CustomClass = "shadow_priest.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [shadow_priest.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [shadow_priest.cs] (" + Setting.CustomClass + ")");
            }

            if (me.Level < 80)
            {
                Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }

        if (ImWarr)
        {

            print("[LoadFightClass] наш класс: вар");
            logs("[LoadFightClass] наш класс: вар");

            if (SpellManager.KnowSpell(23881))
            {
                print("[LoadFightClass] наш спек: фури");
                logs("[LoadFightClass] наш спек: фури");
            }

            if (SpellManager.KnowSpell(46968))
            {
                print("[LoadFightClass] наш спек: прот");
                logs("[LoadFightClass] наш спек: прот");
            }

            if (SpellManager.KnowSpell(46924))
            {
                print("[LoadFightClass] наш спек: армс");
                logs("[LoadFightClass] наш спек: армс");
            }

            if (me.Level >= 80)
            {
                if (SpellManager.KnowSpell(23881))
                {
                    if (Usefuls.WowVersion == 12340)
                        Setting.CustomClass = "FuriWar.cs";
                    if (Usefuls.WowVersion == 15595)
                        Setting.CustomClass = "FuriWar_CATA.cs";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [FuriWar.cs] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [FuriWar.cs] (" + Setting.CustomClass + ")");
                }

                if (SpellManager.KnowSpell(46968))
                {
                    Setting.CustomClass = "ProtWar.cs";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [ProtWar.cs] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [ProtWar.cs] (" + Setting.CustomClass + ")");
                }

                if (SpellManager.KnowSpell(46924))
                {
                    Setting.CustomClass = "arms_warrior.cs";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("фк заменен на [arms_warrior.cs] (" + Setting.CustomClass + ")");
                    print("фк заменен на [arms_warrior.cs] (" + Setting.CustomClass + ")");
                }
            }

            if (me.Level < 80)
            {
                if (Setting.CustomClass != "AIO.dll")
                {
                    Setting.CustomClass = "AIO.dll";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                }
            }
        }

        if (ImMage)
        {

            print("[LoadFightClass] наш класс: маг");
            logs("[LoadFightClass] наш класс: маг");

            if (me.Level >= 80)
            {
                Setting.CustomClass = "FireMage.cs";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [FireMage.cs] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [FireMage.cs] (" + Setting.CustomClass + ")");
            }

            if (me.Level < 80)
            {
                Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }

        if (ImWarlock)
        {

            print("[LoadFightClass] наш класс: варлок");
            logs("[LoadFightClass] наш класс: варлок");

            if (me.Level >= 80)
            {
                if (Usefuls.WowVersion == 12340)
                    Setting.CustomClass = "WarlockAflik.dll";
                if (Usefuls.WowVersion == 15595)
                    Setting.CustomClass = "Aflik_cata.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [WarlockAflik.dll] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [WarlockAflik.dll] (" + Setting.CustomClass + ")");
            }

            if (me.Level < 80)
            {

                Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }

        if (ImHunter)
        {

            print("[LoadFightClass] наш класс: хант");
            logs("[LoadFightClass] наш класс: хант");

            if (me.Level >= 80)
            {
                Setting.CustomClass = "FkHuntBm.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [FkHuntBm.dll] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [FkHuntBm.dll] (" + Setting.CustomClass + ")");
            }

            if (me.Level < 80)
            {
                Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }
        if (ImRogue)
        {

            print("[LoadFightClass] наш класс: разбойник");
            logs("[LoadFightClass] наш класс: разбойник");

            /*if (SpellManager.KnowSpell("Thunderstorm"))
            {
                print("[LoadFightClass] наш спек: элем");
                logs("[LoadFightClass] наш спек: элем");
            }

            if (SpellManager.KnowSpell("Feral Spirit"))
            {
                print("наш спек: энх");
                logs("наш спек: энх");
            }
*/
            if (me.Level >= 80)
            {
                Setting.CustomClass = "Rogue_SubAssa_Leveling_ScripterQQ.xml";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [Rogue_SubAssa_Leveling_ScripterQQ.xml] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [Rogue_SubAssa_Leveling_ScripterQQ.xml] (" + Setting.CustomClass + ")");
            }

            if (me.Level < 80)
            {
                if (CustomClass.IsAliveCustomClass)
                    Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }
        if (ImShaman)
        {

            print("[LoadFightClass] наш класс: шаман");
            logs("[LoadFightClass] наш класс: шаман");

            if (SpellManager.KnowSpell("Thunderstorm"))
            {
                print("[LoadFightClass] наш спек: элем");
                logs("[LoadFightClass] наш спек: элем");
            }

            if (SpellManager.KnowSpell("Feral Spirit"))
            {
                print("наш спек: энх");
                logs("наш спек: энх");
            }

            if (me.Level >= 80)
            {
                if (SpellManager.KnowSpell(51490))
                {
                    if (Usefuls.WowVersion == 15545)
                        Setting.CustomClass = "ShamElemCata.dll";
                    if (Usefuls.WowVersion == 12340)
                        Setting.CustomClass = "ShamElem.dll";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [ShamElem.dll] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [ShamElem.dll] (" + Setting.CustomClass + ")");
                }

                if (SpellManager.KnowSpell(17364))
                {
                    Setting.CustomClass = "Ench.dll";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [Ench.dll] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [Ench.dll] (" + Setting.CustomClass + ")");
                }
            }

            if (me.Level < 80)
            {
                if (CustomClass.IsAliveCustomClass)
                    Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }

        if (ImDruid)
        {

            print("[LoadFightClass] наш класс: друид");
            logs("[LoadFightClass] наш класс: друид");

            if (SpellManager.KnowSpell("Starfall"))
            {
                print("[LoadFightClass] наш спек - сова");
                logs("[LoadFightClass] наш спек - сова");
            }

            if (SpellManager.KnowSpell("Berserk"))
            {
                print("[LoadFightClass]наш спек - ферал");
                logs("[LoadFightClass] наш спек - ферал");
            }

            if (me.Level >= 80)
            {
                if (SpellManager.KnowSpell("Berserk"))
                {
                    Setting.CustomClass = "FkFeral.dll";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("фк заменен на [FkFeral.dll] (" + Setting.CustomClass + ")");
                    print("фк заменен на [FkFeral.dll] (" + Setting.CustomClass + ")");
                }

                if (SpellManager.KnowSpell("Starfall"))
                {
                    if (Usefuls.WowVersion == 15545)
                        Setting.CustomClass = "Sova_Cata.dll";
                    if (Usefuls.WowVersion == 12340)
                        Setting.CustomClass = "Sova.cs";
                    CustomClass.DisposeCustomClass();
                    //sleep(2000);
                    CustomClass.LoadCustomClass();
                    logs("[LoadFightClass] фк заменен на [Sova.cs] (" + Setting.CustomClass + ")");
                    print("[LoadFightClass] фк заменен на [Sova.cs] (" + Setting.CustomClass + ")");
                }
            }

            if (me.Level < 80)
            {
                Setting.CustomClass = "AIO.dll";
                CustomClass.DisposeCustomClass();
                //sleep(2000);
                CustomClass.LoadCustomClass();
                logs("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
                print("[LoadFightClass] фк заменен на [AIO.dll] (" + Setting.CustomClass + ")");
            }
        }

        logs("[LoadFightClass] наш фк: " + Setting.CustomClass + "");
        print("[LoadFightClass] наш фк: " + Setting.CustomClass + "");
    }

    private void Ubeganie()
    {
        float xvector = (ObjectManager.Me.Position.X) - (ObjectManager.Target.Position.X);
        float yvector = (ObjectManager.Me.Position.Y) - (ObjectManager.Target.Position.Y);
        float p = Others.Random(50, 100);
        float q = Others.Random(50, 100);

        Vector3 newpos = new Vector3()
        {
            X = ObjectManager.Me.Position.X + (float)((xvector * (p / ObjectManager.Target.GetDistance) - xvector)),
            Y = ObjectManager.Me.Position.Y + (float)((yvector * (q / ObjectManager.Target.GetDistance) - yvector)),
            Z = ObjectManager.Me.Position.Z
        };
        var path = PathFinder.FindPath(newpos);
        logs("[EvadeHaters]: даем дёру");
        MovementManager.Go(path);
        //Interact.ClearTarget();
        while (MovementManager.InMovement)
        {
            logs("[EvadeHaters]: MovementManager.InMovement убегаем пока висит сап");
            Thread.Sleep(1000);
            if (!ObjectManager.Me.InCombat)
            {
                Lua.LuaDoString("if " + Var.GetVar<string>("PauseButtonFrameName") + ":IsShown() then " + Var.GetVar<string>("PauseButtonFrameName") + ":SetChecked(true) end");
                Products.InPause = true;
                Fight.StopFight();
                logs("[EvadeHaters]: Ливнули бой");
                if (!ObjectManager.Me.IsFlying && ObjectManager.Me.IsOutdoors)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        MovementManager.StopMove();
                        int count = 0;
                        while (!ObjectManager.Me.IsMounted && count < 10)
                        {
                            count++;
                            Logging.Write("[EvadeHaters]: каст маунта трай №" + count + "");
                            if (!MeIsOnFlyMount())
                            {
                                logs("[RunFromTargetClickToMove] каст маунта (флаймаунт вкл: " + Setting.UseFlyingMount + ", название: " + Setting.FlyingMountName + ")");
                                print("[RunFromTargetClickToMove] каст маунта (флаймаунт вкл: " + Setting.UseFlyingMount + ", название: " + Setting.FlyingMountName + ")");
                                //SpellManager.CastSpellByNameLUA(wManager.wManagerSetting.CurrentSetting.FlyingMountName);
                                //wManager.Wow.Bot.Tasks.MountTask.MountingFlyingMount(true, true);
                                SpellManager.CastSpellByNameLUA(Setting.FlyingMountName);
                                sleep(rnd(1500, 2000) + latency);
                                if (ObjectManager.Me.IsCast)
                                    Usefuls.WaitIsCasting();
                                Thread.Sleep(50);
                            }
                            Thread.Sleep(200);
                        }
                        count = 0;
                    }
                    if (MeIsOnFlyMount())
                    {
                        var rnd = Others.Random(5000, 10000);
                        Move.JumpOrAscend(Move.MoveAction.PressKey, rnd);
                        //Thread.Sleep(rnd);
                        logs("[EvadeHaters]: пауза 20 сек");
                        Thread.Sleep(20000);
                        Products.InPause = false;
                        Lua.LuaDoString("if " + Var.GetVar<string>("PauseButtonFrameName") + ":IsShown() then " + Var.GetVar<string>("PauseButtonFrameName") + ":SetChecked(false) end");
                    }
                }
            }
            //return;
        }
        return;
    }

    private void ChatCheck()
    {
        var msgs = Chat.Messages;

        while (lastReadMessageId + 1 <= msgs.Count - 1)
        {

            lastReadMessageId++;

            // полученные пм //
            if (ChatChannelContains(WHISPER, msgs) && msgs[lastReadMessageId].UserName != MyRealName)
            {

                ScreenAlertVisualTextOnly("new PM\\n|cffe94196" + msgs[lastReadMessageId] + "");

                //if (EnemyPlayer() == null)
                //FramesUpdatePulse = DateTime.Now.AddSeconds(60);

                SendDiscordMessageWhisper("[" + RealmShortName + "] PM to [" + MyRealName + "]: " + msgs[lastReadMessageId] + "");
                logs("[" + RealmShortName + "] new PM: " + msgs[lastReadMessageId] + "");
                print("[" + RealmShortName + "] new PM: " + msgs[lastReadMessageId] + "");

                if (msgs[lastReadMessageId].ToString().Contains("SummonMe228"))
                {
                    runlua("InviteUnit('" + msgs[lastReadMessageId].UserName + "')");
                    sleep(5000);
                    for (int i = 0; i < 10; i++)
                    {
                        if (Party.GetPartyGUIDHomeAndInstance().Count < 3)
                        {
                            sleep(1000);
                            i++;
                        }
                        if (Lua.LuaDoString<bool>("if UnitInParty('" + msgs[lastReadMessageId].UserName + "') then return true end"))
                        {
                            Chat.SendChatMessage("Привет дарагой, " + msgs[lastReadMessageId].UserName + "!", ChatTypeId.PARTY);
                            i = 10;
                        }
                    }
                }

                /*
                if (ProfileName().Contains("Saronit") || ProfileName().Contains("Cobalt"))
                {

                    if (msgs[lastReadMessageId].ToString().Contains("stopfarm228"))
                    {
                        if (ImPal)
                        {
                            if (Setting.CustomClass != "pal_stop_gather.cs")
                            {
                                logs("рассылка команды для смены фк на стоп фарма pal_stop_gather.cs запущена, прислал ее камрад [" + msgs[lastReadMessageId].UserName + "]");
                                print("рассылка команды для смены фк на стоп фарма pal_stop_gather.cs запущена, прислал ее камрад [" + msgs[lastReadMessageId].UserName + "]");
                                SendDiscordMessageDebug1("рассылка команды для смены фк на подруб фарма pal_stop_gather.cs запущена, прислал ее камрад [" + msgs[lastReadMessageId].UserName + "]");
                                Setting.CustomClass = "pal_stop_gather.cs";
                                CustomClass.DisposeCustomClass();
                                sleep(1000);
                                CustomClass.LoadCustomClass();
                                logs("фк загружен: [pal_stop_gather.cs] (" + Setting.CustomClass + ")");
                                print("фк загружен: [pal_stop_gather.cs] (" + Setting.CustomClass + ")");
                                //Chat.SendChatMessageWhisper("стопнул и приказал другим киборгам сделать то же самое, " + msgs[lastReadMessageId].UserName + ", проверяй, хорошего фарма, камрад!", msgs[lastReadMessageId].UserName);
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "чиловая");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "властелинкол");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "нечайник");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "компактная");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "Nimeka");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "гантон");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "болеутолин");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "офмеш");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "скофилд");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "rogim");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "противофаза");
                                sleep(500);
                                Chat.SendChatMessageWhisper("stopfarm228", "локмур");
                            }

                            if (Setting.CustomClass == "pal_stop_gather.cs")
                            {
                                logs("отсылка сообщения что уже НЕ фармит для камрада [" + msgs[lastReadMessageId].UserName + "]");
                                print("отсылка сообщения что уже НЕ фармит для камрада [" + msgs[lastReadMessageId].UserName + "]");
                                SendDiscordMessageDebug1("отсылка сообщения что уже НЕ фармит для камрада [" + msgs[lastReadMessageId].UserName + "]");
                                //Chat.SendChatMessageWhisper("камрад, " + msgs[lastReadMessageId].UserName + ", я по идее уже не фармлю, но это не точно и требует проверки!", msgs[lastReadMessageId].UserName);
                            }
                        }
                    }

                    if (msgs[lastReadMessageId].ToString().Contains("gofarm228"))
                    {
                        if (ImPal)
                        {
                            if (Setting.CustomClass != "ret_pal_gather.cs")
                            {
                                logs("рассылка команды для смены фк на подруб фарма ret_pal_gather.cs запущена, прислал ее камрад [" + msgs[lastReadMessageId].UserName + "]");
                                print("рассылка команды для смены фк на подруб фарма ret_pal_gather.cs запущена, прислал ее камрад [" + msgs[lastReadMessageId].UserName + "]");
                                SendDiscordMessageDebug1("рассылка команды для смены фк на подруб фарма ret_pal_gather.cs запущена, прислал ее камрад [" + msgs[lastReadMessageId].UserName + "]");
                                Setting.CustomClass = "ret_pal_gather.cs";
                                CustomClass.DisposeCustomClass();
                                sleep(1000);
                                CustomClass.LoadCustomClass();
                                logs("фк загружен: [ret_pal_gather.cs] (" + Setting.CustomClass + ")");
                                print("фк загружен: [ret_pal_gather.cs] (" + Setting.CustomClass + ")");
                                //Chat.SendChatMessageWhisper("фарм возобновил камрад, " + msgs[lastReadMessageId].UserName + ", спасибо за подруб!", msgs[lastReadMessageId].UserName);
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "чиловая");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "властелинкол");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "нечайник");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "компактная");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "Nimeka");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "гантон");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "болеутолин");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "офмеш");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "скофилд");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "rogim");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "противофаза");
                                sleep(500);
                                Chat.SendChatMessageWhisper("gofarm228", "локмур");
                            }

                            if (Setting.CustomClass == "ret_pal_gather.cs")
                            {
                                logs("отсылка сообщения что уже фармит для камрада [" + msgs[lastReadMessageId].UserName + "]");
                                print("отсылка сообщения что уже фармит для камрада [" + msgs[lastReadMessageId].UserName + "]");
                                SendDiscordMessageDebug1("отсылка сообщения что уже фармит для камрада [" + msgs[lastReadMessageId].UserName + "]");
                                //Chat.SendChatMessageWhisper("камрад, " + msgs[lastReadMessageId].UserName + ", скорее всего я уже фармлю, если другие этого не делают можешь написать им, сяб!", msgs[lastReadMessageId].UserName);
                            }
                        }
                    }
                }
                */
            }

            // отправленные пм //
            if (ChatChannelContains(WHISPERSEND, msgs))
            {
                SendDiscordMessageWhisper("[" + RealmShortName + "] PM from [" + MyRealName + "] to [" + msgs[lastReadMessageId].UserName + "]: " + msgs[lastReadMessageId] + "");
                logs("[" + RealmShortName + "] PM from [" + MyRealName + "] to [" + msgs[lastReadMessageId].UserName + "]: " + msgs[lastReadMessageId] + "");
                //print("PM from [" + MyRealName + " (me)] to [" + msgs[lastReadMessageId].UserName + "]: " + msgs[lastReadMessageId] + "");
            }

            // say //
            if (ChatChannelContains(SAY, msgs))
            {

                SendDiscordMessageSAYAll("[" + RealmShortName + "] SAY near [" + MyRealName + "]: " + msgs[lastReadMessageId] + "");

                if ((msgs[lastReadMessageId].Msg.Contains("бот") ||
                    msgs[lastReadMessageId].Msg.Contains("БОТ") ||
                    msgs[lastReadMessageId].Msg.Contains("Бот") ||
                    msgs[lastReadMessageId].Msg.Contains("bot")) &&
                    !msgs[lastReadMessageId].Msg.Contains("абот") &&
                    !msgs[lastReadMessageId].Msg.Contains("боти") &&
                    !msgs[lastReadMessageId].Msg.Contains("обот") &&
                    !msgs[lastReadMessageId].Msg.Contains("убот") &&
                    !msgs[lastReadMessageId].Msg.Contains("Ботф") &&
                    !msgs[lastReadMessageId].Msg.Contains("ботф") &&
                    !msgs[lastReadMessageId].Msg.Contains("ботан") &&
                    !msgs[lastReadMessageId].Msg.Contains("ботл") &&
                    !msgs[lastReadMessageId].Msg.Contains("Ботл") &&
                    !msgs[lastReadMessageId].Msg.Contains("уббот"))
                {
                    ScreenAlertVisualSoft("упоминание *ота\\n|cffffffff" + msgs[lastReadMessageId] + "");
                    logs("[" + RealmShortName + "] упоминание *ота: " + msgs[lastReadMessageId] + "");
                    print("[" + RealmShortName + "] упоминание *ота: " + msgs[lastReadMessageId] + "");
                    SendDiscordMessageWhoSayBot("[" + RealmShortName + "] упоминание *ота около [" + MyRealName + "]: " + msgs[lastReadMessageId] + ",: зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)me.Position.X + ", " + (int)me.Position.Y + ", " + (int)me.Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                }

                if (msgs[lastReadMessageId].UserName != MyRealName)
                {
                    logs("[" + RealmShortName + "] new SAY message: " + msgs[lastReadMessageId] + "");
                    //print("new SAY message: " + msgs[lastReadMessageId] + "");
                    if (!MeIsInCityOrNearToCityOrSanctuary() && !Battleground.IsInBattleground())
                    {
                        SendDiscordMessageSAYImportant("[" + RealmShortName + "] SAY near [" + MyRealName + "]: " + msgs[lastReadMessageId] + "");
                        ScreenAlertVisualTextOnly("new SAY\\n|cffffffff" + msgs[lastReadMessageId] + "");
                    }
                }

                if (msgs[lastReadMessageId].UserName == MyRealName)
                {
                    logs("[" + RealmShortName + "] my SAY message: " + msgs[lastReadMessageId] + "");
                    //print("My SAY message: " + msgs[lastReadMessageId] + "");
                    if (!MeIsInCityOrNearToCityOrSanctuary() && !Battleground.IsInBattleground())
                    {
                        SendDiscordMessageMySAYImportant("[" + RealmShortName + "] [" + MyRealName + "]: " + msgs[lastReadMessageId] + "");
                        ScreenAlertVisualTextOnly("new SAY\\n|cffffffff" + msgs[lastReadMessageId] + "");
                    }
                }
            }
            sleep(1000);
        }
    }

    private bool ChatChannelContains(List<ChatTypeId> ChatIDs, List<Channel.Message> msgs)
    {
        return ChatIDs.Contains(msgs[lastReadMessageId].Channel);
    }

    // луа эвенты //
    private void LuaEvents(LuaEventsId id, List<string> args)
    {

        if (!Products.InPause)
        {
            // grey node blacklist
            if (id == LuaEventsId.CHAT_MSG_SKILL)
            {
                SetHerbalismSkill();
                SetMiningSkill();
            }

            if (id == LuaEventsId.CORPSE_IN_RANGE)
            {
                print("LUA EVENT: RESURRECT_REQUEST, стопмув");
                logs("LUA EVENT: RESURRECT_REQUEST, стопмув");
                MovementManager.StopMove();
            }

            if (id == LuaEventsId.UI_ERROR_MESSAGE)
            {
                if (args[0] == "Target not in line of sight")
                {
                    print("Target not in line of sight");
                    logs("Target not in line of sight");
                    Var.SetVar("Targetnotinlineofsight", Var.GetVar<int>("Targetnotinlineofsight") + 1);
                }
            }

            /*
            if (id == LuaEventsId.COMBAT_LOG_EVENT_UNFILTERED)
            {
                if (args[1] == "PARTY_KILL")
                {
                    print("LUA EVENT: PARTY_KILL, arg0 [" + args[0] + "] arg1 [" + args[1] + "] arg2 [" + args[2] + "] arg3 [" + args[3] + "] arg4 [" + args[4] + "] arg5 [" + args[5] + "] arg6 [" + args[6] + "] arg7 [" + args[7] + "]");
                    logs("LUA EVENT: PARTY_KILL, arg0 [" + args[0] + "] arg1 [" + args[1] + "] arg2 [" + args[2] + "] arg3 [" + args[3] + "] arg4 [" + args[4] + "] arg5 [" + args[5] + "] arg6 [" + args[6] + "] arg7 [" + args[7] + "]");
                }
            }
            */

            // дохлый в море + fatigue //
            if (id == LuaEventsId.MIRROR_TIMER_START && me.IsDead && me.FatigueActive)
            {
                print("LUA EVENT: MIRROR_TIMER_START, погиб в море + усталость => UseUnstuckAndSpiritHealer()");
                logs("LUA EVENT: MIRROR_TIMER_START, погиб в море + усталость => UseUnstuckAndSpiritHealer()");
                Dismount();
                Setting.UseSpiritHealer = true;
                ScreenAlertVisualMedium("" + MyMoney() + " " + MyFaction + "\\n" + MyRealName + "\\nпогиб в море + усталость\\nUseSpiritHealer = true");
                FramesUpdatePulse = DateTime.Now.AddSeconds(30);
                MaximizeWowWindow();
                UseUnstuckAndSpiritHealerWhenDead();
            }
            //выпилил - есть в реквестхандлере
            /*            if (id == LuaEventsId.START_LOOT_ROLL)
                        {
                            print("LUA EVENT: START_LOOT_ROLL");
                            logs("LUA EVENT: START_LOOT_ROLL");
                            sleep(rnd(1000, 10000));
                            logs("ролим шмотку");
                            print("ролим шмотку");
                            runlua("for i=1,4 do if _G['GroupLootFrame'..i]:IsShown() then _G['GroupLootFrame'..i..'RollButton']:Click() end end");
                        }*/

            // в момент когда чар был убит //
            if (id == LuaEventsId.PLAYER_DEAD)
            {
                print("LUA EVENT: PLAYER_DEAD => KilledByPlayerOrNot()");
                logs("LUA EVENT: PLAYER_DEAD => KilledByPlayerOrNot()");
                FramesUpdatePulse = DateTime.Now.AddSeconds(2);
                KilledByPlayerOrNot();
            }

            // когда чар покинул тело и баф призрака на нем //
            if (id == LuaEventsId.PLAYER_ALIVE && me.HaveBuff("Ghost"))
            {
                RestoreDownWowWindowPreTimer = DateTime.Now.AddSeconds(10);
                //RestoreDownWowWindow(); // свернуть вов когда чар покинул тело
            }

            ////выпилил - есть в реквестхандлере
            /*   if (id == LuaEventsId.PARTY_INVITE_REQUEST)
               {
                   ScreenAlertVisualMedium("пати реквест\\n[" + args[0] + "], гуид [" + args[6] + "]");
                   MaximizeWowWindow();
                   if (NearestPlayer().IsValid && !NearestPlayer().IsAttackable)
                   {
                       SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: пати реквест от [" + args[0] + "], гуид [" + args[6] + "], рядом игрок [" + NearestPlayer().Name + "], гуид " + NearestPlayer().Guid + ", " + NearestPlayer().Level + " лвл " + NearestPlayer().WowRace + " " + NearestPlayer().WowClass + ", дистанция: " + (int)NearestPlayer().GetDistance + ", таргетит: " + NearestPlayer().IsTargetingMe + ", враг: " + NearestPlayer().IsAttackable + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)NearestPlayer().Position.X + ", " + (int)NearestPlayer().Position.Y + ", " + (int)NearestPlayer().Position.Z + ", реалм: " + RealmShortName + "");
                   }

                   if (!NearestPlayer().IsValid || (NearestPlayer().IsValid && NearestPlayer().IsAttackable))
                   {
                       SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: пати реквест от [" + args[0] + "], рядом игроков не найдено, реалм: " + RealmShortName + "");
                   }
               }*/

            if (id == LuaEventsId.GUILD_INVITE_REQUEST)
            {
                ScreenAlertVisualMedium("инвайт в гишку\\n[" + args[1] + "]");
                SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: инвайт в гишку [" + args[1] + "] от [" + args[0] + "], реалм: " + RealmShortName + "");
            }

            if (id == LuaEventsId.DUEL_REQUESTED)
            {
                Screenshot("дуэль реквест");
                sleep(1000);
                MaximizeWowWindow();
                ScreenAlertVisualMedium("дуэль реквест\\n[" + args[0] + "]");
                SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: вызов на дуэль от [" + args[0] + "], реалм: " + RealmShortName + "");
            }


            /*
            if (id == LuaEventsId.CHAT_MSG_LOOT)
            {

                if (args[0].Contains("Singing Crystal Axe"))
                {
                    SendDiscordMessageLoot("[" + Time() + "] [" + MyRealName + "]: +1 [Singing Crystal Axe]");
                    logs("[" + Time() + "] [" + MyRealName + "]: +1 [Singing Crystal Axe]");
                }

                if (args[0].Contains("Blinkstrike"))
                {
                    SendDiscordMessageLoot("[" + Time() + "] [" + MyRealName + "]: +1 [Blinkstrike]");
                    logs("[" + Time() + "] [" + MyRealName + "]: +1 [Blinkstrike]");
                }

                if (args[0].Contains("Blade of Wizardry"))
                {
                    SendDiscordMessageLoot("[" + Time() + "] [" + MyRealName + "]: +1 [Blade of Wizardry]");
                    logs("[" + Time() + "] [" + MyRealName + "]: +1 [Blade of Wizardry]");
                }

                if (args[0].Contains("The Night Blade"))
                {
                    SendDiscordMessageLoot("[" + Time() + "] [" + MyRealName + "]: +1 [The Night Blade]");
                    logs("[" + Time() + "] [" + MyRealName + "]: +1 [The Night Blade]");
                }

                if (args[0].Contains("Saronite Ore"))
                {
                    SendDiscordMessageLootSaroniteTitanLichbloom("[" + Time() + "] [" + MyRealName + "]: + [Saronite Ore]");
                    logs("[" + Time() + "] [" + MyRealName + "]: + [Saronite Ore]");
                }

                if (args[0].Contains("Lichbloom"))
                {
                    SendDiscordMessageLootSaroniteTitanLichbloom("[" + Time() + "] [" + MyRealName + "]: + [Lichbloom]");
                    logs("[" + Time() + "] [" + MyRealName + "]: + [Lichbloom]");
                }

                if (args[0].Contains("Titanium Ore"))
                {
                    SendDiscordMessageLootSaroniteTitanLichbloom("[" + Time() + "] [" + MyRealName + "]: + [Titanium Ore]");
                    logs("[" + Time() + "] [" + MyRealName + "]: + [Titanium Ore]");
                }

                if (args[0].Contains("Cobalt Ore"))
                {
                    SendDiscordMessageLootCobalt("[" + Time() + "] [" + MyRealName + "]: + [Cobalt Ore]");
                    logs("[" + Time() + "] [" + MyRealName + "]: + [Cobalt Ore]");
                }
            }
            */

            /*
            if (id == LuaEventsId.CHAT_MSG_ADDON)
            {

                print("0: " + args[0] + " 1: " + args[1] + " 2: " + args[2] + " 3: " + args[3] + "");
                logs("0: " + args[0] + " 1: " + args[1] + " 2: " + args[2] + " 3: " + args[3] + "");

                if (args[0].Contains("up123") && args[1].Contains("pause123") && args[2].Contains("WHISPER"))
                {
                    if (!Products.InPause)
                    {
                        print("pause chat check => pause on");
                        logs("pause chat check => pause on");
                        PauseOn();
                    }
                    else
                    {
                        print("pause chat check => pause off");
                        logs("pause chat check => pause off");
                        PauseOff();
                    }
                }
            }
            */

            /*
            if (id == LuaEventsId.CHAT_MSG_COMBAT_HONOR_GAIN)
            {
                SendDiscordMessageHonorableKills("[" + Time() + "] [" + MyRealName + "]: сломали кабину челику [" + args[4] + "]");
                logs("[" + Time() + "] [" + MyRealName + "]: сломали кабину челику [" + args[4] + "]");
            }
            */

            if (id == LuaEventsId.CHAT_MSG_SYSTEM)
            {

                if (args[0].Contains("honorable kill") || args[0].Contains("have been awarded") || args[0].Contains("Honor Points"))
                {
                    SendDiscordMessageHonorableKills("[" + Time() + "] [" + MyRealName + "]: " + args[0] + "");
                    logs("[" + Time() + "] [" + MyRealName + "] " + args[0] + "");
                }

                if (args[0].Contains("buyer"))
                {
                    SendDiscordMessageAuctionBuys("[" + Time() + "] [" + MyRealName + "] " + args[0] + "");
                    logs("[" + Time() + "] [" + MyRealName + "] " + args[0] + "");
                }

                /*
                                if (MyRealName == "знаменитая" || MyRealName == "файрмаг")
                                {
                                    if (args[0].Contains("has come online"))
                                    {
                                        SendDiscordMessageFriendsComeOnline("[" + Time() + "] " + args[0] + "");
                                        logs("[" + Time() + "] [" + MyRealName + "] " + args[0] + "");
                                    }

                                    if (args[0].Contains("has gone offline"))
                                    {
                                        SendDiscordMessageFriendsGoneOffline("[" + Time() + "] " + args[0] + "");
                                        logs("[" + Time() + "] [" + MyRealName + "] " + args[0] + "");
                                    }

                                    if (args[0].Contains("GMLevel"))
                                    {
                                        SendDiscordMessageGmOnline("[" + Time() + "] [" + RealmShortName + "]: GM online: " + args[0] + "");
                                        logs("[" + Time() + "] [" + MyRealName + "]: GM online: " + args[0] + "");
                                        //runlua("PlaySoundFile('Sound/Spells/JennysWhistle.wav')");
                                        GMInGameCheckTimer = DateTime.Now.AddSeconds(1000);
                                    }

                                    if (args[0].Contains("Nont"))
                                    {
                                        SendDiscordMessageGmOnline("[" + Time() + "] [" + RealmShortName + "]: Nont is online (" + args[0] + ")");
                                        logs("[" + Time() + "] [" + MyRealName + "]: Nont is online (" + args[0] + ")");
                                        //runlua("PlaySoundFile('Sound/Spells/JennysWhistle.wav')");
                                        GMInGameCheckTimer = DateTime.Now.AddSeconds(1000);
                                    }

                                    if (args[0].Contains("Прихлоп"))
                                    {
                                        SendDiscordMessageGmOnline("[" + Time() + "] [" + RealmShortName + "]: Прихлоп is online (" + args[0] + ")");
                                        logs("[" + Time() + "] [" + MyRealName + "]: Прихлоп is online (" + args[0] + ")");
                                        //runlua("PlaySoundFile('Sound/Spells/JennysWhistle.wav')");
                                        GMInGameCheckTimer = DateTime.Now.AddSeconds(1000);
                                    }

                                    if (args[0].Contains("Vusale"))
                                    {
                                        SendDiscordMessageGmOnline("[" + Time() + "] [" + RealmShortName + "]: Vusale is online (" + args[0] + ")");
                                        logs("[" + Time() + "] [" + MyRealName + "]: Vusale is online (" + args[0] + ")");
                                        //runlua("PlaySoundFile('Sound/Spells/JennysWhistle.wav')");
                                        GMInGameCheckTimer = DateTime.Now.AddSeconds(1000);
                                    }

                                    if (args[0].Contains("Euphoria"))
                                    {
                                        SendDiscordMessageGmOnline("[" + Time() + "] [" + RealmShortName + "]: Euphoria is online (" + args[0] + ")");
                                        logs("[" + Time() + "] [" + MyRealName + "]: Euphoria is online (" + args[0] + ")");
                                        //runlua("PlaySoundFile('Sound/Spells/JennysWhistle.wav')");
                                        GMInGameCheckTimer = DateTime.Now.AddSeconds(1000);
                                    }
                                }
                                */
            }


            // new auction purchase //
            if ((ProfileName() == "horde_grinder_1_80.xml" || ProfileName().Contains("buy")) && AuctionHelpers.AuctionHouseIsShown() && id == LuaEventsId.PLAYER_MONEY)
            {
                Var.SetVar("Count", Var.GetVar<int>("Count") + 1);
                logs("LUA EVENT: PLAYER_MONEY, новая покупка/продажа на ауке, Var.GetVar<int>('Count') = " + Var.GetVar<int>("Count") + "");
                print("LUA EVENT: PLAYER_MONEY, новая покупка/продажа на ауке, Var.GetVar<int>('Count') = " + Var.GetVar<int>("Count") + "");
            }





            // реакции на кил вражеского игрока //
            if ((id == LuaEventsId.CHAT_MSG_COMBAT_HONOR_GAIN || id == (LuaEventsId)Enum.Parse(typeof(LuaEventsId), "HONOR_CURRENCY_UPDATE")) && !Battleground.IsInBattleground())
            {
                print("LUA EVENT: CHAT_MSG_COMBAT_HONOR_GAIN || HONOR_CURRENCY_UPDATE");

                if (KilledEnemyPlayer() != null)
                {
                    logs("укатали челика! " + KilledEnemyPlayer().Name + ", гуид " + KilledEnemyPlayer().Guid + ", " + KilledEnemyPlayer().Level + " лвл");
                    print("укатали челика! " + KilledEnemyPlayer().Name + ", гуид " + KilledEnemyPlayer().Guid + ", " + KilledEnemyPlayer().Level + " лвл");
                    SendDiscordMessageOnKilledPlayer("[" + Time() + "] [" + MyRealName + "]: укатали челика! [" + KilledEnemyPlayer().Name + "], гуид " + KilledEnemyPlayer().Guid + ", " + KilledEnemyPlayer().Level + " лвл " + KilledEnemyPlayer().WowRace + " " + KilledEnemyPlayer().WowClass + ", дистанция: " + (int)KilledEnemyPlayer().GetDistance + ", таргетит: " + KilledEnemyPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)KilledEnemyPlayer().Position.X + ", " + (int)KilledEnemyPlayer().Position.Y + ", " + (int)KilledEnemyPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    ScreenAlertVisualTextOnly("укатали челика!\\n" + KilledEnemyPlayer().Name + " " + KilledEnemyPlayer().Guid + "");
                }
                else
                {
                    logs("укатали челика!* " + LastPlayerThatWeFight + "");
                    print("укатали челика!* " + LastPlayerThatWeFight + "");
                    SendDiscordMessageOnKilledPlayer("[" + Time() + "] [" + MyRealName + "]: укатали челика!* " + LastPlayerThatWeFight + "");
                    ScreenAlertVisualTextOnly("укатали челика!*\\n" + LastPlayerThatWeFight + "");
                }

                // реакции на убитого игрока //
                Var.SetVar("BullyingCount", 0);
                print("BullyingCount = " + Var.GetVar<int>("BullyingCount") + " (reset)");
                logs("BullyingCount = " + Var.GetVar<int>("BullyingCount") + " (reset)");

                // пока не бьют мобы, не бьют игроки и хп больше 30% издеваемся над потерпевшим неудачу //
                while (ObjectManager.GetUnitAttackPlayer().Count(u => u.GetDistance <= 40) == 0 && EnemyPlayerThatAttackingMeAndAlive() == null && me.HealthPercent > rnd(25, 50)) // проверить 
                {
                    if (Conditions.InGameAndConnected)
                    {

                        sleep(rnd(100, 1000));
                        logs("[цикл реакций на убитого игрока] pause on");
                        print("[цикл реакций на убитого игрока] pause on");
                        ScreenAlertVisualTextOnly("укатали челика!\\n" + KilledEnemyPlayer().Name + " " + KilledEnemyPlayer().Guid + "\\n издеваемся над ним!");
                        PauseOn();
                        MaximizeWowWindow();
                        sleep(rnd(300, 3000));

                        // таргет трупа, шанс 50% //
                        if (KilledEnemyPlayer() != null && KilledEnemyPlayer().GetDistance < 30 && rnd(1, 3) == 2)
                        {
                            logs("[цикл реакций на убитого игрока] таргет трупа");
                            print("[цикл реакций на убитого игрока] таргет трупа");
                            me.Target = KilledEnemyPlayer().Guid;
                            sleep(rnd(300, 3000));
                        }

                        // подойти к трупу //
                        if (KilledEnemyPlayer() != null && KilledEnemyPlayer().GetDistanceZ <= 4 && KilledEnemyPlayer().GetDistance < 20)
                        {
                            logs("[цикл реакций на убитого игрока] подойти к трупу");
                            print("[цикл реакций на убитого игрока] подойти к трупу");
                            ClickToMove.CGPlayer_C__ClickToMove(KilledEnemyPlayer().Position.X, KilledEnemyPlayer().Position.Y, KilledEnemyPlayer().Position.Z, 0, (int)ClickToMoveType.Move, 0.5f);
                            sleep(rnd(300, 3000));
                        }

                        // эмоция над трупом - шанс 50% //
                        if (KilledEnemyPlayer() != null && rnd(1, 3) == 2)
                        {
                            logs("[цикл реакций на убитого игрока] эмоция над трупом - шанс 50%");
                            print("[цикл реакций на убитого игрока] эмоция над трупом - шанс 50%");
                            RandomEmoteOnHonorKill();
                            sleep(rnd(300, 3000));
                        }

                        // подойти снова и прыгнуть над трупом //
                        if (KilledEnemyPlayer() != null && KilledEnemyPlayer().GetDistanceZ <= 4 && KilledEnemyPlayer().GetDistance < 20 && rnd(1, 3) == 2)
                        {
                            logs("[цикл реакций на убитого игрока] подойти снова и прыгнуть над трупом");
                            print("[цикл реакций на убитого игрока] подойти снова и прыгнуть над трупом");
                            ClickToMove.CGPlayer_C__ClickToMove(KilledEnemyPlayer().Position.X, KilledEnemyPlayer().Position.Y, KilledEnemyPlayer().Position.Z, 0, (int)ClickToMoveType.Move, 0.5f);
                            Move.JumpOrAscend();
                            sleep(rnd(100, 2000));

                            if (rnd(1, 3) == 2)
                            {
                                Move.JumpOrAscend();
                                logs("[цикл реакций на убитого игрока] еще прыжок");
                                print("[цикл реакций на убитого игрока] еще прыжок");
                                sleep(rnd(100, 2000));
                            }
                            if (rnd(1, 3) == 2)
                            {
                                Move.JumpOrAscend();
                                logs("[цикл реакций на убитого игрока] еще прыжок");
                                print("[цикл реакций на убитого игрока] еще прыжок");
                                sleep(rnd(100, 2000));
                            }
                            if (rnd(1, 4) == 3)
                            {
                                Move.JumpOrAscend();
                                logs("[цикл реакций на убитого игрока] еще прыжок");
                                print("[цикл реакций на убитого игрока] еще прыжок");
                                sleep(rnd(100, 2000));
                            }
                            if (rnd(1, 5) == 4)
                            {
                                logs("[цикл реакций на убитого игрока] еще прыжок");
                                print("[цикл реакций на убитого игрока] еще прыжок");
                                sleep(rnd(100, 2000));
                            }
                            if (rnd(1, 6) == 5)
                            {
                                logs("[цикл реакций на убитого игрока] еще прыжок");
                                print("[цикл реакций на убитого игрока] еще прыжок");
                                sleep(rnd(100, 2000));
                            }
                            if (rnd(1, 7) == 6)
                            {
                                Move.JumpOrAscend();
                                logs("[цикл реакций на убитого игрока] еще прыжок");
                                print("[цикл реакций на убитого игрока] еще прыжок");
                                sleep(rnd(100, 2000));
                            }

                            sleep(rnd(2000, 3000));

                            if (rnd(1, 6) == 5)
                            {
                                runlua("DoEmote('dance')");
                                logs("[цикл реакций на убитого игрока] танец");
                                print("[цикл реакций на убитого игрока] танец");
                                sleep(rnd(5000, 15000));
                            }

                            if (rnd(1, 6) == 5)
                            {
                                runlua("DoEmote('hug')");
                                logs("[цикл реакций на убитого игрока] обнимаем как бонус");
                                print("[цикл реакций на убитого игрока] обнимаем как бонус");
                                sleep(rnd(100, 2000));
                            }
                        }

                        // подойти к трупу и поприседать - шанс 50% //
                        if (KilledEnemyPlayer() != null && KilledEnemyPlayer().GetDistanceZ <= 4 && KilledEnemyPlayer().GetDistance < 20 && rnd(1, 3) == 2)
                        {
                            logs("[цикл реакций на убитого игрока] подойти и поприседать - шанс 50%");
                            print("[цикл реакций на убитого игрока] подойти и поприседать - шанс 50%");
                            ClickToMove.CGPlayer_C__ClickToMove(KilledEnemyPlayer().Position.X, KilledEnemyPlayer().Position.Y, KilledEnemyPlayer().Position.Z, 0, (int)ClickToMoveType.Move, 0.5f);

                            for (int i = 0; i < rnd(10, 30); i++)
                            {
                                if (KilledEnemyPlayer() != null && me.Position.DistanceTo(KilledEnemyPlayer().Position) < 2)
                                {
                                    logs("[цикл реакций на убитого игрока] приседаем");
                                    print("[цикл реакций на убитого игрока] приседаем");
                                    Move.SitStandOrDescend();
                                    sleep(rnd(100, 400));
                                }
                                else
                                {
                                    logs("[цикл реакций на убитого игрока] мертвый игрок покинул тело, стопаем приседания");
                                    print("[цикл реакций на убитого игрока] мертвый игрок покинул тело, стопаем приседания");
                                    sleep(rnd(1000, 5000));
                                    break;
                                }
                            }
                        }

                        // подойти к трупу и поприседать - шанс 50%, повтор 50% //
                        if (KilledEnemyPlayer() != null && me.Position.DistanceTo(KilledEnemyPlayer().Position) < 2 && rnd(1, 3) == 2)
                        {
                            logs("[цикл реакций на убитого игрока] подойти к трупу и поприседать на трупе 10-30 раз - шанс 50%, повтор 50%");
                            print("[цикл реакций на убитого игрока] подойти к трупу и поприседать на трупе 10-30 раз - шанс 50%, повтор 50%");
                            ClickToMove.CGPlayer_C__ClickToMove(KilledEnemyPlayer().Position.X, KilledEnemyPlayer().Position.Y, KilledEnemyPlayer().Position.Z, 0, (int)ClickToMoveType.Move, 0.5f);

                            for (int i = 0; i < rnd(10, 30); i++)
                            {
                                if (KilledEnemyPlayer() != null)
                                {
                                    logs("[цикл реакций на убитого игрока] приседаем (повтор)");
                                    print("[цикл реакций на убитого игрока] приседаем (повтор)");
                                    Move.SitStandOrDescend();
                                    sleep(rnd(100, 400));
                                }
                                else
                                {
                                    logs("[цикл реакций на убитого игрока] мертвый игрок покинул тело, стопаем приседания на нем");
                                    print("[цикл реакций на убитого игрока] мертвый игрок покинул тело, стопаем приседания на нем");
                                    sleep(rnd(1000, 5000));
                                    break;
                                }
                            }
                        }

                        // эмоция - шанс 25% //
                        if (rnd(1, 5) == 4)
                        {
                            logs("[цикл реакций на убитого игрока] эмоция - шанс 25%");
                            print("[цикл реакций на убитого игрока] эмоция - шанс 25%");
                            RandomEmoteOnHonorKill();
                        }

                        if (KilledEnemyPlayer() == null)
                        {
                            logs("[цикл реакций на убитого игрока] pause off: конец цикла реакций на убитого игрока, поверженный игрок покинул тело");
                            print("[цикл реакций на убитого игрока] pause off: конец цикла реакций на убитого игрока, поверженный игрок покинул тело");
                            sleep(rnd(1000, 5000));
                            break;
                        }

                        if (EnemyPlayerThatAttackingMeAndAlive() != null)
                        {
                            logs("[цикл реакций на убитого игрока] pause off: конец цикла реакций на убитого игрока, появился атакующий нас игрок");
                            print("[цикл реакций на убитого игрока] pause off: конец цикла реакций на убитого игрока, появился атакующий нас игрок");
                            break;
                        }

                        if (Var.GetVar<int>("BullyingCount") >= rnd(1, 5))
                        {
                            logs("[цикл реакций на убитого игрока] pause off: конец цикла реакций на убитого игрока, хватит издеваться, вдруг он не игрок или вообще афк");
                            print("[цикл реакций на убитого игрока] pause off: конец цикла реакций на убитого игрока, хватит издеваться, вдруг он не игрок или вообще афк");
                            break;
                        }
                    }

                    if (!Conditions.InGameAndConnected)
                    {
                        PauseOff();
                        logs("[цикл реакций на убитого игрока] оф паузы, выход из цикла, не в игре");
                        break;
                    }

                    sleep(500);
                    Var.SetVar("BullyingCount", Var.GetVar<int>("BullyingCount") + 1);
                    print("BullyingCount = " + Var.GetVar<int>("BullyingCount") + "");
                    logs("BullyingCount = " + Var.GetVar<int>("BullyingCount") + "");
                }

                logs("[цикл реакций на убитого игрока] оф паузы после выхода из цикла");
                print("[цикл реакций на убитого игрока] оф паузы после выхода из цикла");
                PauseOff();
            }
        }
    }

    private List<string> ErrorWarningList100_499 = new List<string>();

    private List<string> ErrorWarningList500_5000 = new List<string>();

    private void ErrorWarning100_499()
    {
        for (int i = 0; i < 500; i++)
        {
            int number = 10 + i;
            string newentry = "|cffffd200Count:|cffffffff " + number + "";
            ErrorWarningList100_499.Add(newentry);
        }
    }

    private void ErrorWarning500_5000()
    {
        for (int i = 0; i <= 5000; i++)
        {
            int number = 500 + i;
            string newentry = "|cffffd200Count:|cffffffff " + number + "";
            ErrorWarningList500_5000.Add(newentry);
        }
    }

    private void ReloadFightClassIfNotLoaded()
    {
        if (CheckIfFightClassDisposedTimer < DateTime.Now && !CustomClass.IsAliveCustomClass)
        {
            CheckIfFightClassDisposedTimer = DateTime.Now.AddSeconds(60);
            logs("не загрузил фк");
            print("не загрузил фк");
            SendDiscordMessageArchiveAlerts("[" + RealmShortName + "] [" + Time() + "] [" + MyRealName + "]: не загрузил фк");
            InitializeRealmFactionClass();
            LoadFightClass();
        }
    }


    private void CheckLuaErrors()
    {
        if (LuaErrorCheckTimer < DateTime.Now && Lua.LuaDoString<bool>("if ScriptErrorsFrame then if ScriptErrorsFrame:IsVisible() then return true end end"))
        {
            LuaErrorCheckTimer = DateTime.Now.AddSeconds(rnd(50, 100));

            var luaerrortext = Lua.LuaDoString<string>("return ScriptErrorsFrameScrollFrameText:GetText()");

            foreach (var error in ErrorWarningList100_499)
            {
                if (luaerrortext.Contains(error))
                {
                    SendDiscordMessageArchiveAlerts("[" + RealmShortName + "] [" + Time() + "] [" + MyRealName + "]: 100+ луа ошибок");
                    logs("100+ луа ошибок, последняя: " + luaerrortext + "");
                    print("100+ луа ошибок");
                    break;
                }
            }

            sleep(100);

            foreach (var error in ErrorWarningList500_5000)
            {
                if (luaerrortext.Contains(error))
                {
                    SendDiscordMessageDebug1("[" + RealmShortName + "] [" + Time() + "] [" + MyRealName + "]: 500+ луа ошибок, киляем бота");
                    logs("500+ луа ошибок, киляем бота, последняя: " + luaerrortext + "");
                    print("500+ луа ошибок, киляем бота");
                    //Screenshot("500+ луа ошибок");
                    sleep(1000);
                    runlua("ReloadUI()");
                    //System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                    System.Diagnostics.Process.GetCurrentProcess().Kill();
                    break;
                }
            }
        }
    }

    // misc settings spam //
    private void Test()
    {
        if (Test10SecTimer < DateTime.Now)
        {

            Test10SecTimer = DateTime.Now.AddSeconds(1);

            if (TestLogSpamTimer < DateTime.Now)
            {
                TestLogSpamTimer = DateTime.Now.AddSeconds(10);
                // test log spam //
                logs("[test log spam] [" + MyRealName + ", " + me.Level + " lvl] " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + ", фк: " + Setting.CustomClass + ", профиль: " + ProfileName() + ", сервер: " + RealmShortName + "");
                print("" + Mapzone() + ", " + Subzone() + ", " + Continent() + ", " + MyPosXYZ() + ", степ: " + Step() + ", [" + StepName() + "], status: " + Logging.Status + ", фк: " + Setting.CustomClass + ", профиль: " + ProfileName() + ", сервер: " + RealmShortName + "");
            }


            if (Var.GetVar<int>("NeedToForceFullCheckMounts") == 1)
            {
                print("была вызвана проверка маунтов из под профиля");
                logs("была вызвана проверка маунтов из под профиля");
                MountCheck = DateTime.Now;
                sleep(10);
                SetMounts();
            }

            /*
            // пет томбсталкер //
            if (ImDK && me.Name == "Cold" && !MeIsOnFlyMount())
            {
                if (!ObjectManager.Pet.IsValid && SpellManager.SpellUsableLUA("Raise Dead"))
                {
                    SpellManager.CastSpellByNameLUA("Raise Dead");
                    sleep(1000);
                }
                if (ObjectManager.Pet.IsValid)
                {
                    SendDiscordMessageDebug1("[" + Time() + "] " + Lua.Wow.GetUnitName<string>("pet") + "");
                    //logs("" + Lua.Wow.GetUnitName<string>("pet") + "')");
                    //logs(" " + Lua.Wow.GetUnitName<string>("pet") + "", Logging.LogType.Navigator, System.Drawing.Color.Olive);
                }
                if (ObjectManager.Pet.IsValid && Lua.Wow.GetUnitName<string>("pet") != "Tombstalker" && Lua.Wow.GetUnitName<string>("pet") != "Unknown")
                {
                    runlua("PetAbandon()");
                }
                //if (ObjectManager.Pet.IsValid && Lua.Wow.GetUnitName<string>("pet") == "Tombstalker")
                //{
                //SendDiscordMessageMain("пет tombstalker готов");
                //logs("пет tombstalker готов", Logging.LogType.Navigator, System.Drawing.Color.Olive);
                //runlua("PlaySoundFile('Sound/Doodad/TrollDrumLoop1.wav')");
                //sleep(100);
                //}
            }
            */

            /*
            // use lua to move in water, disable if not in water //
            if (me.IsSwimming && !Setting.UseLuaToMove)
            {
                Setting.UseLuaToMove = true;
                logs("use lua to move in water");
                print("use lua to move in water");
            }
            else if (!me.IsSwimming && Setting.UseLuaToMove)
            {
                Setting.UseLuaToMove = false;
                logs("disable use lua to move because not in water");
                print("disable use lua to move because not in water");
            }
            */
        }
    }



    private void LogoutIfCannotFlyWithColdweaterFlyingInKrasusLanding()
    {
        if ((Subzone() == "Krasus' Landing" || Subzone() == "Площадка Краса") && HaveColdweatherFlying && !Usefuls.IsFlyableArea)
        {
            SendDiscordMessageArchiveAlerts("[" + RealmShortName + "] [" + Time() + "] [" + MyRealName + "]: логаут когда баг с полетами на площадке в даларане");
            logs("логаут когда баг с полетами на площадке в даларане");
            PauseAndLogout();
            EnterWorldAndOffPause();
        }
    }

    private void FoodCheckAndRegenControl()
    {
        if (!MeIsKacher() && !MeIsHealClassOrMage && me.Level >= 80)
        {
            // покупная хавка //
            if ((ItemsManager.GetItemCountById(35952) > 0 || ItemsManager.GetItemCountById(35953) > 0) && Setting.FoodName != ItemsManager.GetNameById(35952) && Setting.FoodName != ItemsManager.GetNameById(35953))
            {
                Setting.FoodIsSpell = false;
                if(ItemsManager.GetItemCountById(35952) > 0)
                Setting.FoodName = ItemsManager.GetNameById(35952);
                else if (ItemsManager.GetItemCountById(35953) > 0)
                    Setting.FoodName = ItemsManager.GetNameById(35953);
                logs("[FoodCheck] наша хавка: " + Setting.FoodName + "");
                print("[FoodCheck] наша хавка: " + Setting.FoodName + "");
                NormalRegenSettings();
            }

            else if ((ItemsManager.GetItemCountById(35952) == 0 && ItemsManager.GetItemCountById(35953) == 0) && (Setting.FoodName != "" || Setting.FoodMaxPercent != 1 || Setting.FoodPercent != 1))
            {
                Setting.FoodName = "";
                Setting.FoodMaxPercent = 1;
                Setting.FoodPercent = 1;
                logs("[FoodCheck] нет сыра или карибу в сумке, параметры регена изменены до минимума для 80 и нехилящихся классов");
                print("[FoodCheck] нет сыра или карибу в сумке, параметры регена изменены до минимума для 80 и нехилящихся классов");
            }
        }
        // кач
        if (Var.GetVar<int>("MeIsKacher") == 1)
        {
            if (GetBestAvailableFoodName() == "" && !HpRegenDisabled())
            {
                logs("[FoodCheckAndRegenControl] нет хп хавки у качера, офаем реген хп");
                DisableHpRegen();
            }
            else
            {
                logs("[FoodCheckAndRegenControl] хп хавка есть у качера, включаем реген");
                NormalRegenSettings();
            }

            if (GetBestAvailableDrinkName() == "" && !MpRegenDisabled())
            {
                logs("[FoodCheckAndRegenControl] нет мп хавки у качера, офаем реген мп");
                DisableMpRegen();
            }
            else
            {
                logs("[FoodCheckAndRegenControl] мп хавка есть у качера, включаем реген");
                NormalRegenSettings();
            }
        }
    }
    private string GetBestAvailableFoodName()
    {
        return ItemsManager.GetBestConsumableBag((ItemsManager.ConsumableType)0);
    }

    private string GetBestAvailableDrinkName()
    {
        return ItemsManager.GetBestConsumableBag((ItemsManager.ConsumableType)1);
    }
    private void DisableMpRegen()
    {
        Setting.DrinkPercent = 1;
        Setting.DrinkMaxPercent = 1;
    }

    private void DisableHpRegen()
    {
        Setting.FoodMaxPercent = 1;
        Setting.FoodPercent = 1;
    }

    private bool MpRegenDisabled()
    {
        return Setting.DrinkPercent == 1 || Setting.DrinkMaxPercent == 1;
    }
    private bool HpRegenDisabled()
    {
        return Setting.FoodPercent == 1 || Setting.FoodMaxPercent == 1;
    }

    private void DismountOnMaxSkyPositionZ()
    {
        // позиция Z > 590 в запределье, дизмаунт //
        if (Continent() == "Expansion01" && me.Position.Z > 590)
        {
            Var.SetVar("MeOnHighestZPositionCount", Var.GetVar<int>("MeOnHighestZPositionCount") + ImportantFunctionsRandomCheckTime);

            if (Var.GetVar<int>("MeOnHighestZPositionCount") > 200)
            {
                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: позиция Z > 590 в запределье в течении " + Var.GetVar<int>("MeOnHighestZPositionCount") + " сек => дизмаунт, " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + MyPosXYZ() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                Dismount();
                logs("[DismountOnMaxSkyPositionZ] позиция Z > 590 в запределье, дизмаунт");
                print("[DismountOnMaxSkyPositionZ] позиция Z > 590 в запределье, дизмаунт");
                ScreenAlertVisualMedium("позиция Z > 590 в запределье, дизмаунт");
                MaximizeWowWindow();
            }
        }
    }

    private void LogsInWowChat()
    {
        if (ShowLogsInWowChat2)
        {
            if (!ShowLogsInWowChat)
            {
                if (!Lua.LuaDoString<bool>("if " + LogsButtonFrameName + " then return true end"))
                    CreateAllFrames();

                if (Lua.LuaDoString<bool>("if " + LogsButtonFrameName + " then if " + LogsButtonFrameName + ":GetChecked() == 1 then return true end end"))
                {
                    print("показ логов в чате включен");
                    logs("показ логов в чате включен");
                    ShowLogsInWowChat = true;
                }
            }

            if (ShowLogsInWowChat)
            {
                if (!Lua.LuaDoString<bool>("if " + LogsButtonFrameName + " then return true end"))
                    CreateAllFrames();

                if (!Lua.LuaDoString<bool>("if " + LogsButtonFrameName + " then if " + LogsButtonFrameName + ":GetChecked() == 1 then return true end end"))
                {
                    print("показ логов в чате выключен");
                    logs("показ логов в чате выключен");
                    ShowLogsInWowChat = false;
                }
            }
        }
    }

    private void ForceCheckColdweaterFlyingAndMountsIfNecessary()
    {
        if (HaveFlyMount)
        {
            if (!HaveColdweatherFlying && me.Level >= 80 && Continent() == "Northrend")
            {
                SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + MyRealName + "]: проверка HaveColdweatherFlying в норде = " + HaveColdweatherFlying + ", нет полетов в непогоду на 80 лвле, повторная проверка");
                HaveColdweatherFlying = Lua.LuaDoString<bool>("if IsSpellKnown(54197) then return true end");
                sleep(100);
                print("проверка HaveColdweatherFlying = " + HaveColdweatherFlying + "");
                logs("проверка HaveColdweatherFlying = " + HaveColdweatherFlying + "");
                MountCheck = DateTime.Now;
                sleep(10);
                if (HaveColdweatherFlying)
                    SetMounts();
            }

            // форс чек маунтов если чар 80 в норде/запределье если флай маунт не прописан/не включен //
            if ((Setting.FlyingMountName == "" || !Setting.UseFlyingMount) && Skill.GetMaxValue(SkillLine.Riding) >= 225 && (Continent() == "Expansion01" || (Continent() == "Northrend" && HaveColdweatherFlying)))
            {
                logs("форс чек маунтов если чар 80 в норде/запределье и флай маунт не прописан/не включен");
                print("форс чек маунтов если чар 80 в норде/запределье и флай маунт не прописан/не включен");
                SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + MyRealName + "]: форс чек маунтов если чар 80 в норде/запределье и флай маунт не прописан/не включен, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                MountCheck = DateTime.Now;
                sleep(10);
                SetMounts();
            }
        }

        if (HaveGroundMount && (!Setting.UseMount || Setting.GroundMountName == "") && Skill.GetMaxValue(SkillLine.Riding) >= 75)
        {
            logs("форс чек наземных маунтов если владеем скилом от 75 и граунд маунт не прописан/не включен");
            print("форс чек наземных маунтов если владеем скилом от 75 и граунд маунт не прописан/не включен");
            SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + MyRealName + "]: форс чек наземных маунтов если владеем скилом от 75 и граунд маунт не прописан/не включен, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
            MountCheck = DateTime.Now;
            sleep(10);
            SetMounts();
        }

        if (MountCountChangeCheckTime < DateTime.Now && !Fight.InFight)
        {
            MountCountChangeCheckTime.AddSeconds(5);

            if (CurrentMountCountValue() != OldMountCountValue)
            {
                logs("5-минутная проверка: количество имеющихся маунтов изменилось");
                print("5-минутная проверка: количество имеющихся маунтов изменилось");
                MountCheck = DateTime.Now;
                sleep(10);
                SetMounts();
            }
        }
    }

    private void WhereIsMyElevators()
    {
        // thunder bluff elevator not exist server bug //
        if ((Mapzone() == "Thunder Bluff" || Mapzone() == "Громовой Утес") && me.Position.DistanceTo2D(new Vector3(-1280.112f, 195.2433f, 68.55199f)) < 30 && !ObjectManager.GetObjectWoWGameObject().FirstOrDefault(o => o.Entry == 4170).IsValid)
        {
            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: внезапно исчез элеватор в громовом утесе, логаут, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
            logs("внезапно исчез элеватор в громовом утесе, логаут");
            PauseAndLogout();
            EnterWorldAndOffPause();
        }

    }

    private void LatencyIsPing()
    {
        // пинг //
        if (LatencyTimer < DateTime.Now)
        {
            LatencyTimer = DateTime.Now.AddSeconds(100);
            latency = Usefuls.LatencyReal;
            //latency = Lua.LuaDoString<int>("_,_,latency = GetNetStats() return latency");

            if (latency > 500 && (ProfileName().Contains("Saronit") || ProfileName().Contains("Cobalt")))
                SendDiscordMessageBigPing("[" + Time() + "] [" + MyRealName + "]: пинг высоковат на летуне (" + latency + " ms)");

            if (latency > 1000 && !ProfileName().Contains("Saronit") && !ProfileName().Contains("Cobalt"))
                SendDiscordMessageBigPing("[" + Time() + "] [" + MyRealName + "]: высокий пинг (" + latency + " ms)");

            Setting.LatencyMin = latency;
            if (me.Level < 80)
                Setting.LatencyMax = latency;
            else
                Setting.LatencyMax = latency + 50;

            if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) < 600)
                runlua("if ScriptErrorsFrame then if ScriptErrorsFrame:IsShown() then ScriptErrorsFrameClose:Click() end end"); // закрыть луа ошибки раз в полторы минуты
            runlua("if GameMenuFrame:IsShown() then GameMenuButtonContinue:Click() end"); // закрыть гейм меню раз в полторы минуты
        }
    }


    private void MeIsInWaterInStormwind()
    {
        if (MeIsKacher() && Mapzone() == "Stormwind City" && me.IsSwimming)
        {
            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: упал в воду в шторме, профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
            logs("упал в воду в шторме");
            runlua("ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0)");
        }
    }

    private void FpsControlWhenIdle()
    {
        if (!me.IsDead)
        {
            if (!NearestPlayer().IsValid)
            {
                // 15 fps if no players nearby or in dungeon or char is flying or is in city (not in combat / not in pause) //
                if (!Products.InPause && !Fight.InFight && !Battleground.IsInBattleground() && !IsFpsExclusionProfile() && Lua.LuaDoString<bool>("if " + BigFPSButtonFrameName + " then if " + BigFPSButtonFrameName + ":GetChecked() == nil then return true end end") && !MeIsInCityOrNearToCityOrSanctuary())
                {
                    if ((RealmShortName.Contains("Circle") || RealmShortName.Contains("Virgin")) && Lua.LuaDoString<bool>("if (GetFramerate() >= 16 or GetFramerate() < 14) then return true end"))
                    {
                        runlua("SetCVar('maxFPS','15') SetCVar('maxFPSBk','15')");
                        print("[FpsControlWhenIdle] 15 фпс если не в драке и не на бг и либо рядом нет игроков, либо в инсте, либо в полете (wow c1r cle)");
                        logs("[FpsControlWhenIdle] 15 фпс если не в драке и не на бг и либо рядом нет игроков, либо в инсте, либо в полете (wow c1r cle)");
                    }
                    if (!RealmShortName.Contains("Circle") && !RealmShortName.Contains("Virgin") && Lua.LuaDoString<bool>("if (GetFramerate() >= 26 or GetFramerate() < 24) then return true end"))
                    {
                        runlua("SetCVar('maxFPS','25') SetCVar('maxFPSBk','25')");
                        print("[FpsControlWhenIdle] 25 фпс если не в драке и не на бг и либо рядом нет игроков, либо в инсте, либо в полете (not wow c1r cle)");
                        logs("[FpsControlWhenIdle] 25 фпс если не в драке и не на бг и либо рядом нет игроков, либо в инсте, либо в полете (not wow c1r cle)");
                    }
                }

                // когда жив GetGanked = false если был ганканут но реснулся //
                if (GetGanked && !me.IsDead)
                {
                    logs("GetGanked = false и GankCount = 0 если был ганканут, реснулся и рядом никого");
                    print("GetGanked = false и GankCount = 0 если был ганканут, реснулся и рядом никого");
                    GetGanked = false;
                    Var.SetVar("GankCount", 0);
                }

                // когда жив KilledByPlayer = false если был ганканут но реснулся //
                if (KilledByPlayer && !me.IsDead)
                {
                    logs("KilledByPlayer = false если был убит игроком, реснулся и рядом никого");
                    print("KilledByPlayer = false если был убит игроком, реснулся и рядом никого");
                    KilledByPlayer = false;
                }
            }

            if (Lua.LuaDoString<bool>("if " + BigFPSButtonFrameName + " then if " + BigFPSButtonFrameName + ":GetChecked() == nil then return true end end") && MeIsInCityOrSanctuary())
            {
                if (me.GetMove && Lua.LuaDoString<bool>("if (GetFramerate() >= 19 or GetFramerate() < 21) then return true end"))
                {
                    runlua("SetCVar('maxFPS','20') SetCVar('maxFPSBk','20')");
                    print("[FpsControlWhenIdle] 20 фпс если движется по городу");
                    logs("[FpsControlWhenIdle] 20 фпс если движется по городу");
                }

                if (!me.GetMove && Lua.LuaDoString<bool>("if (GetFramerate() >= 16 or GetFramerate() < 15) then return true end"))
                {
                    runlua("SetCVar('maxFPS','15') SetCVar('maxFPSBk','15')");
                    print("[FpsControlWhenIdle] 15 фпс если стоит в городе без движения");
                    logs("[FpsControlWhenIdle] 15 фпс если стоит в городе без движения");
                }
            }
        }
    }


    private void DisableAndEnableRepairAndSelling()
    {
        if (!IsDungeonProfile() && !IsFishingProfileName())
        {
            // офаем репеир если нет денег //
            if (Setting.Repair && Lua.LuaDoString<bool>("if MerchantFrame:IsVisible() then return true end") && me.GetMoneyCopper < Lua.LuaDoString<int>("repairAllCost, canRepair = GetRepairAllCost() return repairAllCost"))
            {
                Var.SetVar("repairAllCost", Lua.LuaDoString<int>("repairAllCost, canRepair = GetRepairAllCost() return repairAllCost"));

                if (Setting.Repair)
                {
                    logs("[DisableAndEnableRepairAndSelling] офаем починку если нет денег");
                    print("[DisableAndEnableRepairAndSelling] офаем починку если нет денег");
                    Setting.Repair = false;
                    sleep(2000);

                    // стопмув и логаут если тутаун в прогрессе //
                    if (wManager.Wow.Bot.States.ToTown.GoToTownInProgress)
                    {
                        Setting.Selling = false;
                        Setting.Repair = false;
                        Setting.Save();
                        logs("[DisableAndEnableRepairAndSelling] стопмув и логаут если тутаун в прогрессе");
                        print("[DisableAndEnableRepairAndSelling] стопмув и логаут если тутаун в прогрессе");
                        MovementManager.StopMove();
                        PauseAndLogout();
                        EnterWorldAndOffPause();
                    }
                }
            }

            // вкл репеир если есть деньги и не в даларане и не в акерусе //
            else if (!Setting.Repair && me.GetMoneyCopper >= Var.GetVar<int>("repairAllCost") && Mapzone() != "Dalaran" && Mapzone() != "Даларан" && !Subzone().Contains("Acherus") && !Subzone().Contains("Акерус") && Subzone() != "Hall of Command" && Subzone() != "Зал Власти")
            {
                if (!Setting.Repair)
                {
                    print("[DisableAndEnableRepairAndSelling] вкл починку если есть деньги и не в даларане и не в акерусе");
                    logs("[DisableAndEnableRepairAndSelling] вкл починку если есть деньги и не в даларане и не в акерусе");
                    Setting.Repair = true;
                }
            }

            // офаем/вкл продажу/починку в даларане/акерусе //
            if ((Setting.Repair || Setting.Selling) && (Mapzone() == "Dalaran" || Mapzone() == "Даларан" || Subzone().Contains("Acherus") || Subzone().Contains("Акерус") || Subzone() == "Hall of Command" || Subzone() == "Зал Власти"))
            {
                if (Setting.Repair)
                {
                    print("[DisableAndEnableRepairAndSelling] офаем починку в даларане/акерусе");
                    logs("[DisableAndEnableRepairAndSelling] офаем починку в даларане/акерусе");
                    Setting.Repair = false;
                    sleep(2000);
                }

                if (Setting.Selling)
                {
                    print("[DisableAndEnableRepairAndSelling] офаем продажу в даларане/акерусе");
                    logs("[DisableAndEnableRepairAndSelling] офаем продажу в даларане/акерусе");
                    Setting.Selling = false;
                    sleep(2000);
                }

                // стопмув и логаут если тутаун в прогрессе //
                if (wManager.Wow.Bot.States.ToTown.GoToTownInProgress)
                {
                    Setting.Selling = false;
                    Setting.Repair = false;
                    Setting.Save();
                    logs("[DisableAndEnableRepairAndSelling] стопмув и логаут если тутаун в прогрессе");
                    print("[DisableAndEnableRepairAndSelling] стопмув и логаут если тутаун в прогрессе");
                    MovementManager.StopMove();
                    PauseAndLogout();
                    EnterWorldAndOffPause();
                }
            }

            // вкл починку/продажу если не в даларане и не в акерусе и есть 100+ голд //
            if ((!Setting.Selling || (!Setting.Repair && me.GetMoneyCopper >= 1000000)) && Mapzone() != "Dalaran" && Mapzone() != "Даларан" && !IsDungeonProfile() && !Subzone().Contains("Acherus") && !Subzone().Contains("Акерус") && Subzone() != "Hall of Command" && Subzone() != "Зал Власти")
            {
                if (!Setting.Repair && me.GetMoneyCopper >= 1000000)
                {
                    logs("[DisableAndEnableRepairAndSelling] вкл починку если не в даларане и не в акерусе и есть 100+ голд");
                    print("[DisableAndEnableRepairAndSelling] вкл починку если не в даларане и не в акерусе и есть 100+ голд");
                    Setting.Repair = true;
                }

                if (!Setting.Selling)
                {
                    logs("[DisableAndEnableRepairAndSelling] вкл продажу если не в даларане и не в акерусе и есть 100+ голд");
                    print("[DisableAndEnableRepairAndSelling] вкл продажу если не в даларане и не в акерусе и есть 100+ голд");
                    Setting.Selling = true;
                }
            }
        }
    }

    private void StaticPopupCheck()
    {
        if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() or StaticPopup2:IsShown()) then return true end"))
        {
            // подтверждение экипирировки шмота //
            if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'Equipping')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'Equipping')) then return true end"))
            {
                runlua("if StaticPopup1:IsShown() then StaticPopup1Button1:Click() end if StaticPopup2:IsShown() then StaticPopup2Button1:Click() end");
                logs("[StaticPopupCheck] подтверждение экипирировки шмота");
                print("[StaticPopupCheck] подтверждение экипирировки шмота");
            }

            // отклонение инвайта на оло //
            if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'Wintergrasp')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'Wintergrasp')) then return true end"))
            {
                runlua("if StaticPopup1:IsShown() then StaticPopup1Button2:Click() end if StaticPopup2:IsShown() then StaticPopup2Button2:Click() end");
                logs("[StaticPopupCheck] отклонение инвайта на оло");
                print("[StaticPopupCheck] отклонение инвайта на оло");
            }

            // принятие инвайта в гишку //
            if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to join the guild')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to join the guild')) then return true end"))
            {
                if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to join the guild')) then return true end"))
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: " + Lua.LuaDoString<string>("return StaticPopup1Text:GetText()") + "");
                if (Lua.LuaDoString<bool>("if (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to join the guild')) then return true end"))
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: " + Lua.LuaDoString<string>("return StaticPopup2Text:GetText()") + "");

                logs("[StaticPopupCheck] принятие инвайта в гишку через 2-15 сек");
                print("[StaticPopupCheck] принятие инвайта в гишку через 2-15 сек");

                sleep(rnd(2000, 15000));

                if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to join the guild')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to join the guild')) then return true end"))
                {
                    logs("[StaticPopupCheck] принятие инвайта в гишку");
                    print("[StaticPopupCheck] принятие инвайта в гишку");
                    runlua("if StaticPopup1:IsShown() then StaticPopup1Button1:Click() end if StaticPopup2:IsShown() then StaticPopup2Button1:Click() end");
                }
            }

            // пати //
            if (!IsDungeonProfile())
            {
                if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to a group')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to a group')) then return true end"))
                {
                    /*
                    if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to a group')) then return true end"))
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: " + Lua.LuaDoString<string>("return StaticPopup1Text:GetText()") + "");
                    if (Lua.LuaDoString<bool>("if (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to a group')) then return true end"))
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: " + Lua.LuaDoString<string>("return StaticPopup2Text:GetText()") + "");
                    */

                    if (PartyInviteCheck < DateTime.Now && MeIsKacher() && NearestPlayer().IsValid && NearestPlayer().GetDistance < 30 && !NearestPlayer().IsAttackable)
                    {
                        PartyInviteCheck = DateTime.Now.AddSeconds(rnd(20, 60));
                        logs("[StaticPopupCheck] принятие пати через 2-15 сек");
                        print("[StaticPopupCheck] принятие пати через 2-15 сек");
                        sleep(rnd(2000, 15000));

                        if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to a group')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to a group')) then return true end"))
                        {
                            runlua("if StaticPopup1:IsShown() then StaticPopup1Button1:Click() end if StaticPopup2:IsShown() then StaticPopup2Button1:Click() end");
                            SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: принятие пати, рядом игрок: [" + NearestPlayer().Name + "], гуид " + NearestPlayer().Guid + ", " + NearestPlayer().Level + " лвл " + NearestPlayer().WowRace + " " + NearestPlayer().WowClass + ", дистанция: " + (int)NearestPlayer().GetDistance + ", таргетит: " + NearestPlayer().IsTargetingMe + ", враг: " + NearestPlayer().IsAttackable + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)NearestPlayer().Position.X + ", " + (int)NearestPlayer().Position.Y + ", " + (int)NearestPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                            logs("[StaticPopupCheck] принятие пати");
                            print("[StaticPopupCheck] принятие пати");
                        }
                    }

                    if (PartyInviteCheck < DateTime.Now && (!MeIsKacher() || (MeIsKacher() && (!NearestPlayer().IsValid || (NearestPlayer().IsValid && NearestPlayer().IsAttackable)))))
                    {
                        PartyInviteCheck = DateTime.Now.AddSeconds(rnd(20, 60));
                        logs("[StaticPopupCheck] отклонение пати через 2-15 сек");
                        print("[StaticPopupCheck] отклонение пати через 2-15 сек");
                        sleep(rnd(2000, 15000));

                        if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'invites you to a group')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'invites you to a group')) then return true end"))
                        {
                            runlua("if StaticPopup1:IsShown() then StaticPopup1Button2:Click() end if StaticPopup2:IsShown() then StaticPopup2Button2:Click() end");
                            SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: отклонение пати, рядом игрок: [" + NearestPlayer().Name + "], гуид " + NearestPlayer().Guid + ", " + NearestPlayer().Level + " лвл " + NearestPlayer().WowRace + " " + NearestPlayer().WowClass + ", дистанция: " + (int)NearestPlayer().GetDistance + ", таргетит: " + NearestPlayer().IsTargetingMe + ", враг: " + NearestPlayer().IsAttackable + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)NearestPlayer().Position.X + ", " + (int)NearestPlayer().Position.Y + ", " + (int)NearestPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                            logs("[StaticPopupCheck] отклонение пати");
                            print("[StaticPopupCheck] отклонение пати");
                        }
                    }
                }
            }

            // отклонение дуэли //
            if (Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'has challenged you to a duel')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'has challenged you to a duel')) then return true end"))
            {
                SendDiscordMessageRequests("[" + Time() + "] [" + MyRealName + "]: запрос на дуэль, ближайший игрок: [" + NearestPlayer().Name + "], гуид " + NearestPlayer().Guid + ", " + NearestPlayer().Level + " лвл " + NearestPlayer().WowRace + " " + NearestPlayer().WowClass + ", дистанция: " + (int)NearestPlayer().GetDistance + ", таргетит: " + NearestPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)NearestPlayer().Position.X + ", " + (int)NearestPlayer().Position.Y + ", " + (int)NearestPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                logs("[StaticPopupCheck] отклонение дуэли через 2-15 сек от, запрос от [" + NearestPlayer().Name + "], гуид " + NearestPlayer().Guid + ", " + NearestPlayer().Level + " лвл " + NearestPlayer().WowRace + " " + NearestPlayer().WowClass + ", дистанция: " + (int)NearestPlayer().GetDistance + ", таргетит: " + NearestPlayer().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)NearestPlayer().Position.X + ", " + (int)NearestPlayer().Position.Y + ", " + (int)NearestPlayer().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                print("[StaticPopupCheck] отклонение дуэли через 2-15 сек");
                sleep(rnd(2000, 15000));
                runlua("if StaticPopup1:IsShown() then StaticPopup1Button2:Click() end if StaticPopup2:IsShown() then StaticPopup2Button2:Click() end");
            }
        }
    }


    private void SearchHelpers()
    {
        if (Fight.InFight && PartyInviteCheck < DateTime.Now && !ObjectManager.Me.IsInGroup)
        {
            var sojuznik = ObjectManager.GetObjectWoWPlayer().FirstOrDefault(p => p.PlayerFaction == ObjectManager.Me.PlayerFaction && p.TargetObject.Entry == ObjectManager.Target.Entry && p.Level <= ObjectManager.Me.Level + 5 && p.InCombatFlagOnly);
            PartyInviteCheck = DateTime.Now.AddSeconds(rnd(20, 60));
            if (sojuznik != null)
            {
                logs("[UsefulPlagin] Кидаем пати союзнику " + sojuznik.Name + " на каче");
                print("[UsefulPlagin] Кидаем пати союзнику " + sojuznik.Name + " на каче");
                Lua.LuaDoString("InviteUnit('" + sojuznik.Name + "')");
            }
        }
    }
    private void UseSpiritHealerWhenDeadInBlacrockMagma()
    {
        // спирит хилер в горе //
        if (Usefuls.ContinentNameMpq == "Azeroth")
        {
            if (Mapzone() == "Blackrock Mountain" || Mapzone() == "Черная гора")
            {
                if (me.HaveBuff("Ghost") && me.PositionCorpse.DistanceTo(new Vector3(-7591.124, -1098.733, 165.8483)) < 200) // радиус магмы в черной горе
                {
                    logs("[UseSpiritHealerWhenDeadInBlacrockMagma] погиб в черной горе в радиусе магмы => UseUnstuckAndSpiritHealer()");
                    print("[UseSpiritHealerWhenDeadInBlacrockMagma] погиб в черной горе в радиусе магмы => UseUnstuckAndSpiritHealer()");
                    Setting.UseSpiritHealer = true;
                    SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: погиб в черной горе в радиусе магмы => UseUnstuckAndSpiritHealer()");
                    UseUnstuckAndSpiritHealerWhenDead();
                }
            }

            if (Mapzone() != "Blackrock Mountain" && Mapzone() != "Черная гора" && Setting.UseSpiritHealer)
            {
                Setting.UseSpiritHealer = false;
                logs("[UseSpiritHealerWhenDeadInBlacrockMagma] не в blackrock mountain => UseSpiritHealer = false");
                print("[UseSpiritHealerWhenDeadInBlacrockMagma] не в blackrock mountain => UseSpiritHealer = false");
            }
        }
    }

    private void ResetTimersAndCountsAndPositions()
    {
        if (Var.GetVar<int>("NotConnectedCount") > 0 && Conditions.InGameAndConnected)
        {
            Var.SetVar("NotConnectedCount", 0);
            logs("[ResetTimersAndCountsAndPositions] мы в игре, сброс NotConnectedCount до " + Var.GetVar<int>("NotConnectedCount") + "");
        }

        if (!Fight.InFight && !me.InCombat)
        {
            Var.SetVar("Targetnotinlineofsight", 0);
        }

        if (LastKilledByEnemyPlayerDeathPosition != new Vector3(100000, 100000, 100000, "None") && me.Position.DistanceTo(LastKilledByEnemyPlayerDeathPosition) > 200 && !me.IsDead)
        {
            LastKilledByEnemyPlayerDeathPosition = new Vector3(100000, 100000, 100000, "None");
            PreviousKilledByEnemyPlayerDeathPosition = new Vector3(555555, 555555, 555555, "None");
            Var.SetVar("KilledByEnemyPlayerCount", 0);
            Setting.UseSpiritHealer = false;
            logs("[ResetTimersAndCountsAndPositions] сброс позиции KilledByEnemyPlayerDeathPosition");
            print("[ResetTimersAndCountsAndPositions] сброс позиции KilledByEnemyPlayerDeathPosition");
        }

        if (LastDeathPosition != new Vector3(111111, 111111, 111111, "None") && ((me.Position.DistanceTo(LastDeathPosition) > 100 && !me.IsDead) || LastDeathPositionResetTimer < DateTime.Now))
        {
            LastDeathPositionResetTimer = DateTime.Now;
            LastDeathPosition = new Vector3(111111, 111111, 111111, "None");
            PreviousDeathPosition = new Vector3(444444, 444444, 444444, "None");
            Var.SetVar("NotPVPKilledCount", 0);
            Setting.UseSpiritHealer = false;
            logs("[ResetTimersAndCountsAndPositions] сброс позиции LastDeathPosition, счетчика NotPVPKilledCount и таймера LastDeathPositionResetTimer");
            print("[ResetTimersAndCountsAndPositions] сброс позиции LastDeathPosition, счетчика NotPVPKilledCount и таймера LastDeathPositionResetTimer");
        }

        // сброс счетчика TryToUseFlySwim каждую спустя 75 сек если счетчик не равен нулю //
        if (TryToUseFlySwimPathCountResetTimer < DateTime.Now && Var.GetVar<int>("TryToUseFlySwimPathCount") > 0)
        {
            TryToUseFlySwimPathCountResetTimer = DateTime.Now.AddSeconds(75);
            logs("[ResetTimersAndCountsAndPositions] сброс счетчика TryToUseFlySwimPathCount (" + Var.GetVar<int>("TryToUseFlySwimPathCount") + ") спустя 75 сек если счетчик не равен нулю");
            print("[ResetTimersAndCountsAndPositions] сброс счетчика TryToUseFlySwimPathCount (" + Var.GetVar<int>("TryToUseFlySwimPathCount") + ") спустя 75 сек если счетчик не равен нулю");
            Var.SetVar("TryToUseFlySwimPathCount", 0);
        }

        // сброс счетчика Trying Something Funny спустя 11 мин если счетчик не равен нулю //
        if (TryingSomethingFunnyCountResetTimer < DateTime.Now && Var.GetVar<int>("TryingSomethingFunnyCount") > 0) // если таймер сброса счетчика фанни готов и счетчик не равен 0 => сброс таймера и сброс счетчика
        {
            TryingSomethingFunnyCountResetTimer = DateTime.Now.AddSeconds(650);
            logs("[ResetTimersAndCountsAndPositions] сброс счетчика Trying Something Funny (" + Var.GetVar<int>("TryingSomethingFunnyCount") + ") спустя 11 мин если счетчик не равен нулю");
            print("[ResetTimersAndCountsAndPositions] сброс счетчика Trying Something Funny (" + Var.GetVar<int>("TryingSomethingFunnyCount") + ") спустя 11 мин если счетчик не равен нулю");
            Var.SetVar("TryingSomethingFunnyCount", 0);
        }
        // сброс счетчика Totown спустя 11 мин если счетчик не равен нулю //
        if (TotownStatisticResetTimer < DateTime.Now && Var.GetVar<int>("TotownCount") > 0) // если таймер сброса счетчика фанни готов и счетчик не равен 0 => сброс таймера и сброс счетчика
        {
            TotownStatisticResetTimer = DateTime.Now.AddSeconds(650);
            logs("[ResetTimersAndCountsAndPositions] сброс счетчика Totown (" + Var.GetVar<int>("TotownCount") + ") спустя 11 мин если счетчик не равен нулю");
            print("[ResetTimersAndCountsAndPositions] сброс счетчика Totown (" + Var.GetVar<int>("TotownCount") + ") спустя 11 мин если счетчик не равен нулю");
            Var.SetVar("TotownCount", 0);
        }
        // сброс счетчика Statistics.Stucks спустя 11 мин если счетчик не равен нулю //
        if (StuckStatisticResetTimer < DateTime.Now && Statistics.Stucks > 0)
        {
            StuckStatisticResetTimer = DateTime.Now.AddSeconds(650);
            logs("[ResetTimersAndCountsAndPositions] сброс счетчика Statistics.Stucks (" + Statistics.Stucks + ") спустя 11 мин если счетчик не равен нулю");
            print("[ResetTimersAndCountsAndPositions] сброс счетчика Statistics.Stucks (" + Statistics.Stucks + ") спустя 11 мин если счетчик не равен нулю");
            Statistics.Stucks = 0;
        }

        // сброс счетчика StuckResolver спустя 11 мин если счетчик не равен нулю //
        if (StuckResolverCountResetTimer < DateTime.Now && Var.GetVar<int>("StuckResolverCount") > 0)
        {
            StuckResolverCountResetTimer = DateTime.Now.AddSeconds(650);
            logs("[ResetTimersAndCountsAndPositions] сброс счетчика StuckResolver (" + Var.GetVar<int>("StuckResolverCount") + ") спустя 11 мин если счетчик не равен нулю");
            print("[ResetTimersAndCountsAndPositions] сброс счетчика StuckResolverCount (" + Var.GetVar<int>("StuckResolverCount") + ") спустя 11 мин если счетчик не равен нулю");
            Var.SetVar("StuckResolverCount", 0);
        }

        // сброс счетчика SwimmingCount если не плавает //
        if ((Var.GetVar<int>("SwimmingCount") > 0 || Var.GetVar<int>("SwimmingInDalaranCount") > 0) && !me.IsSwimming && !Lua.LuaDoString<bool>("if IsFalling() == 1 then return true end"))
        {
            print("[ResetTimersAndCountsAndPositions] сброс статистики плавания SwimmingCount и SwimmingInDalaranCount");
            logs("[ResetTimersAndCountsAndPositions] сброс статистики плавания SwimmingCount и SwimmingInDalaranCount");
            Var.SetVar("SwimmingCount", 0);
            Var.SetVar("SwimmingInDalaranCount", 0);
        }
    }

    private void MiningAndGatheringFunctions()
    {
        // для профилей на кач травы/руды //
        if (IsMiningHerbalismUpProfileName())
        {

            GreyNodeBlacklist();
            
            // вкл/выкл сбор травы/руды //
            if (Skill.GetValue(SkillLine.Mining) != 0)
            {
                if ((Skill.GetValue(SkillLine.Mining) >= 450 || (Skill.GetValue(SkillLine.Mining) == Skill.GetMaxValue(SkillLine.Mining))) && Setting.HarvestMinerals)
                {
                    Setting.HarvestMinerals = false;
                    logs("[MiningAndGatheringFunctions] если текущий скил мининга больше или равен 400 или текущий скил мининга = максимальному значению => офаем сбор руды");
                    print("[MiningAndGatheringFunctions] если текущий скил мининга больше или равен 400 или текущий скил мининга = максимальному значению => офаем сбор руды");
                }

                else if (Skill.GetValue(SkillLine.Mining) < 450 && (Skill.GetValue(SkillLine.Mining) != Skill.GetMaxValue(SkillLine.Mining)) && !Setting.HarvestMinerals)
                {
                    Setting.HarvestMinerals = true;
                    logs("[MiningAndGatheringFunctions] если текущий скил мининга меньше 450 и текущий скил мининга не равен максимальному значению => включаем сбор руды");
                    print("[MiningAndGatheringFunctions] если текущий скил мининга меньше 450 и текущий скил мининга не равен максимальному значению => включаем сбор руды");
                }
            }

            if (Skill.GetValue(SkillLine.Herbalism) != 0)
            {

                if ((Skill.GetValue(SkillLine.Herbalism) >= 445 || (Skill.GetValue(SkillLine.Herbalism) == Skill.GetMaxValue(SkillLine.Herbalism))) && Setting.HarvestHerbs)
                {
                    Setting.HarvestHerbs = false;
                    logs("[MiningAndGatheringFunctions] если текущий скил травы больше или равен 445 или текущий скил травы = максимальному значению => офаем сбор травы");
                    print("[MiningAndGatheringFunctions] если текущий скил травы больше или равен 445 или текущий скил травы = максимальному значению => офаем сбор травы");
                }

                else if (Skill.GetValue(SkillLine.Herbalism) < 445 && (Skill.GetValue(SkillLine.Herbalism) != Skill.GetMaxValue(SkillLine.Herbalism)) && !Setting.HarvestHerbs)
                {
                    Setting.HarvestHerbs = true;
                    logs("[MiningAndGatheringFunctions] если текущий скил травы меньше 445 и текущий скил травы не равен максимальному значению => включаем сбор травы");
                    print("[MiningAndGatheringFunctions] если текущий скил травы меньше 445 и текущий скил травы не равен максимальному значению => включаем сбор травы");
                }
            }
        }
    }

    private void KillProcessInRestrictedAreas()
    {
        // кил процесса если алик бежит в зону орды в даларане (баф Trespasser!) //
        if (Mapzone() == "Dalaran" && me.HaveBuff("Trespasser!"))
        {
            SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + MyRealName + "]: кил процесса если алик бежит в зону урок в даларане");
            logs("[KillProcessInRestrictedAreas] кил процесса если алик бежит в зону урок в даларане");
            print("[KillProcessInRestrictedAreas] кил процесса если алик бежит в зону урок в даларане");
            sleep(1000);
            //System.Diagnostics.Process.GetCurrentProcess().Kill();
            System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
        }

        // restricted flight area wintergrasp => kill process //
        if (me.HaveBuff("Restricted Flight Area") && (Mapzone() == "Wintergrasp" || Mapzone() == "Озеро Ледяных Оков"))
        {
            SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + MyRealName + "]: кил процесса если пролетаем над активным оло");
            logs("[KillProcessInRestrictedAreas] кил процесса если пролетаем над активным оло");
            print("[KillProcessInRestrictedAreas] кил процесса если пролетаем над активным оло");
            sleep(100);
            //System.Diagnostics.Process.GetCurrentProcess().Kill();
            System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
            runlua("ForceQuit()");
            //runlua("Logout()");
            //PauseOn();
            //sleep(600000);
            //PauseOff();
        }
    }

    private void StuckInValleyOfEchoesCircleBug()
    {
        if (ValleyofEchoesTimer < DateTime.Now && !Products.InPause)
        {
            ValleyofEchoesTimer = DateTime.Now.AddMinutes(1);

            if (Subzone() == "Valley of Echoes" || Subzone() == "The Argent Vanguard")
            {
                if (me.Position.DistanceTo(ValleyofEchoesBugPoint) > 5)
                {
                    ValleyofEchoesBugPoint = me.Position;
                }

                if (me.Position.DistanceTo(ValleyofEchoesBugPoint) <= 5)
                {
                    ValleyofEchoesBugPointStuckCount = ValleyofEchoesBugPointStuckCount + 1;
                    if (ValleyofEchoesBugPointStuckCount >= 5)
                    {
                        //Screenshot("застрявание в Valley of Echoes");
                        //sleep(1000);
                        MaximizeWowWindow();
                        logs("застрявание в Valley of Echoes, ForceQuit через минуту, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        print("застрявание в Valley of Echoes, ForceQuit через минуту, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: застрявание в Valley of Echoes, ForceQuit через минуту, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        sleep(60000);
                        runlua("ForceQuit()");
                    }
                }
            }
        }
    }

    private void AutoRestoreDownWowWindow()
    {
        // +100 сек к таймеру уменьшения окна если окно в данный момент мелкое //
        if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) < 600)
        {
            RestoreDownWowWindowPreTimer = DateTime.Now.AddSeconds(100);
            sleep(10);
        }

        // restore down wow window when not in combat and no players //
        if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600 && RestoreDownWowWindowPreTimer < DateTime.Now && !me.InCombat && !Fight.InFight && !Products.InPause && !Lua.LuaDoString<bool>("if " + DontRestoreDownWowButtonFrameName + " then if " + DontRestoreDownWowButtonFrameName + ":GetChecked() == 1 then return true end end") && !NearestPlayer().IsValid)
        {
            print("[AutoRestoreDownWowWindow] свернуть окно как было если не в бою и нет игроков рядом");
            logs("[AutoRestoreDownWowWindow] свернуть окно как было если не в бою и нет игроков рядом");
            RestoreDownWowWindow();
            RestoreDownWowWindowPreTimer = DateTime.Now.AddSeconds(100);
        }

        // закрывать фреймы если не в бою //
        //if (BasicScriptsErrorsCloseTime < DateTime.Now && !me.InCombat && !Fight.InFight)
        //{
        //BasicScriptsErrorsCloseTime = DateTime.Now.AddSeconds(60);

        //if (Lua.LuaDoString<bool>("if BasicScriptErrors:IsShown() then return true end"))
        //    runlua("UIFrameFadeOut(BasicScriptErrors, 3, BasicScriptErrors:GetAlpha(), 0)");

        //if (Lua.LuaDoString<bool>("if LowHealthFrame:IsShown() then return true end") && !me.IsDead)
        //    runlua("UIFrameFadeOut(LowHealthFrame, 3, LowHealthFrame:GetAlpha(), 0)");

        //if (Lua.LuaDoString<bool>("if OkBtn then if OkBtn:IsShown() then return true end end") && !me.IsDead)
        //runlua("OkBtn:Hide()");

        //if (Lua.LuaDoString<bool>("if " + CenterTextFrameName + " then return true end") && !me.IsDead)
        //    runlua("" + CenterTextFrameName + ":SetBackdropColor(0, 0, 0, 0)");


        //}
    }

    private void WaitSickness()
    {
        // кастомное ожидание сикнеса в полете/паузе //
        if (me.HaveBuff("Resurrection Sickness") && !Logging.Status.ToLower().Contains("town") && !Quest.HasQuest(12701) && RealmShortName != "Virgin")
        {
            Var.SetVar("HaveSickness", 1);

            // взлет при сикнесе //
            if (!Products.InPause && me.IsOutdoors && Usefuls.IsFlyableArea && !Fight.InFight && Subzone() != "Coilfang Reservoir" && Mapzone() != "Coilfang Reservoir" && Mapzone() != "Резервуар Кривого Клыка" && Subzone() != "Резервуар Кривого Клыка" && !me.InCombat && Setting.UseFlyingMount && Setting.FlyingMountName != "" && !MeIsInCityOrSanctuary() && !IsDungeonProfile())
            {
                logs("[WaitSickness] pause on: можем летать => будет взлет при сикнесе");
                print("[WaitSickness] pause on: можем летать => будет взлет при сикнесе");
                PauseOn();

                bool vzleteli = false;

                while (me.HaveBuff("Resurrection Sickness") && !Logging.Status.ToLower().Contains("town"))
                {
                    if (Conditions.InGameAndConnected)
                    {
                        while (me.GetMove)
                        {
                            if (Conditions.InGameAndConnected)
                            {
                                logs("[WaitSickness] стопмув перед взлетом");
                                print("[WaitSickness] стопмув перед взлетом");
                                MovementManager.StopMove();
                            }

                            if (!Conditions.InGameAndConnected)
                            {
                                PauseOff();
                                logs("[WaitSickness] выход из цикла, запаузился в меню");
                                break;
                            }

                            sleep(500);
                        }

                        if (!me.IsFlying)
                        {
                            while (!MeIsOnFlyMount())
                            {
                                if (Conditions.InGameAndConnected)
                                {
                                    if (!me.GetMove && !me.InCombat)
                                    {
                                        print("[WaitSickness] садимся на флай маунта, (флаймаунт вкл: " + Setting.UseFlyingMount + ", название: " + Setting.FlyingMountName + ")");
                                        logs("[WaitSickness] садимся на флай маунта (флаймаунт вкл: " + Setting.UseFlyingMount + ", название: " + Setting.FlyingMountName + ")");
                                        SpellManager.CastSpellByNameLUA(Setting.FlyingMountName);
                                        sleep(rnd(1500, 2000) + latency);
                                        //sleep(500);
                                        //wManager.Wow.Bot.Tasks.MountTask.MountingFlyingMount(true, true);
                                        //Usefuls.WaitIsCasting();
                                    }
                                }

                                if (!Conditions.InGameAndConnected)
                                {
                                    PauseOff();
                                    logs("[WaitSickness] выход из цикла, запаузился в меню");
                                    break;
                                }

                                sleep(500);
                            }
                        }

                        if (MeIsOnFlyMount() && !me.IsFlying)
                        {
                            print("[WaitSickness] взлетаем на флай маунте");
                            logs("[WaitSickness] взлетаем на флай маунте");
                            Move.JumpOrAscend(Move.MoveAction.PressKey, rnd(2500, 7000));
                            vzleteli = true;
                        }

                        if (vzleteli)
                        {
                            var SickTime = me.BuffTimeLeft("Resurrection Sickness");
                            print("[WaitSickness] взлетели и ждем окончания сикнеса в паузе " + SickTime + " мс");
                            logs("[WaitSickness] взлетели и ждем окончания сикнеса в паузе " + SickTime + " мс");
                            PauseOn();
                            sleep(SickTime);
                            PauseOff();
                            Var.SetVar("HaveSickness", 0);
                        }
                    }

                    if (!Conditions.InGameAndConnected)
                    {
                        PauseOff();
                        logs("[WaitSickness] выход из цикла, запаузился в меню");
                        break;
                    }

                    sleep(500);
                }
            }

            // логаут при сикнесе в нелетных зонах //
            if ((!me.IsOutdoors || !Usefuls.IsFlyableArea || Subzone() == "Coilfang Reservoir" || Mapzone() == "Coilfang Reservoir" || Mapzone() == "Резервуар Кривого Клыка" || Subzone() == "Резервуар Кривого Клыка") && !Logging.Status.ToLower().Contains("town") && !MeIsInCityOrSanctuary())
            {
                var SickTime = me.BuffTimeLeft("Resurrection Sickness");
                sleep(100);
                PauseAndLogout();
                print("[WaitSickness] пауза в меню " + SickTime + " мс");
                logs("[WaitSickness] пауза в меню " + SickTime + " мс");
                sleep(SickTime);
                logs("[WaitSickness] сикнес закончился, оф паузы");
                EnterWorldAndOffPause();
            }

            if (me.HaveBuff("Resurrection Sickness") && me.InCombat && tar().IsValid && tar().InCombatWithMe)
            {
                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: кил вовки если начал драться под сикнесом");
                logs("[WaitSickness] кил вовки если начал драться под сикнесом");
                runlua("ForceQuit()");
            }

            if (!me.HaveBuff("Resurrection Sickness"))
            {
                Var.SetVar("HaveSickness", 0);
                PauseOff();
                logs("[WaitSickness] оф паузы, нет сикнеса, мы в игре, все ок");
                print("[WaitSickness] оф паузы, нет сикнеса, мы в игре, все ок");
            }

            if (!Conditions.InGameAndConnected)
            {
                Var.SetVar("HaveSickness", 0);
                PauseOff();
                logs("[сикнес чек] оф паузы, в меню после времени ожидания сикнеса");
                print("[сикнес чек] оф паузы, в меню после времени ожидания сикнеса");
            }
        }

        if (Var.GetVar<int>("HaveSickness") == 1 && Products.InPause && !me.HaveBuff("Resurrection Sickness") && Conditions.InGameAndConnected)
        {
            logs("[WaitSickness] оф паузы, если в игре и остался в паузе после сикнеса");
            logs("[WaitSickness] оф паузы, если в игре и остался в паузе после сикнеса");
            PauseOff();
            Var.SetVar("HaveSickness", 0);
        }
    }


    private void DetectStuckInWater()
    {
        // статистика долгого плавания //
        if (me.IsSwimming)
        {
            // плавцы в даларане //
            if (Mapzone() == "Dalaran" || Mapzone() == "Даларан")
            {
                Var.SetVar("SwimmingInDalaranCount", Var.GetVar<int>("SwimmingInDalaranCount") + ImportantFunctionsRandomCheckTime); // Var.GetVar<int>("SwimmingInDalaranCount") = секунды плавания в даларане

                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: плавец в даларане, плавает уже: " + Var.GetVar<int>("SwimmingInDalaranCount") + "+ сек, TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                print("[DetectStuckInWater] плавец в даларане, плавает уже: " + Var.GetVar<int>("SwimmingInDalaranCount") + "+ сек, TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                logs("[DetectStuckInWater] плавец в даларане, плавает уже: " + Var.GetVar<int>("SwimmingInDalaranCount") + "+ сек, TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                ScreenAlertVisualMedium("плавец в даларане\\nплавает уже: " + Var.GetVar<int>("SwimmingInDalaranCount") + "+ сек");
                MaximizeWowWindow();

                // кил процесса и чара плащами и если плавает 60+ сек //
                if (Var.GetVar<int>("SwimmingInDalaranCount") > 60)
                {
                    logs("[DetectStuckInWater] плавает в даларане " + Var.GetVar<int>("SwimmingInDalaranCount") + "+ сек, кил чара и процесса");
                    runlua("ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0)");
                    sleep(100);
                    //System.Diagnostics.Process.GetCurrentProcess().Kill();
                    System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
                }
            }

            // плавцы не в даларане //
            if (Mapzone() != "Dalaran")
            {
                Var.SetVar("SwimmingCount", Var.GetVar<int>("SwimmingCount") + ImportantFunctionsRandomCheckTime); // Var.GetVar<int>("SwimmingCount") = секунды плавания

                if (Var.GetVar<int>("SwimmingCount") > 600)
                {
                    SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: плавец в " + Mapzone() + " " + Subzone() + " (" + MyPosXYZ() + "), плавает уже: " + Var.GetVar<int>("SwimmingCount") + "+ сек, TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                    print("[DetectStuckInWater] плавец в " + Mapzone() + " " + Subzone() + " (" + MyPosXYZ() + "), плавает уже: " + Var.GetVar<int>("SwimmingCount") + "+ сек, TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                    logs("[DetectStuckInWater] плавец в " + Mapzone() + " " + Subzone() + " (" + MyPosXYZ() + "), плавает уже: " + Var.GetVar<int>("SwimmingCount") + "+ сек, TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + "");
                    ScreenAlertVisualMedium("плавец в " + Mapzone() + " " + Subzone() + "\\nплавает уже: " + Var.GetVar<int>("SwimmingCount") + "+ сек");
                    MaximizeWowWindow();
                }
            }
        }
    }

    private void DetectFlightStuckPoints()
    {
        // попытка детекта точки застрявания (наяривания кругов) в полете //
        if (me.IsFlying && me.GetMove && !Products.InPause)
        {
            if (me.Position.DistanceTo(FlyingStuckPoint) < 30)
            {

                Var.SetVar("OneFlyingPointCount", Var.GetVar<int>("OneFlyingPointCount") + ImportantFunctionsRandomCheckTime); // Var.GetVar<int>("OneFlyingPointCount") = секунды в одной точке в полете
                FramesUpdatePulse = DateTime.Now.AddSeconds(ImportantFunctionsRandomCheckTime);

                // застрявание в полете в одной точке в течении 30-60 сек, ничего не делаем, просто алерт //
                if (Var.GetVar<int>("OneFlyingPointCount") >= 30 && Var.GetVar<int>("OneFlyingPointCount") < 60)
                {
                    logs("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    print("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ",TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении");
                    //SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                }

                // застрявание в полете в одной точке в течении больше 60 сек, дизмаунт //
                if (Var.GetVar<int>("OneFlyingPointCount") >= 60 && Var.GetVar<int>("OneFlyingPointCount") < 200)
                {
                    logs("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении => дизмаунт, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    print("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении => дизмаунт, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ",TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении\\nдизмаунт");
                    SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении => дизмаунт, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                    //Screenshot("" + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении");
                    Dismount();
                    MaximizeWowWindow();
                }

                // застрявание в полете не в призраке в течении 3+ минут //
                if (Var.GetVar<int>("OneFlyingPointCount") >= 200 && !me.HaveBuff("Ghost"))
                {
                    logs("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении не в призраке => дизмаунт, кил процесса через 30 сек, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    print("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении не в призраке => дизмаунт, кил процесса через 30 сек, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ",TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете\\n в движении не в призраке\\nкил процесса через 30 сек");
                    SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении не в призраке => дизмаунт, кил процесса через 30 сек, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                    Dismount();
                    MaximizeWowWindow();
                    sleep(30000);
                    if(Usefuls.SubMapZoneName == "Icecrown Citadel")
                    {
                        logs("Кил плащами под цитаделью");
                        Setting.UseSpiritHealer = true;
                        runlua("ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0)");
                    }
                    if (!Products.InPause)
                        runlua("ForceQuit()");
                }

                // застрявание в полете в призраке в течении 3+ минут //
                if (Var.GetVar<int>("OneFlyingPointCount") >= 200 && me.HaveBuff("Ghost"))
                {
                    logs("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении в призраке => попытка запаузиться и выбраться, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    print("[DetectFlightStuckPoints] " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении в призраке => попытка запаузиться и выбраться, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ",TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете\\n в движении в призраке\\nпопытка запаузиться и выбраться");
                    SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении в призраке => дизмаунт, кил чара плащами через 30 сек, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                    MaximizeWowWindow();
                    PauseOn();
                    if (me.GetMove)
                        MovementManager.StopMove();
                    Move.JumpOrAscend(Move.MoveAction.PressKey, 5000);
                    int rndx = rnd(1, 4);
                    if (rndx == 1)
                        Move.Forward(Move.MoveAction.PressKey, 5000);
                    if (rndx == 2)
                        Move.StrafeLeft(Move.MoveAction.PressKey, 5000);
                    if (rndx == 3)
                        Move.StrafeRight(Move.MoveAction.PressKey, 5000);
                    if (me.GetMove)
                        MovementManager.StopMove();
                    PauseOff();
                    if (!Products.InPause && me.Position.DistanceTo(FlyingStuckPoint) < 30)
                    {
                        logs("" + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении в призраке => кил чара плащами, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneFlyingPointCount") + "+ сек в одной точке в полете в движении в призраке => кил чара плащами, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        runlua("ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0) ShowHelm(1) ShowHelm(0)");
                    }
                }
            }
        }
    }

    private void DetectGroundStuckPoints()
    {
        // попытка детекта точки застрявания на земле/в воде //
        if (!Fight.InFight && !me.IsFlying && !Products.InPause)
        {

            // не может достигнуть нужной точки, TryToUseFlySwimPathCount > 30 => кил процесса //
            if (Var.GetVar<int>("TryToUseFlySwimPathCount") >= 100 && Mapzone() != "The Steamvault" && Mapzone() != "The Slave Pens" && Mapzone() != "Паровое подземелье" && Mapzone() != "Узилище" && me.Position.DistanceTo(CantReachStuckPosition) < 15)
            {
                logs("[DetectGroundStuckPoints] не может достигнуть нужной точки, точка застрявания: " + CantReachStuckPosition + ", TryToUseFlySwimPathCount = " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", кил процесса, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                print("[DetectGroundStuckPoints] не может достигнуть нужной точки, точка застрявания: " + CantReachStuckPosition + ", TryToUseFlySwimPathCount = " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", кил процесса");
                SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: не может достигнуть нужной точки, TryToUseFlySwimPathCount = " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", кил процесса, место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                ScreenAlertVisualMedium("не может достигнуть нужной точки");
                //Screenshot("не может достигнуть нужной точки");
                sleep(1000);
                MaximizeWowWindow();
                //System.Diagnostics.Process.GetCurrentProcess().Kill();
                System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
            }

            if (me.Position.DistanceTo(GroundStuckPoint) < 15 && me.GetMove)
            {

                Var.SetVar("OneGroundPointCount", Var.GetVar<int>("OneGroundPointCount") + ImportantFunctionsRandomCheckTime); // Var.GetVar<int>("OneGroundPointCount") = секунды застрявания в одной наземной точке
                FramesUpdatePulse = DateTime.Now.AddSeconds(ImportantFunctionsRandomCheckTime);

                // 30+ сек в одной точке на земле/в воде в движении //
                if (Var.GetVar<int>("OneGroundPointCount") >= 30 && Var.GetVar<int>("OneGroundPointCount") < 60)
                {
                    logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении");
                }

                // 60+ сек в одной точке на земле/в воде и сложные застрявания/баги в движении //
                if (Var.GetVar<int>("OneGroundPointCount") >= 60)
                {
                    logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                    SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле/в воде в движении");
                    //Screenshot("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле или в воде в движении");
                    sleep(1000);
                    MaximizeWowWindow();

                    // 60+ сек в одной точке на земле/в воде: если не в падении и хс на кд меньше минуты => кастуем хс //
                    if (!Lua.LuaDoString<bool>("if IsFalling() == 1 then return true end") && ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) < 60000 && !me.IsDead)
                    {
                        while (Bag.GetContainerItemCooldown(6948) <= 60000)
                        {
                            if (Conditions.InGameAndConnected)
                            {
                                if (me.Position.DistanceTo2D(GroundStuckPoint) < 15 && !me.IsDead && !me.IsFlying)
                                {

                                    logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в движении на земле/в воде => пауза перед кастом хс");
                                    print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в движении на земле/в воде => пауза перед кастом хс");
                                    ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке\\nна земле/в воде\\nпауза перед кастом хс");
                                    PauseOn();

                                    if (Bag.GetContainerItemCooldown(6948) != 0)
                                    {
                                        print("[DetectGroundStuckPoints] застрявание: ждем кд хс в паузе (" + Bag.GetContainerItemCooldown(6948) + " мс)");
                                        logs("[DetectGroundStuckPoints] застрявание: ждем кд хс в паузе (" + Bag.GetContainerItemCooldown(6948) + " мс)");
                                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке\\nна земле/в воде\\nждем кд хс (" + Bag.GetContainerItemCooldown(6948) + " мс)");
                                        sleep(Bag.GetContainerItemCooldown(6948));
                                        print("[DetectGroundStuckPoints] застрявание: кд на хс нет (" + Bag.GetContainerItemCooldown(6948) + " мс), офаем паузу");
                                        logs("[DetectGroundStuckPoints] застрявание: кд на хс нет (" + Bag.GetContainerItemCooldown(6948) + " мс), офаем паузу");
                                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке\\nна земле/в воде\\nкд на хс нет (" + Bag.GetContainerItemCooldown(6948) + " мс)");
                                    }

                                    /*
                                    if (me.GetMove && Bag.GetContainerItemCooldown(6948) == 0)
                                    {
                                        print("[DetectGroundStuckPoints] застрявание: стопмув для каста хс");
                                        logs("[DetectGroundStuckPoints] застрявание: стопмув для каста хс");
                                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке\\nна земле/в воде\\nстопмув для каста хс");
                                        MovementManager.StopMove();
                                        sleep(500);
                                    }
                                    */

                                    if (!me.GetMove && !me.IsCast && Bag.GetContainerItemCooldown(6948) == 0)
                                    {

                                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в движении на земле/в воде => кастуем хс, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                                        logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в движении на земле/в воде => кастуем хс");
                                        print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в движении на земле/в воде => кастуем хс");
                                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке\\nна земле/в воде\\nкастуем хс");
                                        ItemsManager.UseItem(6948);
                                        sleep(15000);
                                        PauseOff();
                                    }
                                }

                                if (me.Position.DistanceTo2D(GroundStuckPoint) >= 15 || me.IsDead || me.IsFlying)
                                {
                                    PauseOff();
                                    print("[DetectGroundStuckPoints] застрявание: выход из цикла каста хс, выбрался из точки/погиб/заюзал хс");
                                    logs("[DetectGroundStuckPoints] застрявание: выход из цикла каста хс, выбрался из точки/погиб/заюзал хс");
                                    ScreenAlertVisualMedium("выбрался из точки/погиб/заюзал хс");
                                    break;
                                }
                            }

                            if (!Conditions.InGameAndConnected)
                            {
                                PauseOff();
                                logs("[DetectGroundStuckPoints] ожидание прогрузки загрузочного экрана после каста хс");
                                sleep(500);
                                Var.SetVar("LoadingCount", Var.GetVar<int>("LoadingCount") + 500);
                                if (Var.GetVar<int>("LoadingCount") >= 60000)
                                {
                                    logs("[DetectGroundStuckPoints] выход из цикла, больше минуты вне игры");
                                    Var.SetVar("LoadingCount", 0);
                                    break;
                                }
                            }

                            sleep(1000);
                        }

                        if (Bag.GetContainerItemCooldown(6948) > 60000)
                        {
                            PauseOff();
                            print("[DetectGroundStuckPoints] застрявание: хс на кд, значит бот заюзал его для выхода из застряваний и скорее всего оказался непонятно где => кил процесса");
                            logs("[DetectGroundStuckPoints] застрявание: хс на кд, значит бот заюзал его для выхода из застряваний и скорее всего оказался непонятно где => кил процесса");
                            ScreenAlertVisualMedium("хс на кд - кил процесса");
                            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: застрявание: хс на кд, значит бо заюзал его для выхода из застряваний и скорее всего оказался непонятно где => рестартим продукт, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                            //Products.ProductRestart();
                            wManager.Wow.Memory.WowMemory.Memory.GetProcess().CloseMainWindow();
                        }
                    }

                    // 60+ сек в одной точке в падении и в движении //
                    if (Lua.LuaDoString<bool>("if IsFalling() == 1 then return true end") && me.Position.DistanceTo2D(GroundStuckPoint) < 15 && !me.IsDead)
                    {
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в падении и в движении => 30 сек до ForceQuit(), TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в падении и в движении => 30 сек до ForceQuit(), TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в падении и в движении => 30 сек до ForceQuit(), TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в падении и в движении => 30 сек до ForceQuit()");
                        //Screenshot("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке в падении и в движении");
                        sleep(1000);
                        MaximizeWowWindow();
                        sleep(30000);
                        if (!Products.InPause)
                            runlua("ForceQuit()");
                    }

                    // 60+ сек в одной точке на земле/в воде: если хс кд и в воде //
                    if (me.IsSwimming && me.Position.DistanceTo2D(GroundStuckPoint) < 15 && !me.IsDead)
                    {
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле, хс кд и в воде => кил плащами, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле, хс кд и в воде => кил плащами, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                        print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле, хс кд и в воде => кил плащами, TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле, хс кд и в воде => кил плащами");
                        MaximizeWowWindow();
                        sleep(30000);
                        //Screenshot("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле, хс кд и в воде");
                        sleep(1000);
                        if (!Products.InPause && (Var.GetVar<int>("TryToUseFlySwimPathCount") > 50 || Var.GetVar<int>("TryingSomethingFunnyCount") > 50))
                        {
                            Var.SetVar("TryingSomethingFunnyCount", 0);
                            runlua("ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0) ShowCloak(1) ShowCloak(0)");
                        }
                    }

                    // 60+ сек в одной точке на земле в призраке в движении //
                    if (me.IsDead && me.HaveBuff("Ghost") && me.Position.DistanceTo2D(GroundStuckPoint) < 15)
                    {
                        SendDiscordMessageStucks("[" + Time() + "] [" + MyRealName + "]: " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле в призраке в движении => вызываем UseUnstuckAndSpiritHealer(), TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + ", место: " + MyPosXYZ() + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + ", профиль: " + ProfileName() + "");
                        logs("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле в призраке в движении => вызываем UseUnstuckAndSpiritHealer(), TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                        print("[DetectGroundStuckPoints] " + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле в призраке в движении => вызываем UseUnstuckAndSpiritHealer(), TryToUseFlySwimPathCount: " + Var.GetVar<int>("TryToUseFlySwimPathCount") + ", TryingSomethingFunnyCount: " + Var.GetVar<int>("TryingSomethingFunnyCount") + ", StuckResolverCount: " + Var.GetVar<int>("StuckResolverCount") + ", Statistics.Stucks: " + Statistics.Stucks + "");
                        ScreenAlertVisualMedium("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле в призраке в движении => вызываем UseUnstuckAndSpiritHealer()");
                        //Screenshot("" + Var.GetVar<int>("OneGroundPointCount") + "+ сек в одной точке на земле в призраке в движении");
                        sleep(1000);
                        UseUnstuckAndSpiritHealerWhenDead();
                    }

                } // end 60+ сек сложных застряваний
            }
        }
    }

    private void SetMounts()
    {

        // mounts //
        if (MountCheck < DateTime.Now)
        {

            MountCheck = DateTime.Now.AddSeconds(rnd(6, 10));

            if (/*(CurrentMountCountValue() != OldMountCountValue) || */Var.GetVar<int>("NeedToForceFullCheckMounts") == 1)
            {
                MountCountChangeCheckTime.AddSeconds(300);
                OldMountCountValue = CurrentMountCountValue();
                logs("количество имеющихся маунтов изменилось, проверяем новых через луа");
                print("количество имеющихся маунтов изменилось, проверяем новых через луа");
                ScanMountListsForKnownLUA();
            }

            if (KnownSlowFlyMountList.Count > 0 || KnownFastFlyMountList.Count > 0 || KnownSuperFastFlyMountList.Count > 0)
            {
                print("[SetMounts] изученный флай маунт есть");
                logs("[SetMounts] изученный флай маунт есть");
                HaveFlyMount = true;
            }

            if (KnownSlowGroundMountList.Count > 0 || KnownFastGroundMountList.Count > 0)
            {
                print("[SetMounts] изученный граунд маунт есть");
                logs("[SetMounts] изученный граунд маунт есть");
                HaveGroundMount = true;
            }

            // ground mounts //
            if (Skill.GetMaxValue(SkillLine.Riding) >= 75)
            {

                if (!Setting.UseMount && (KnownFastGroundMountList.Count > 0 || KnownSlowGroundMountList.Count > 0))
                    Setting.UseMount = true;

                if (Setting.UseMount)
                {
                    if (KnownFastGroundMountList.Count > 0)
                        Setting.GroundMountName = KnownFastGroundMountList[rnd(0, KnownFastGroundMountList.Count)];

                    if (KnownFastGroundMountList.Count == 0 && KnownSlowGroundMountList.Count > 0)
                        Setting.GroundMountName = KnownSlowGroundMountList[rnd(0, KnownSlowGroundMountList.Count)];
                }

                // flying mounts //
                if (Skill.GetMaxValue(SkillLine.Riding) >= 225)
                {

                    HaveColdweatherFlying = Lua.LuaDoString<bool>("if IsSpellKnown(54197) then return true end");

                    if (!Setting.UseFlyingMount && (KnownSuperFastFlyMountList.Count > 0 || KnownFastFlyMountList.Count > 0 || KnownSlowFlyMountList.Count > 0) && (Continent() != "Northrend" || (Continent() == "Northrend" && HaveColdweatherFlying)))
                    {
                        logs("[SetMounts] Northrend => HaveColdweatherFlying = " + HaveColdweatherFlying + " => UseFlyingMount = " + Setting.UseFlyingMount + "");
                        print("[SetMounts] Northrend => HaveColdweatherFlying = " + HaveColdweatherFlying + " => UseFlyingMount = " + Setting.UseFlyingMount + "");
                        Setting.UseFlyingMount = true;
                    }
                        

                    if (Setting.UseFlyingMount && Continent() == "Northrend" && !HaveColdweatherFlying)
                    {
                        Setting.UseFlyingMount = false;
                        Setting.FlyingMountName = "";
                        logs("[SetMounts] Northrend => HaveColdweatherFlying = " + HaveColdweatherFlying + " => UseFlyingMount = " + Setting.UseFlyingMount + "");
                        print("[SetMounts] Northrend => HaveColdweatherFlying = " + HaveColdweatherFlying + " => UseFlyingMount = " + Setting.UseFlyingMount + "");
                    }

                    if (Setting.UseFlyingMount)
                    {
                        if (!ImDruid)
                        {
                            if (KnownSuperFastFlyMountList.Count > 0)
                                Setting.FlyingMountName = KnownSuperFastFlyMountList[rnd(0, KnownSuperFastFlyMountList.Count)];

                            if (KnownSuperFastFlyMountList.Count == 0 && KnownFastFlyMountList.Count > 0)
                                Setting.FlyingMountName = KnownFastFlyMountList[rnd(0, KnownFastFlyMountList.Count)];

                            if (KnownSuperFastFlyMountList.Count == 0 && KnownFastFlyMountList.Count == 0 && KnownSlowFlyMountList.Count > 0)
                                Setting.FlyingMountName = KnownSlowFlyMountList[rnd(0, KnownSlowFlyMountList.Count)];
                        }

                        // druid flying bird //
                        if (ImDruid)
                        {
                            if (SpellManager.KnowSpell(33943) && !SpellManager.KnowSpell(40120) && Setting.FlyingMountName != "Flight Form" && (Skill.GetMaxValue(SkillLine.Riding) < 300 || KnownFastFlyMountList.Count == 0))
                                Setting.FlyingMountName = "Flight Form";

                            if (SpellManager.KnowSpell(40120) && Setting.FlyingMountName != "Swift Flight Form")
                                Setting.FlyingMountName = "Swift Flight Form";
                            else if (Skill.GetMaxValue(SkillLine.Riding) >= 300 && !SpellManager.KnowSpell(40120) && KnownFastFlyMountList.Count > 0)
                            {
                                Setting.FlyingMountName = KnownFastFlyMountList[rnd(0, KnownFastFlyMountList.Count)];
                            }

                        }
                    }
                }

                if ((Setting.UseMount || Setting.UseFlyingMount) && (Setting.GroundMountName != "" && Setting.FlyingMountName != ""))
                {
                    Setting.Save();
                    print("[SetMounts] настройки сохранены");
                    logs("[SetMounts] настройки сохранены");
                }
                else
                {
                    print("[SetMounts] настройки (возможно) не были сохранены");
                    logs("[SetMounts] настройки (возможно) не были сохранены");
                }

                print("[SetMounts] Setting.UseMount = " + Setting.UseMount + ", GroundMountName = " + Setting.GroundMountName + "");
                logs("[SetMounts] Setting.UseMount = " + Setting.UseMount + ", GroundMountName = " + Setting.GroundMountName + "");

                logs("[SetMounts] Setting.UseFlyingMount = " + Setting.UseFlyingMount + ", Setting.FlyingMountName = " + Setting.FlyingMountName + "");
                print("[SetMounts] Setting.UseFlyingMount = " + Setting.UseFlyingMount + ", Setting.FlyingMountName = " + Setting.FlyingMountName + "");

                if (CurrentMountCountValue() > 0 && ((!KnownFastGroundMountList.Contains(Setting.GroundMountName) && !KnownSlowGroundMountList.Contains(Setting.GroundMountName)) || !Setting.UseMount))
                {
                    print("[SetMounts] имеет скил вождения и граунд маунта но не прописал/не сохранил его");
                    logs("[SetMounts] имеет скил вождения и граунд маунта но не прописал/не сохранил его");
                    SendDiscordMessageDebug2("[" + Time() + "] [" + MyRealName + "]: имеет скил вождения и граунд маунта но не прописал/не сохранил его");
                }
            }
            Var.SetVar("NeedToForceFullCheckMounts", 0);
        }
    }


    // реакции когда игроки таргетят бота //
    private void TargetAlert()
    {
        if (MeIsTargettedBySomeone < DateTime.Now && GetPlayerThatTargetMe().IsValid)
        {
            MeIsTargettedBySomeone = DateTime.Now.AddSeconds(10);
            FramesUpdatePulse = DateTime.Now.AddSeconds(30);

            if (!Battleground.IsInBattleground())
            {
                // отсылка лога на таргетящего союзного игрока бг //
                if (!GetPlayerThatTargetMe().IsAttackable && !GetPlayerThatTargetMe().IsDead)
                {
                    ScreenAlertVisualTextOnly("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\nсоюзник таргетит\\n" + GetPlayerThatTargetMe().Name + " " + GetPlayerThatTargetMe().Guid + " " + GetPlayerThatTargetMe().Level + " лвл");
                    print("[TargetAlert] союзник таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + "");
                    logs("[TargetAlert] союзник таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + ", " + GetPlayerThatTargetMe().Level + " лвл " + GetPlayerThatTargetMe().WowRace + " " + GetPlayerThatTargetMe().WowClass + ", дистанция: " + (int)GetPlayerThatTargetMe().GetDistance + ", атакует: " + GetPlayerThatTargetMe().InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)GetPlayerThatTargetMe().Position.X + ", " + (int)GetPlayerThatTargetMe().Position.Y + ", " + (int)GetPlayerThatTargetMe().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");

                    if (!MeIsInCityOrNearToCityOrSanctuary()) // алерты в дискорд на таргет от союзника только если не в городе
                    {
                        SendDiscordMessageAllyTargetMe("[" + Time() + "] [" + MyRealName + "]: союзник таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + ", " + GetPlayerThatTargetMe().Level + " лвл " + GetPlayerThatTargetMe().WowRace + " " + GetPlayerThatTargetMe().WowClass + ", дистанция: " + (int)GetPlayerThatTargetMe().GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)GetPlayerThatTargetMe().Position.X + ", " + (int)GetPlayerThatTargetMe().Position.Y + ", " + (int)GetPlayerThatTargetMe().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    }
                }

                // отсылка лога на таргетящего вражеского игрока вне бг //
                if (GetPlayerThatTargetMe().IsAttackable)
                {
                    print("[TargetAlert] враг таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + "");
                    logs("[TargetAlert] враг таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + ", " + GetPlayerThatTargetMe().Level + " лвл " + GetPlayerThatTargetMe().WowRace + " " + GetPlayerThatTargetMe().WowClass + ", дистанция: " + (int)GetPlayerThatTargetMe().GetDistance + ", атакует: " + GetPlayerThatTargetMe().InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)GetPlayerThatTargetMe().Position.X + ", " + (int)GetPlayerThatTargetMe().Position.Y + ", " + (int)GetPlayerThatTargetMe().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    SendDiscordMessageEnemyTargetMeImportant("[" + Time() + "] [" + MyRealName + "]: враг таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + ", " + GetPlayerThatTargetMe().Level + " лвл " + GetPlayerThatTargetMe().WowRace + " " + GetPlayerThatTargetMe().WowClass + ", дистанция: " + (int)GetPlayerThatTargetMe().GetDistance + ", атакует: " + GetPlayerThatTargetMe().InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)GetPlayerThatTargetMe().Position.X + ", " + (int)GetPlayerThatTargetMe().Position.Y + ", " + (int)GetPlayerThatTargetMe().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");

                    if (!GetPlayerThatTargetMe().InCombatWithMe)
                        ScreenAlertVisualMedium("" + MyRealName + " " + MyFaction + " " + MyMoney() + "\\nвраг таргетит\\n" + GetPlayerThatTargetMe().Name + " " + GetPlayerThatTargetMe().Guid + " " + GetPlayerThatTargetMe().Level + " лвл");

                    //runlua("PlaySoundFile('Sound/Doodad/BellTollNightElf.wav')");
                }

                //AcceptBG();
                //JoinBG();
            }

            // отсылка лога на любого таргетящего игрока //
            SendDiscordMessageEnemyTargetMeALL("[" + Time() + "] [" + MyRealName + "]: нас таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + ", " + GetPlayerThatTargetMe().Level + " лвл " + GetPlayerThatTargetMe().WowRace + " " + GetPlayerThatTargetMe().WowClass + ", дистанция: " + (int)GetPlayerThatTargetMe().GetDistance + ", атакует: " + GetPlayerThatTargetMe().InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)GetPlayerThatTargetMe().Position.X + ", " + (int)GetPlayerThatTargetMe().Position.Y + ", " + (int)GetPlayerThatTargetMe().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
            print("[TargetAlert] нас таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + "");
            logs("[TargetAlert] нас таргетит: [" + GetPlayerThatTargetMe().Name + "], гуид " + GetPlayerThatTargetMe().Guid + ", " + GetPlayerThatTargetMe().Level + " лвл " + GetPlayerThatTargetMe().WowRace + " " + GetPlayerThatTargetMe().WowClass + ", дистанция: " + (int)GetPlayerThatTargetMe().GetDistance + ", атакует: " + GetPlayerThatTargetMe().InCombatWithMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)GetPlayerThatTargetMe().Position.X + ", " + (int)GetPlayerThatTargetMe().Position.Y + ", " + (int)GetPlayerThatTargetMe().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");

            if ((me.GetMove || Fight.InFight) && Lua.LuaDoString<bool>("if (GetFramerate() >= 31 or GetFramerate() < 29) then return true end"))
            {
                runlua("SetCVar('maxFPS','30') SetCVar('maxFPSBk','30')");
                print("[TargetAlert] 30 фпс если рядом палит игрок");
                logs("[TargetAlert] 30 фпс если рядом палит игрок");
            }
        }
       
        // таргетим игроков: если не в драке и нет цели или цель = дружеский игрок - запускаем таймер таргета цели 10 сек //
        if (RandomTargetAndAttackPlayersPulse < DateTime.Now && !Fight.InFight && !me.IsDead && (!tar().IsValid || (tar().Type == WoWObjectType.Player && !tar().IsAttackable)))
        {

            //print("таргетим игроков: если не в драке и нет цели, или цель = союзник игрок - запускаем таймер таргета цели 10 сек");
            RandomTargetAndAttackPlayersPulse = DateTime.Now.AddSeconds(10);

            if (GetPlayerThatTargetMe().IsValid && !Fight.InFight)
            {

                if (!Fight.InFight)
                {

                    // если таргетит цель враждебный игрок //
                    if (!Fight.InFight && GetPlayerThatTargetMe().IsAttackable && GetPlayerThatTargetMe().GetDistance < 30)
                    {
                        print("[TargetAlert] мы не в драке и игрок который таргетит враг (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") и его дистанция меньше 30... пауза 1 сек");
                        logs("[TargetAlert] мы не в драке и игрок который таргетит враг (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") и его дистанция меньше 30... пауза 1 сек");

                        sleep(rnd(500, 1500));

                        if (!Fight.InFight && (!tar().IsValid || (tar().Type == WoWObjectType.Player && !tar().IsAttackable)) && GetPlayerThatTargetMe().IsValid)
                        {

                            print("мы не в драке и нет цели или наша цель союзный игрок, и игрок который таргетил нас (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") существует после паузы и таргетит нас... таргетим его...");
                            logs("мы не в драке и нет цели или наша цель союзный игрок, и игрок который таргетил нас (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") существует после паузы и таргетит нас... таргетим его...");
                            Lua.RunMacroText("/target " + GetPlayerThatTargetMe().Name + "");

                            print("пауза 1 сек перед следующим шагом для проверки реакции");
                            logs("пауза 1 сек перед следующим шагом для проверки реакции");
                            sleep(rnd(500, 1500));

                            if (GetPlayerThatTargetMe().IsValid && !Fight.InFight && !MeIsInCityOrNearToCityOrSanctuary() && GetPlayerThatTargetMe().IsAttackable && !me.IsFlying && GetPlayerThatTargetMe().IsMyTarget && GetPlayerThatTargetMe().IsAlive && ((GetPlayerThatTargetMe().MaxHealth - me.MaxHealth <= 5000) || (me.Health > GetPlayerThatTargetMe().Health)) && me.Level >= GetPlayerThatTargetMe().Level && !GetPlayerThatTargetMe().HaveBuff("Resurrection Sickness"))
                            {

                                print("[TargetAlert] мы не в драке и наш лвл выше или равен чем лвл таргетящего нас игрока (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") и наше хп превосходит его хп и наша цель это таргетящий нас враждебный игрок, который существует после паузы и жив");
                                logs("[TargetAlert] мы не в драке и наш лвл выше или равен чем лвл таргетящего нас игрока (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") и наше хп превосходит его хп и наша цель это таргетящий нас враждебный игрок, который существует после паузы и жив");

                                if (!Fight.InFight && MeIsMeleeClass && !GetPlayerThatTargetMe().IsFlying && GetPlayerThatTargetMe().GetDistanceZ < 5 && GetPlayerThatTargetMe().GetDistance < 20)
                                {
                                    print("[TargetAlert] если цель в хорошей дистанции и не летает - атакуем! (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") (мы - милишник)");
                                    logs("[TargetAlert] если цель в хорошей дистанции и не летает - атакуем! (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") (мы - милишник)");
                                    //Fight.StartFight(GetPlayerThatTargetMe().Guid);
                                    sleep(100);
                                }

                                if (!Fight.InFight && MeIsRangeClass && GetPlayerThatTargetMe().GetDistanceZ < 30 && GetPlayerThatTargetMe().GetDistance < 30)
                                {
                                    print("[TargetAlert] если цель в хорошей дистанции - атакуем! (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") (мы - рдд)");
                                    logs("[TargetAlert] если цель в хорошей дистанции - атакуем! (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") (мы - рдд)");
                                    //Fight.StartFight(GetPlayerThatTargetMe().Guid);
                                    sleep(100);
                                }
                            }
                        }
                    }

                    // если нас таргетит труп игрока или союзный игрок //
                    else if (!Fight.InFight && !tar().IsValid && !GetPlayerThatTargetMe().IsAttackable && GetPlayerThatTargetMe().GetDistance < 50)
                    {

                        if (!Fight.InFight && MeIsInCityOrSanctuary())
                        {
                            print("[TargetAlert] если нас таргетит труп игрока или союзный игрок - пауза 3-20 сек перед таргетингом");
                            logs("[TargetAlert] если нас таргетит труп игрока или союзный игрок - пауза 3-20 сек перед таргетингом");
                            sleep(rnd(3000, 20000));
                        }

                        if ((!Fight.InFight && GetPlayerThatTargetMe().IsValid && !GetPlayerThatTargetMe().IsAttackable && (!tar().IsValid || (tar().Type == WoWObjectType.Player && !tar().IsAttackable))))
                        {
                            if (!Fight.InFight && MeIsInCityOrSanctuary() && !TraceLine.TraceLineGo(GetPlayerThatTargetMe().Position) && GetPlayerThatTargetMe().GetDistance < 20)
                            {
                                TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer();
                                logs("[TargetAlert] некто из союзных игроков на нас палит (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + "), таргетим любого возможного игрока в если в городе");
                                print("[TargetAlert] некто из союзных игроков на нас палит (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + "), таргетим любого возможного игрока в если в городе");
                                sleep(100);
                            }

                            if (!Fight.InFight && !MeIsInCityOrSanctuary() && GetPlayerThatTargetMe().IsValid && !GetPlayerThatTargetMe().IsAttackable && !TraceLine.TraceLineGo(GetPlayerThatTargetMe().Position) && GetPlayerThatTargetMe().GetDistance < 20 && !me.IsFlying)
                            {
                                sleep(rnd(1000, 10000));
                                if ((!Fight.InFight && !me.IsFlying && GetPlayerThatTargetMe().IsValid && !GetPlayerThatTargetMe().IsAttackable && (!tar().IsValid || (tar().Type == WoWObjectType.Player && !tar().IsAttackable))))
                                {
                                    Lua.RunMacroText("/target " + GetPlayerThatTargetMe().Name + "");
                                    logs("[TargetAlert] некто из союзных игроков на нас палит (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + "), таргетим его если не летим");
                                    print("[TargetAlert] некто из союзных игроков на нас палит (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + "), таргетим его если не летим");
                                    sleep(100);
                                }
                            }

                            if (!Fight.InFight && !MeIsInCityOrSanctuary() && GetPlayerThatTargetMe().IsValid && !TraceLine.TraceLineGo(GetPlayerThatTargetMe().Position) && !GetPlayerThatTargetMe().IsAttackable && GetPlayerThatTargetMe().GetDistance < 50 && me.IsFlying)
                            {
                                sleep(rnd(5000, 15000));
                                if ((!Fight.InFight && me.IsFlying && GetPlayerThatTargetMe().IsValid && !GetPlayerThatTargetMe().IsAttackable && (!tar().IsValid || (tar().Type == WoWObjectType.Player && !tar().IsAttackable))))
                                {
                                    Lua.RunMacroText("/target " + GetPlayerThatTargetMe().Name + "");
                                    logs("[TargetAlert] некто из союзных игроков на нас палит (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + "), таргетим его когда летим");
                                    print("[TargetAlert] некто из союзных игроков на нас палит (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + "), таргетим его когда летим");
                                    sleep(100);
                                }
                            }

                            if (!Fight.InFight && GetPlayerThatTargetMe().IsValid && !GetPlayerThatTargetMe().IsAttackable && rnd(1, 3) == 2)
                            {
                                print("[TargetAlert] клиртаргет прокнул на союзного игрока (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") с шансом 50%");
                                logs("[TargetAlert] клиртаргет прокнул на союзного игрока (" + GetPlayerThatTargetMe().Name + ", гуид " + GetPlayerThatTargetMe().Guid + ") с шансом 50%");
                                if (!Fight.InFight && MeIsInCityOrSanctuary() || me.IsFlying)
                                {
                                    print("[TargetAlert] пауза перед клиртаргетом 1-20 сек в городе или в полете");
                                    logs("[TargetAlert] пауза перед клиртаргетом 1-20 сек в городе или в полете");
                                    sleep(rnd(1000, 20000));
                                }
                                if (!Fight.InFight && !MeIsInCityOrSanctuary() || !me.IsFlying)
                                {
                                    print("[TargetAlert] пауза перед клиртаргетом 1-5 сек если не в городе");
                                    logs("[TargetAlert] пауза перед клиртаргетом 1-5 сек если не в городе");
                                    sleep(rnd(1000, 5000));
                                }
                                if (!Fight.InFight && GetPlayerThatTargetMe().IsValid && !GetPlayerThatTargetMe().IsAttackable)
                                {
                                    print("[TargetAlert] клиртаргет");
                                    logs("[TargetAlert] клиртаргет");
                                    Interact.ClearTarget();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // leveling talents //
    private void LearnTalents()
    {
        if (TalentsPulse < DateTime.Now && Lua.LuaDoString<bool>("if GetUnspentTalentPoints() > 0 then return true end"))
        {
            TalentsPulse = DateTime.Now.AddSeconds(rnd(200, 300));

            if (ImPal)
            {
                // ret pal talents //
                logs("[LearnTalents] учим талы, паладин");
                print("[LearnTalents] учим талы, паладин");
                runlua(@"
				    if (UnitLevel('player') == 10) then LearnTalent(3,1)
				    else if (UnitLevel('player') == 11) then LearnTalent(3,1)
				    else if (UnitLevel('player') == 12) then LearnTalent(3,1)
				    else if (UnitLevel('player') == 13) then LearnTalent(3,1)
				    else if (UnitLevel('player') == 14) then LearnTalent(3,1)
				    else if (UnitLevel('player') == 15) then LearnTalent(3,3)
				    else if (UnitLevel('player') == 16) then LearnTalent(3,3)
				    else if (UnitLevel('player') == 17) then LearnTalent(3,5)
				    else if (UnitLevel('player') == 18) then LearnTalent(3,5)
				    else if (UnitLevel('player') == 19) then LearnTalent(3,4)
				    else if (UnitLevel('player') == 20) then LearnTalent(3,8)
				    else if (UnitLevel('player') == 21) then LearnTalent(3,9)
				    else if (UnitLevel('player') == 22) then LearnTalent(3,9)
				    else if (UnitLevel('player') == 23) then LearnTalent(3,7)
				    else if (UnitLevel('player') == 24) then LearnTalent(3,7)
				    else if (UnitLevel('player') == 25) then LearnTalent(3,11)
				    else if (UnitLevel('player') == 26) then LearnTalent(3,11)
				    else if (UnitLevel('player') == 27) then LearnTalent(3,11)
				    else if (UnitLevel('player') == 28) then LearnTalent(3,12)
				    else if (UnitLevel('player') == 29) then LearnTalent(3,12)
				    else if (UnitLevel('player') == 30) then LearnTalent(3,14)
				    else if (UnitLevel('player') == 31) then LearnTalent(3,12)
				    else if (UnitLevel('player') == 32) then LearnTalent(3,13)
				    else if (UnitLevel('player') == 33) then LearnTalent(3,13)
				    else if (UnitLevel('player') == 34) then LearnTalent(3,13)
				    else if (UnitLevel('player') == 35) then LearnTalent(3,7)
				    else if (UnitLevel('player') == 36) then LearnTalent(3,7)
				    else if (UnitLevel('player') == 37) then LearnTalent(3,7)
				    else if (UnitLevel('player') == 38) then LearnTalent(3,15)
				    else if (UnitLevel('player') == 39) then LearnTalent(3,15)
				    else if (UnitLevel('player') == 40) then LearnTalent(3,19)
				    else if (UnitLevel('player') == 41) then LearnTalent(3,19)
				    else if (UnitLevel('player') == 42) then LearnTalent(3,19)
				    else if (UnitLevel('player') == 43) then LearnTalent(3,17)
				    else if (UnitLevel('player') == 44) then LearnTalent(3,17)
				    else if (UnitLevel('player') == 45) then LearnTalent(3,18)
				    else if (UnitLevel('player') == 46) then LearnTalent(3,20)
				    else if (UnitLevel('player') == 47) then LearnTalent(3,20)
				    else if (UnitLevel('player') == 48) then LearnTalent(3,20)
				    else if (UnitLevel('player') == 49) then LearnTalent(3,15)
				    else if (UnitLevel('player') == 50) then LearnTalent(3,23)
				    else if (UnitLevel('player') == 51) then LearnTalent(3,24)
				    else if (UnitLevel('player') == 52) then LearnTalent(3,24)
				    else if (UnitLevel('player') == 53) then LearnTalent(3,24)
				    else if (UnitLevel('player') == 54) then LearnTalent(3,2)
				    else if (UnitLevel('player') == 55) then LearnTalent(3,2)
				    else if (UnitLevel('player') == 56) then LearnTalent(3,2)
				    else if (UnitLevel('player') == 57) then LearnTalent(3,2)
				    else if (UnitLevel('player') == 58) then LearnTalent(3,2)
				    else if (UnitLevel('player') == 59) then LearnTalent(3,25)
				    else if (UnitLevel('player') == 60) then LearnTalent(3,26)
				    else if (UnitLevel('player') == 61) then LearnTalent(2,2)
				    else if (UnitLevel('player') == 62) then LearnTalent(2,2)
				    else if (UnitLevel('player') == 63) then LearnTalent(2,2)
				    else if (UnitLevel('player') == 64) then LearnTalent(2,2)
				    else if (UnitLevel('player') == 65) then LearnTalent(2,2)
				    else if (UnitLevel('player') == 66) then LearnTalent(2,5)
				    else if (UnitLevel('player') == 67) then LearnTalent(2,5)
				    else if (UnitLevel('player') == 68) then LearnTalent(2,5)
				    else if (UnitLevel('player') == 69) then LearnTalent(2,5)
				    else if (UnitLevel('player') == 70) then LearnTalent(2,5)
				    else if (UnitLevel('player') == 71) then LearnTalent(2,7)
				    else if (UnitLevel('player') == 72) then LearnTalent(2,7)
				    else if (UnitLevel('player') == 73) then LearnTalent(2,7)
				    else if (UnitLevel('player') == 74) then LearnTalent(3,21)
				    else if (UnitLevel('player') == 75) then LearnTalent(3,21)
				    else if (UnitLevel('player') == 76) then LearnTalent(2,6)
				    else if (UnitLevel('player') == 77) then LearnTalent(3,4)
				    else if (UnitLevel('player') == 78) then LearnTalent(2,6)
				    else if (UnitLevel('player') == 79) then LearnTalent(2,9)
				    else if (UnitLevel('player') == 80) then LearnTalent(2,9)
				    end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end");
            }

            if (ImDK)
            {
                if (Lua.LuaDoString<bool>(@"for k=1,GetNumTalents(1) do name,_,_,_,currentRank=GetTalentInfo(1,k,false,false,GetActiveTalentGroup()) if name == 'Heart Strike' and currentRank > 0 then return true end end"))
                {
                    // блад дк 1 продолжение талов //
                    logs("[LearnTalents] учим талы, блад дк");
                    print("[LearnTalents] учим талы, блад дк");
                    Lua.LuaDoString(@"
                    if (UnitLevel('player') == 66) then LearnTalent(1,28) end
                    if (UnitLevel('player') == 67) then LearnTalent(3,3) end
                    if (UnitLevel('player') == 68) then LearnTalent(3,3) end
                    if (UnitLevel('player') == 69) then LearnTalent(3,3) end
                    if (UnitLevel('player') == 70) then LearnTalent(3,3) end
                    if (UnitLevel('player') == 71) then LearnTalent(3,3) end
                    if (UnitLevel('player') == 72) then LearnTalent(3,4) end
                    if (UnitLevel('player') == 73) then LearnTalent(3,4) end
                    if (UnitLevel('player') == 74) then LearnTalent(3,5) end
                    if (UnitLevel('player') == 75) then LearnTalent(3,5) end
                    if (UnitLevel('player') == 76) then LearnTalent(3,5) end
                    if (UnitLevel('player') == 77) then LearnTalent(1,24) end
                    if (UnitLevel('player') == 78) then LearnTalent(1,24) end
                    if (UnitLevel('player') == 79) then LearnTalent(1,24) end
                    if (UnitLevel('player') == 80) then LearnTalent(1,5) end
                    ");
                }

                if (Lua.LuaDoString<bool>(@"for k=1,GetNumTalents(2) do name,_,_,_,currentRank=GetTalentInfo(2,k,false,false,GetActiveTalentGroup()) if name == 'Frost Strike' and currentRank > 0 then return true end end"))
                {
                    // фрост 1 продолжение талов //
                    Lua.LuaDoString(@"
                    if (UnitLevel('player') == 66) then LearnTalent(1,3) end
                    if (UnitLevel('player') == 67) then LearnTalent(1,5) end
                    if (UnitLevel('player') == 68) then LearnTalent(1,5) end
                    if (UnitLevel('player') == 69) then LearnTalent(1,5) end
                    if (UnitLevel('player') == 70) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 71) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 72) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 73) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 74) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 75) then LearnTalent(1,8) end
                    if (UnitLevel('player') == 76) then LearnTalent(1,7) end
                    if (UnitLevel('player') == 77) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 78) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 79) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 80) then LearnTalent(2,12) end
                    ");
                }

                if (Lua.LuaDoString<bool>(@"for k=1,GetNumTalents(3) do name,_,_,_,currentRank=GetTalentInfo(3,k,false,false,GetActiveTalentGroup()) if name == 'Summon Gargoyle' and currentRank > 0 then return true end end"))
                {
                    // адк 1 продолжение талов (с гаргой) //
                    logs("[LearnTalents] учим талы, адк с гаргой");
                    print("[LearnTalents] учим талы, адк с гаргой");
                    Lua.LuaDoString(@"
                    if (UnitLevel('player') == 66) then LearnTalent(1,3) end
                    if (UnitLevel('player') == 67) then LearnTalent(1,3) end
                    if (UnitLevel('player') == 68) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 69) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 70) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 71) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 72) then LearnTalent(1,4) end
                    if (UnitLevel('player') == 73) then LearnTalent(1,6) end
                    if (UnitLevel('player') == 74) then LearnTalent(1,6) end
                    if (UnitLevel('player') == 75) then LearnTalent(1,7) end
                    if (UnitLevel('player') == 76) then LearnTalent(1,8) end
                    if (UnitLevel('player') == 77) then LearnTalent(1,5) end
                    if (UnitLevel('player') == 78) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 79) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 80) then LearnTalent(1,10) end
                    ");
                }

                if (Lua.LuaDoString<bool>(@"for k=1,GetNumTalents(3) do name,_,_,_,currentRank=GetTalentInfo(3,k,false,false,GetActiveTalentGroup()) if name == 'Summon Gargoyle' and currentRank == 0 then return true end end") && Lua.LuaDoString<bool>(@"for k=1,GetNumTalents(3) do name,_,_,_,currentRank=GetTalentInfo(3,k,false,false,GetActiveTalentGroup()) if name == 'Scourge Strike' and currentRank > 0 then return true end end"))
                {
                    // адк 2 продолжение талов (без гарги) //
                    logs("[LearnTalents] учим талы, адк без гарги");
                    print("[LearnTalents] учим талы, адк без гарги");
                    Lua.LuaDoString(@"
                    if (UnitLevel('player') == 66) then LearnTalent(1,7) end
                    if (UnitLevel('player') == 67) then LearnTalent(1,5) end
                    if (UnitLevel('player') == 68) then LearnTalent(1,8) end
                    if (UnitLevel('player') == 69) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 70) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 71) then LearnTalent(1,10) end
                    if (UnitLevel('player') == 72) then LearnTalent(3,27) end
                    if (UnitLevel('player') == 73) then LearnTalent(3,30) end
                    if (UnitLevel('player') == 74) then LearnTalent(3,30) end
                    if (UnitLevel('player') == 75) then LearnTalent(3,30) end
                    if (UnitLevel('player') == 76) then LearnTalent(3,30) end
                    if (UnitLevel('player') == 77) then LearnTalent(3,30) end
                    if (UnitLevel('player') == 78) then LearnTalent(3,23) end
                    if (UnitLevel('player') == 79) then LearnTalent(3,23) end
                    if (UnitLevel('player') == 80) then LearnTalent(3,31) end
                    ");
                }
            }
        }
    }

    // gm checks: debuffs/big scale/big speed //
    private void GMCheck()
    {
        if (NextGMCheck < DateTime.Now && !Battleground.IsInBattleground())
        {

            NextGMCheck = DateTime.Now.AddSeconds(rnd(3, 5));

            // known gm debuffs //
            /*if (me.HaveBuff(18209) || me.HaveBuff(18210) || me.HaveBuff(692) || me.HaveBuff(38505) || me.HaveBuff(39258) || me.HaveBuff(35182) || me.HaveBuff(9454) || me.HaveBuff(57756) || me.HaveBuff(23775) || me.HaveBuff(66830) || me.HaveBuff(58540) || me.HaveBuff(48278) || me.HaveBuff(46367) || me.HaveBuff(47543) || me.HaveBuff(30231) || me.HaveBuff(36877) || me.HaveBuff(1852) || me.HaveBuff(42201) || me.HaveBuff(47591) || me.HaveBuff(63991) || me.HaveBuff(41083) || me.HaveBuff(56756) || me.HaveBuff(31797) || me.HaveBuff(39594))
            {
                MaximizeWowWindow();
                SendDiscordMessageGMDebuff("[" + Time() + "] [" + Environment.MachineName + "] [" + MyRealName + "]: gm debuff, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                logs("[GMCheck] gm debuff");
                runlua("PlaySoundFile('Sound/Doodad/DwarfHorn.wav')");
                runlua("BasicScriptErrors:SetScale(6) if BasicScriptErrors:IsShown() then BasicScriptErrors:Hide() end BasicScriptErrorsText:SetTextColor(1, 1, 0, 1) BasicScriptErrorsText:SetFont(GameFontNormal:GetFont(), 50, 'OUTLINE, THICKOUTLINE') message('gm debuff')");
                sleep(rnd(3000, 10000));
                logs("[GMCheck] pause on: gm debuff");
                print("[GMCheck] pause on: gm debuff");
                PauseOn();
                sleep(rnd(30000, 100000));
                PauseOff();
                logs("[GMCheck] pause off: gm debuff");
                print("[GMCheck] pause off: gm debuff");
                PauseOff();
            }*/

            // ghost debuff and alive //
            if (me.HaveBuff(8326) && me.Health > 1)
            {
                //MaximizeWowWindow();
                SendDiscordMessageGMDebuff("[" + Time() + "] [" + MyRealName + "]: ghost debuff and alive, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                logs("[GMCheck] ghost debuff and alive");
                runlua("PlaySoundFile('Sound/Doodad/DwarfHorn.wav')");
                runlua("BasicScriptErrors:SetScale(6) if BasicScriptErrors:IsShown() then BasicScriptErrors:Hide() end BasicScriptErrorsText:SetTextColor(1, 1, 0, 1) BasicScriptErrorsText:SetFont(GameFontNormal:GetFont(), 50, 'OUTLINE, THICKOUTLINE') message('ghost debuff and alive')");
                sleep(rnd(3000, 10000));
                logs("[GMCheck] pause on: ghost debuff and alive");
                print("[GMCheck] pause on: ghost debuff and alive");
                PauseOn();
                sleep(rnd(30000, 100000));
                PauseOff();
                logs("[GMCheck] pause off: ghost debuff and alive");
                print("[GMCheck] pause off: ghost debuff and alive");
            }

            // big scale //
            if (me.Scale >= 2f)
            {
                
                //var uda = ObjectManager.GetObjectWoWUnit().FirstOrDefault(u => u.Reaction == Reaction.Hostile && u.Name != "World Trigger" && u.IsAlive && u.Position.DistanceTo(new Vector3(126.7602f, -2.404927f, -20.52785f)) < 90 && u.Position.Z <= ObjectManager.Me.Position.Z + 2.5);


                if ((Usefuls.ContinentId == (int)ContinentId.Sunwell5ManFix && ObjectManager.Me.HaveBuff("Energy Feedback")) || !Conditions.InGameAndConnected)
                {

                    return;
                }
                MaximizeWowWindow();
                SendDiscordMessageBigScale("[" + Time() + "] [" + MyRealName + "]: big scale, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                logs("[GMCheck] big scale (scale: " + me.Scale + ")");
                runlua("PlaySoundFile('Sound/Doodad/DwarfHorn.wav')");
                runlua("BasicScriptErrors:SetScale(6) if BasicScriptErrors:IsShown() then BasicScriptErrors:Hide() end BasicScriptErrorsText:SetTextColor(1, 1, 0, 1) BasicScriptErrorsText:SetFont(GameFontNormal:GetFont(), 50, 'OUTLINE, THICKOUTLINE') message('big scale')");
                sleep(rnd(3000, 10000));
                logs("[GMCheck] pause on: big scale");
                print("[GMCheck] pause on: big scale");
                PauseOn();
                sleep(rnd(30000, 100000));
                PauseOff();
                logs("[GMCheck] pause off: big scale");
                print("[GMCheck] pause off: big scale");
            }

            // big speed //
            /* 			
                        if (!me.IsOnTaxi && !me.InTransport && ((me.SpeedMoving > 15f && me.SpeedMoving != 0 && !MeIsMountedOrHaveDruidForm() && !me.IsFlying && Lua.LuaDoString<int>("return IsFalling()") == 0 && !me.HaveBuff(20584) && !tar().HaveBuff("Charge Stun") && !tar().HaveBuff("Intercept") && !tar().HaveBuff("Charge Stun") && !tar().HaveBuff("Feral Charge Effect") && !tar().HaveBuff("Dazed") && !ObjectManager.GetObjectWoWPlayer().Any(u => u.WowClass == WoWClass.DeathKnight && u.InCombatWithMe)) || (me.SpeedMoving >= 35f && (MeIsMountedOrHaveDruidForm() || me.IsFlying))))
             */

            if (me.SpeedMoving >= 35 && !me.IsOnTaxi && !me.InTransport && !tar().HaveBuff("Dazed") && !me.HaveBuff(20584) && !tar().HaveBuff("Charge Stun") && !tar().HaveBuff("Intercept") && !tar().HaveBuff("Charge Stun") && !tar().HaveBuff("Feral Charge Effect") && !tar().HaveBuff("Dazed"))
            {
                SendDiscordMessageBigSpeed("[" + Time() + "] [" + MyRealName + "]: big speed, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                //runlua("PlaySoundFile('Sound/Doodad/TrollDrumLoop1.wav') BasicScriptErrors:SetScale(6) if BasicScriptErrors:IsShown() then BasicScriptErrors:Hide() end BasicScriptErrorsText:SetTextColor(1, 1, 0, 1) BasicScriptErrorsText:SetFont(GameFontNormal:GetFont(), 50, 'OUTLINE, THICKOUTLINE') message('big speed')");
                sleep(rnd(3000, 10000));
                logs("[GMCheck] pause on: big speed");
                print("[GMCheck] pause on: big speed");
                PauseOn();
                sleep(rnd(30000, 100000));
                PauseOff();
                logs("[GMCheck] pause off: big speed");
                print("[GMCheck] pause off: big speed");
            }
        }
    }

    private void InitializeTrashHPFoodList()
    {
        if (GetLocale.Contains("en"))
        {
            TrashHPFoodList = new List<string>(new string[]
            {
                "Pungent Seal Whey",
                "Purified Draenic Water",
                "Filtered Draenic Water",
            });
        }

        if (GetLocale == "ruRU")
        {
            TrashHPFoodList = new List<string>(new string[]
            {
                "Едкая тюленья сыворотка",
                "Очищенная дренейская вода",
                "Фильтрованная дренейская вода",
            });
        }
    }

    private void InitializeTrashManaDrinkList()
    {
        if (GetLocale.Contains("en"))
        {
            TrashManaDrinkList = new List<string>(new string[]
            {
                "Fillet of Icefin",
                "Honey-Spiced Lichen",
                "Smoked Talbuk Venison",
                "Sunspring Carp",
            });
        }

        if (GetLocale == "ruRU")
        {
            TrashManaDrinkList = new List<string>(new string[]
            {
                "Филе ледоспина",
                "Лишайник с медом",
                "Копченый дикий талбук",
                "Карп из Солнечного Ключа",
                "Искрящийся морозный гриб",
            });
        }
    }

    private void InitializeTrashFishList()
    {
        if (GetLocale.Contains("en"))
        {
            TrashFishList = new List<string>(new string[]
            {
                "Tightly Sealed Trunk",
                "Raw Slitherskin Mackerel",
                "Raw Rainbow Fin Albacore",
                "Raw Sagefish",
                "Rumsey Rum Light",
                "Rumsey Rum Dark",
                "Small Chest",
                "Dented Crate",
                "Raw Loch Frenzy",
                "Raw Longjaw Mud Snapper",
                "Raw Bristle Whisker Catfish",
                "Raw Brilliant Smallfish",
                "26 Pound Catfish",
                "Lesser Healing Potion",
                "Lesser Mana Potion",
                "Message in a Bottle",
                "19 Pound Catfish",
                "22 Pound Catfish",
                "32 Pound Catfish",
                "17 Pound Catfish",
                "Bloated Mud Snapper",
            });
        }

        if (GetLocale == "ruRU")
        {
            TrashFishList = new List<string>(new string[]
            {
                "Надежно запечатанный сундучок",
                "Сырая скользкокожая скумбрия",
                "Сырой радужный тунец",
                "Сырой шалфокунь",
                "Белый ром Ромси",
                "Черный ром Ромси",
                "Маленький сундук",
                "Продавленный ящик",
                "Сырая озерная бешенка",
                "Сырой острозубый илистый луциан",
                "Сырая ощетиненная зубатка",
                "Сырая блестящая рыбка",
                "26-фунтовая зубатка",
                "Маленький флакон с лечебным зельем",
                "Маленький флакон с зельем маны",
                "Послание в бутылке",
                "19-фунтовая зубатка",
                "22-фунтовая зубатка",
                "32-фунтовая зубатка",
                "17-фунтовая зубатка",
                "Тухлый илистый луциан",
            });
        }
    }

    private void InitializeDungeonTrashItemsList()
    {
        if (GetLocale.Contains("en"))
        {
            DungeonTrashItemsList = new List<string>(new string[]
            {
                "Decaying Leather Bracers",
                "Decaying Leather",
                "Decaying Leather Gloves",
                "Dilapidated Cloth Bracers",
                "Dilapidated Cloth Gloves",
                "Corroded Mail Belt",
                "Dilapidated Cloth Hat",
                "Dilapidated Cloth Shoulderpads",
                "Corroded Mail Bracers",
                "Corroded Mail Gloves",
                "Corroded Mail Shoulderpads",
                "Corroded Mail Boots",
                "Deteriorating Plate Belt",
                "Deteriorating Plate Gloves",
                "Deteriorating Plate Bracers",
                "Deteriorating Plate Shoulderpads",
                "Dilapidated Cloth Boots",
                "Dilapidated Cloth Belt",
                "Dilapidated Cloth Pants",
                "Dilapidated Cloth Vest",
                "Nightcrawlers",
                "Frayed Abomination Stitching",
                "Miniature Cannon Balls",
                "Arcane Dust",
                "Infinite Dust",
                "Fel Iron Bar",
                "Abyss Crystal",
                "Super Healing Potion",
                "Super Mana Potion",
                "Major Healing Potion",
            });
        }

        if (GetLocale == "ruRU")
        {
            DungeonTrashItemsList = new List<string>(new string[]
            {
                "Истлевшие кожаные наручи",
                "Истлевшие кожаные перчатки",
                "Ветхие матерчатые наручи",
                "Ветхие матерчатые перчатки",
                "Проржавевший кольчужный пояс",
                "Ветхая матерчатая шляпа",
                "Ветхие матерчатые наплечные пластины",
                "Проржавевшие кольчужные наручи",
                "Проржавевшие кольчужные перчатки",
                "Проржавевшие кольчужные наплечные пластины",
                "Проржавевшие кольчужные сапоги",
                "Обветшавший латный пояс",
                "Обветшавшие перчатки",
                "Обветшавшие наручи",
                "Обветшавшие наплечные пластины",
                "Ветхие матерчатые сапоги",
                "Ветхий матерчатый пояс",
                "Ветхие матерчатые штаны",
                "Ветхий матерчатый жилет",
                "Выползки",
                "Истлевшая шовная нить поганища",
                "Ядра для мини-пушки",
                "Чародейная пыль",
                "Абсолютная пыль",
                "Слиток оскверненного железа",
                "Кристалл пропасти",
                "Гигантский флакон с лечебным зельем",
                "Гигантский флакон с зельем маны",
                "Огромный флакон с лечебным зельем",
            });
        }
    }

    private void InitializeCommonTrashItemsNumbersList()
    {
        CommonTrashItemsNumbersList = new List<int>(new int[]
        {
            1357, // Captain Sanders' Treasure Map
            23580, // Avruu's Orb
		    36756, // Captain Malin's Letter
            44663, // Abandoned Adventurer's Satchel
            8704, // OOX-09/HL Distress Beacon
            8705, // OOX-22/FE Distress Beacon
		    8623, // OOX-17/TN Distress Beacon
		    25459, // 'Count' Ungula's Mandible
            36780, // Lieutenant Ta'zinni's Letter
            3668, // Assassin's Contract
            30579, // Illidari-Bane Shard
		    12558, // Blue-feathered Necklace
            26042, // Oshu'gun Crystal Powder Sample
		    26043, // Oshu'gun Crystal Powder Sample
            20461, // Brann Bronzebeard's Lost Letter
            37432, // Torturer's Rod
            36940, // Mikhail's Journal
		    37830, // Mikhail's Journal
            5103, // Washte Pawne's Feather
		    38281, // Direbrew's Dire Brew
            43494, // Ahn'kahar Watcher's Corpse
		    23228, // Old Whitebark's Pendant
            4616, // Ryedol's Lucky Pick
            //34226, // Orfus's Bundle
            10000, // Margol's Horn
            13305, // Elders' Square Postbox Key
            27855, // Mag'har Grainbread
            39327, // Noth's Special Brew
        });
        if (Quest.QuesterCurrentContext.ProfileName.Contains("Alliance_1-80"))
        {
            CommonTrashItemsNumbersList.Remove(4616);
            //CommonTrashItemsNumbersList.Remove(8704);
        }
    }
    private void CheckAndSetLocale()
    {
        logs("GetLocale is: " + GetLocale + "");
        if (!GetLocale.Contains("en") && !GetLocale.Contains("ru"))
        {
            GetLocale = Lua.LuaDoString<string>("return GetLocale()");
            Var.SetVar("GetLocale", GetLocale);
            logs("GetLocale set to: " + GetLocale + "");
        }
        if (!GetLocale.Contains("en") && !GetLocale.Contains("ru"))
        {
            logs("[Initialize] локализация не была определена, кил процесса");
            System.Diagnostics.Process.GetCurrentProcess().Kill();
        }
    }
    private List<string> CommonTrashItemsList = new List<string>()
    {
        "Scroll of Agility VII",
                "Riding Training Pamphlet",
                "Irradiated Crystal Shard",
                "Orb of the Grishna",
                "Magically Wrapped Gift",
                "Scroll of Strength VII",
                "Scroll of Intellect VII",
                "Scroll of Spirit VII",
                "Scroll of Stamina VII",
                "Scroll of Protection VII",
                "Basilisk Brain",
                "Blasted Boar Lung",
                "Imperfect Draenethyst Fragment",
                "Scorpok Pincer",
                "Snickerfang Jowl",
                "Vulture Gizzard",
                "Huge Venom Sac",
                "Eroded Leather Case",
                "Libram of Rapidity",
                "An Old History Book",
                "Gjalerbron Attack Plans",
                "Libram of Tenacity",
                "Damaged Necklace",
                "Damaged Mask",
                "Scum Covered Bag",
                "Vrykul Scroll of Ascension",
                "Unliving Choker",
                "Darkwater Clam",
                "Bent Raptor Talon",
                "Nesingwary Lackey Ear",
                "Scroll of Agility V",
                "Scroll of Spirit V",
                "Scroll of Intellect V",
                "Scroll of Stamina IV",
                "Scroll of Protection IV",
                "Scroll of Strength IV",
                "Scroll of Spirit IV",
                "Scroll of Agility IV",
                "Scroll of Intellect IV",
                "Garadar Sharp",
                "Arcane Tome",
                "Thorium Lockbox",
                "Coarse Snuff",
                "Mithril Lockbox",
                "Gooey Ghoul Drool",
                "Brooding Darkwater Clam",
                "Frosted Claw",
                "Icicle Fang",
                "Northern Egg",
                "Light Feather",
                "Articulated Talon",
                "Raptor Talon",
                "Blood-Soaked Raptor War Feather",
                "Khorium Lockbox",
                "Tome of Valor",
                "Sparkling Frostcap",
                "Vrykul Bones",
                "Hardened Claw",
                "Vicious Fang",
                "Worg Haunch",
                "Northern Ivory",
                "Oozing Bag",
                "Black Diamond",
                "Mage Hunter Personal Effects",
                "Libram of Constitution",
                "Froststeel Lockbox",
                "Emblazoned Battle Horn",
                "Scourge Device",
                "Scroll of Strength V",
                "Scroll of Protection V",
                "Scroll of Stamina V",
                "Scroll of Intellect VI",
                "Scroll of Agility VI",
                "Scroll of Spirit VI",
                "Scroll of Strength VI",
                "Scroll of Stamina VI",
                "Haute Club Membership Card",
                "Insignia of the Scourge",
                "Libram of Voracity",
                "Fish Oil",
                "Howling Wind",
                "Design: Citrine Pendant of Golden Healing",
                "Shiny Fish Scales",
                "Slimy Bag",
                "Withered Basidium",
                "Libram of Focus",
                "Perfect Courser Antler",
                "Drain Schematics",
                "Writhing Choker",
                "Libram of Resilience",
                "The Ultrasonic Screwdriver",
                "Black Dragonflight Molt",
                "Pendant of Myzrael",
                "Wavethrasher Scales",
                "Vrykul Bones",
                "Preserved Threshadon Meat",
                "Preserved Pheromone Mixture",
                "Fel Armament",
                "Fel Orc Blood Vial",
                "Energy Core",
                "Grimesilt Outhouse Key",
                "Hidden Stash",
                "Worn Junkbox",
                "Nightstalker Leg",
                "Screecher Brain",
                "Tainted Hide",
                "A Letter to Yvette",
                "Thunderlord Clan Artifact",
                "Elemental Armor Scrap",
                "Encrypted Twilight Text",
                "Winterfall Firewater",
                "Stable Ectoplasm",
                "Cracked Silithid Carapace",
                "Scorched Ectoplasm",
                "Bloodmaul Brutebane Brew",
                "Fel Blossom",
                "Perfect Yeti Hide",
                "Elixir of Shadows",
                "Westfall Deed",
                "Scintillating Fragment",
                "A Guide to Northern Cloth Scavenging",
                "Libram of Rumination",
                "Boulderfist Plans",
                "Jagged Shard",
                "Greater Cosmic Essence",
                "Lesser Cosmic Essence",
                "Ethereum Prison Key",
                "Roasted Quail",
                "Eternium Lockbox",
                "Arcane Tome",
                "Coilskar Chest Key",
                "Bottled Nethergon Energy",
                "Bottled Nethergon Vapor",
                "Spirit Shard",
                "Thorium Lockbox",
                "Ominous Letter",
                "Serpent Flesh",
                "Iridescent Scale",
                "Envenomed Fang",
                "Orders from Lady Vashj",
                "Jagged Blue Crystal",
                "Jagged Red Crystal",
                "Small Titanium Lockbox",
                "Titanium Lockbox",
                "Essence of Water",
                "Shattered Necklace",
                "Darkshore Grouper",
                "Tainted Arcane Sliver",
                "Flayed Demon Skin",
                "Incriminating Documents",
                "Sealed Letter",
                "Sprite Darter Egg",
                "Diabolical Plans",
                "A Mangled Journal",
                "Assassination Note",
                "Frozen Ectoplasm",
                "The Eye of Shadow",
                "Empty Firewater Flask",
                "Winterfall Ritual Totem",
                "Eye of Burning Shadow",
                "Unadorned Seal of Ascension",
                "Unconscious Rat",
                "Kvaldir Attack Plans",
                "Burning Legion Missive",
                "Slag Covered Metal",
                "Forgotten Depths Venom Sac",
                "Strange Mojo",
                "Small Glowing Shard",
                "Northern Spices",
                "Pristine Black Diamond",
                "Frayed Abomination Stitching",
                "Relic Coffer Key",
        "Black Blood of the Tormented",
        "Burning Essence",
        "A Crumpled Up Note",
        "Unadorned Seal of Ascension",
    };
    /*private void InitializeCommonTrashItemsList()
    {
        //CheckAndSetLocale();
        if (GetLocale.Contains("en"))
        {
            CommonTrashItemsList = new List<string>
            {
                "Scroll of Agility VII",
                "Riding Training Pamphlet",
                "Irradiated Crystal Shard",
                "Orb of the Grishna",
                "Magically Wrapped Gift",
                "Scroll of Strength VII",
                "Scroll of Intellect VII",
                "Scroll of Spirit VII",
                "Scroll of Stamina VII",
                "Scroll of Protection VII",
                "Basilisk Brain",
                "Blasted Boar Lung",
                "Imperfect Draenethyst Fragment",
                "Scorpok Pincer",
                "Snickerfang Jowl",
                "Vulture Gizzard",
                "Huge Venom Sac",
                "Eroded Leather Case",
                "Libram of Rapidity",
                "An Old History Book",
                "Gjalerbron Attack Plans",
                "Libram of Tenacity",
                "Damaged Necklace",
                "Damaged Mask",
                "Scum Covered Bag",
                "Vrykul Scroll of Ascension",
                "Unliving Choker",
                "Darkwater Clam",
                "Bent Raptor Talon",
                "Nesingwary Lackey Ear",
                "Scroll of Agility V",
                "Scroll of Spirit V",
                "Scroll of Intellect V",
                "Scroll of Stamina IV",
                "Scroll of Protection IV",
                "Scroll of Strength IV",
                "Scroll of Spirit IV",
                "Scroll of Agility IV",
                "Scroll of Intellect IV",
                "Garadar Sharp",
                "Arcane Tome",
                "Thorium Lockbox",
                "Coarse Snuff",
                "Mithril Lockbox",
                "Gooey Ghoul Drool",
                "Brooding Darkwater Clam",
                "Frosted Claw",
                "Icicle Fang",
                "Northern Egg",
                "Light Feather",
                "Articulated Talon",
                "Raptor Talon",
                "Blood-Soaked Raptor War Feather",
                "Khorium Lockbox",
                "Tome of Valor",
                "Sparkling Frostcap",
                "Vrykul Bones",
                "Hardened Claw",
                "Vicious Fang",
                "Worg Haunch",
                "Northern Ivory",
                "Oozing Bag",
                "Black Diamond",
                "Mage Hunter Personal Effects",
                "Libram of Constitution",
                "Froststeel Lockbox",
                "Emblazoned Battle Horn",
                "Scourge Device",
                "Scroll of Strength V",
                "Scroll of Protection V",
                "Scroll of Stamina V",
                "Scroll of Intellect VI",
                "Scroll of Agility VI",
                "Scroll of Spirit VI",
                "Scroll of Strength VI",
                "Scroll of Stamina VI",
                "Haute Club Membership Card",
                "Insignia of the Scourge",
                "Libram of Voracity",
                "Fish Oil",
                "Howling Wind",
                "Design: Citrine Pendant of Golden Healing",
                "Shiny Fish Scales",
                "Slimy Bag",
                "Withered Basidium",
                "Libram of Focus",
                "Perfect Courser Antler",
                "Drain Schematics",
                "Writhing Choker",
                "Libram of Resilience",
                "The Ultrasonic Screwdriver",
                "Black Dragonflight Molt",
                "Pendant of Myzrael",
                "Wavethrasher Scales",
                "Vrykul Bones",
                "Preserved Threshadon Meat",
                "Preserved Pheromone Mixture",
                "Fel Armament",
                "Fel Orc Blood Vial",
                "Energy Core",
                "Grimesilt Outhouse Key",
                "Hidden Stash",
                "Worn Junkbox",
                "Nightstalker Leg",
                "Screecher Brain",
                "Tainted Hide",
                "A Letter to Yvette",
                "Thunderlord Clan Artifact",
                "Elemental Armor Scrap",
                "Encrypted Twilight Text",
                "Winterfall Firewater",
                "Stable Ectoplasm",
                "Cracked Silithid Carapace",
                "Scorched Ectoplasm",
                "Bloodmaul Brutebane Brew",
                "Fel Blossom",
                "Perfect Yeti Hide",
                "Elixir of Shadows",
                "Westfall Deed",
                "Scintillating Fragment",
                "A Guide to Northern Cloth Scavenging",
                "Libram of Rumination",
                "Boulderfist Plans",
                "Jagged Shard",
                "Greater Cosmic Essence",
                "Lesser Cosmic Essence",
                "Ethereum Prison Key",
                "Roasted Quail",
                "Eternium Lockbox",
                "Arcane Tome",
                "Coilskar Chest Key",
                "Bottled Nethergon Energy",
                "Bottled Nethergon Vapor",
                "Spirit Shard",
                "Thorium Lockbox",
                "Ominous Letter",
                "Serpent Flesh",
                "Iridescent Scale",
                "Envenomed Fang",
                "Orders from Lady Vashj",
                "Jagged Blue Crystal",
                "Jagged Red Crystal",
                "Small Titanium Lockbox",
                "Titanium Lockbox",
                "Essence of Water",
                "Shattered Necklace",
                "Darkshore Grouper",
                "Tainted Arcane Sliver",
                "Flayed Demon Skin",
                "Incriminating Documents",
                "Sealed Letter",
                "Sprite Darter Egg",
                "Diabolical Plans",
                "A Mangled Journal",
                "Assassination Note",
                "Frozen Ectoplasm",
                "The Eye of Shadow",
                "Empty Firewater Flask",
                "Winterfall Ritual Totem",
                "Eye of Burning Shadow",
                "Unadorned Seal of Ascension",
                "Unconscious Rat",
                "Kvaldir Attack Plans",
                "Burning Legion Missive",
                "Slag Covered Metal",
                "Forgotten Depths Venom Sac",
                "Strange Mojo",
                "Small Glowing Shard",
                "Northern Spices",
            };
            if (MeIsRangeClass)
                CommonTrashItemsList.Add("Primed Key Mold");
            if (Quest.QuesterCurrentContext.ProfileName.Contains("Alliance_1-80"))
            {
                CommonTrashItemsList.Remove("An Old History Book");
                CommonTrashItemsList.Remove("Grimesilt Outhouse Key");
                CommonTrashItemsList.Remove("A Mangled Journal");
                CommonTrashItemsList.Remove("Boulderfist Plans");
                if (ObjectManager.Me.Level < 55)
                {
                    CommonTrashItemsList.Remove("Basilisk Brain");
                    CommonTrashItemsList.Remove("Blasted Boar Lung");
                    CommonTrashItemsList.Remove("Scorpok Pincer");
                    CommonTrashItemsList.Remove("Snickerfang Jowl");
                    CommonTrashItemsList.Remove("Vulture Gizzard");
                    CommonTrashItemsList.Remove("Winterfall Ritual Totem");
                }
            }
        }

        if (GetLocale == "ruRU")
        {
            CommonTrashItemsList = new List<string>(new string[]
            {
                "Свиток ловкости VII",
                "Брошюра об уроках верховой езды",
                "Осколок облученного кристалла",
                "Сфера Гришны",
                "Чудесным образом упакованный подарок",
                "Свиток силы VII",
                "Свиток интеллекта VII",
                "Свиток духа VII",
                "Свиток выносливости VII",
                "Свиток защиты VII",
                "Мозг василиска",
                "Обожженные легкие вепря",
                "Несовершенный фрагмент дренетиста",
                "Клешня скорпока",
                "Челюсть голодного хохотуна",
                "Потроха стервятника",
                "Огромная ядовитая железа",
                "Подпорченный кожаный чехол",
                "Манускрипт скорости",
                "Старинная историческая книга",
                "Гьялербронский план нападения",
                "Манускрипт упорства",
                "Поврежденное ожерелье",
                "Поврежденная маска",
                "Невероятно грязная сумка",
                "Врайкульский свиток вознесения",
                "Колье нежизни",
                "Темноводный моллюск",
                "Изогнутый коготь ящера",
                "Ухо прихвостня Эрнестуэя",
                "Свиток ловкости V",
                "Свиток духа V",
                "Свиток интеллекта V",
                "Свиток выносливости IV",
                "Охранный свиток IV",
                "Свиток силы IV",
                "Свиток духа IV",
                "Свиток ловкости IV",
                "Свиток интеллекта IV",
                "Гарадарская закуска",
                "Чародейский фолиант",
                "Ториевый сейф",
                "Грубый порошок",
                "Мифриловый сейф",
                "Вязкая слюна вурдалака",
                "Молодой темноводный моллюск",
                "Обмерзший коготь",
                "Обледеневший клык",
                "Нордскольское яйцо",
                "Легкое перышко",
                "Узловатая лапа",
                "Коготь ящера",
                "Окровавленное боевое перо ящера",
                "Кориевый сейф",
                "Фолиант Отваги",
                "Кости врайкула",
                "Загрубевший коготь",
                "Зловещий клык",
                "Окорок ворга",
                "Бивень Севера",
                "Пропитанная слизью сумка",
                "Черный алмаз",
                "Личный скарб охотника на магов",
                "Манускрипт здоровья",
                "Сейф из ледяной стали",
                "Расписанный боевой рог",
                "Устройство Плети",
                "Свиток силы V",
                "Охранный свиток V",
                "Свиток выносливости V",
                "Свиток интеллекта VI",
                "Свиток ловкости VI",
                "Свиток духа VI",
                "Свиток силы VI",
                "Свиток выносливости VI",
                "Карточка члена престижного клуба",
                "Знак Плети",
                "Манускрипт ненасытности",
                "Рыбий жир",
                "Вой-Ветер",
                "Эскиз: цитриновая подвеска исцеления",
                "Блестящая рыбья чешуя",
                "Склизкая сумка",
                "Высохшая базидия",
                "Манускрипт средоточия",
                "Великолепный рог бегового оленя",
                "Схема стоков",
                "Змеевидное колье",
                "Манускрипт устойчивости",
                "Ультразвуковая отвертка",
                "Измененная сброшенная шкура черного дракона",
                "Подвеска Мизраэль",
                "Чешуя волношлепа",
                "Вяленое мясо жесткозуба",
                "Консервированная смесь феромонов",
                "Латные перчатки Скверны",
                "Фиал крови орка Скверны",
                "Энергетическое ядро",
                "Ключ от туалета Грязнули",
                "Секретная заначка",
                "Подержанный ларь",
                "Нога ночного ловца",
                "Мозг крикуна",
                "Нечистая шкура",
                "Письмо к Иветте",
                "Артефакт клана Громоборцев",
                "Осколок элементальной брони",
                "Зашифрованный Сумеречный текст",
                "Огненная вода Зимней Спячки",
                "Стабильная эктоплазма",
                "Раздробленный силитидский панцирь",
                "Опаленная эктоплазма",
                "Забористое пойло Кровавого Молота",
                "Скверноцвет",
                "Совершенная шкура йети",
                "Эликсир теней",
                "Документ Западного Края",
                "Искрометный обломок",
                "Руководство по очистке северной ткани",
                "Манускрипт размышления",
                "Планы Тяжелого Кулака",
                "Мешок зазубренных осколков",
                "Великая космическая субстанция",
                "Малая космическая субстанция",
                "Ключ от тюрьмы братства Эфириум",
                "Жареная куропатка",
                "Этерниевый сейф",
                "Бутилированное хаотическое зелье энергии",
                "Бутилированные пары Хаотического зелья",
                "Осколок духа",
                "Ториевый сейф",
                "Угрожающее письмо",
                "Змеиное мясо",
                "Радужная чешуя",
                "Ядовитый клык",
                "Приказы Леди Вайш",
                "Зазубренный синий кристалл",
                "Зазубренный красный кристалл",
                "Маленький титановый ящичек",
                "Титановый сейф",
                "Субстанция Воды",
                "Рассыпавшееся ожерелье",
                "Морской окунь с Темных берегов",
                "Оскверненный магический осколок",
                "Рваная демонская кожа",
                "Обличающие бумаги",
                "Запечатанное письмо",
                "Яйцо летучего хамелеона",
                "Демонические планы",
                "Изорванный дневник",
                "Записка убийцы",
                "Замороженная эктоплазма",
                "Око Тени",
                "Пустая фляга из-под огненной воды",
                "Ритуальный тотем Зимней Спячки",
                "Око Пылающей Тени",
                "Простая печать Вознесения",
                "Пещерная крыса без сознания",
                "Квалдирский план нападения",
                "Послание Пылающего Легиона",
                "Покрытый шлаком металл",
                "Ядовитая железа Забытых глубин",
                "Странная настойка",
            });
        }
    }*/

    private List<WoWItem> GetTrashBagItems()
    {
        List<WoWItem> GetTrashBagItems = Bag.GetBagItem().FindAll(i => CommonTrashItemsList.Contains(i.Name)/* && !String.IsNullOrWhiteSpace(i.Name) && i.Entry != 0*/);
        return GetTrashBagItems;
    }

    private List<WoWItem> GetTrashBagItemsNumbers()
    {
        List<WoWItem> GetTrashBagItems = Bag.GetBagItem().FindAll(i => CommonTrashItemsNumbersList.Contains(i.Entry));
        return GetTrashBagItems;
    }

    private List<WoWItem> GetDungeonTrashItems()
    {
        List<WoWItem> GetTrashBagItems = Bag.GetBagItem().FindAll(i => DungeonTrashItemsList.Contains(i.Name));
        return GetTrashBagItems;
    }

    private List<WoWItem> GetTrashFish()
    {
        List<WoWItem> GetTrashBagItems = Bag.GetBagItem().FindAll(i => TrashFishList.Contains(i.Name));
        return GetTrashBagItems;
    }

    private List<WoWItem> GetTrashHPFood()
    {
        List<WoWItem> GetTrashBagItems = Bag.GetBagItem().FindAll(i => TrashHPFoodList.Contains(i.Name));
        return GetTrashBagItems;
    }

    private List<WoWItem> GetTrashManaDrink()
    {
        List<WoWItem> GetTrashBagItems = Bag.GetBagItem().FindAll(i => TrashManaDrinkList.Contains(i.Name));
        return GetTrashBagItems;
    }
    private void destroyItem(WoWItem item)
    {
        if (item.Entry == 0 || item.Name == "")
            return;
        List<int> containerBagIdAndSlot = Bag.GetItemContainerBagIdAndSlot(item.Entry);
        logs(string.Format("[LootFilter] Destroying {0} we have {1}", item.Name, item.StackCount));
        Lua.LuaDoString(string.Format("PickupContainerItem({0}, {1})", containerBagIdAndSlot[0], containerBagIdAndSlot[1]), false);
        Lua.LuaDoString("DeleteCursorItem()", false);
    }
    // delete trash items from bags //
    private void LootFilter()
    {
        //logs("[LootFilter]");
        if (DateTime.Now > nextLootfilterPulse && !me.InCombat/* && Bag.GetContainerNumFreeSlots < 25*/)
        {
            //logs("[LootFilter] прок");
            nextLootfilterPulse = DateTime.Now.AddSeconds(rnd(30, 60));

            // common trash items //
/*            if(GetTrashBagItems().Count == 0)
            {
                logs("[LootFilter] нех удалять");
            }*/
            if (GetTrashBagItems().Count > 0)
            {
                logs("[LootFilter] GetTrashBagItems().Count > 0");
                foreach (var TrashItem in GetTrashBagItems())
                {
                    //runlua("for bag = 0,4 do for slot = 1, GetContainerNumSlots(bag) do local item = GetContainerItemLink(bag,slot) if (item and item:find('" + TrashItem.Name + "')) then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                    destroyItem(TrashItem);
                    //logs("[LootFilter] удаляем из инвентаря GetTrashBagItems() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    print("[LootFilter] удаляем из инвентаря " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    sleep(rnd(500, 1000));
                }
            }

            // common trash items ids //
            if (GetTrashBagItemsNumbers().Count > 0)
            {
                foreach (var TrashItem in GetTrashBagItemsNumbers())
                {
                    runlua("for bag = 0,4 do for slot = 1, GetContainerNumSlots(bag) do local item = GetContainerItemLink(bag,slot) if (item and item:find('" + TrashItem.Entry + "')) then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                    logs("[LootFilter] удаляем из инвентаря GetTrashBagItemsNumbers() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    print("[LootFilter] удаляем из инвентаря GetTrashBagItemsNumbers() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    sleep(rnd(500, 1000));
                }
            }

            // trash in dungeons //
            if (Bag.GetContainerNumFreeSlots < 10 && MeIsInDungeon() && GetDungeonTrashItems().Count > 0)
            {
                foreach (var TrashItem in GetDungeonTrashItems())
                {
                    runlua("for bag = 0,4 do for slot = 1, GetContainerNumSlots(bag) do local item = GetContainerItemLink(bag,slot) if (item and item:find('" + TrashItem.Entry + "')) then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                    logs("[LootFilter] удаляем из инвентаря GetDungeonTrashItems() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    print("[LootFilter] удаляем из инвентаря GetDungeonTrashItems() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    sleep(rnd(500, 1000));
                }
            }

            // trash fish //
            if (IsFishingProfileName() && GetTrashFish().Count > 0)
            {
                foreach (var TrashItem in GetTrashFish())
                {
                    runlua("for bag = 0,4 do for slot = 1, GetContainerNumSlots(bag) do local item = GetContainerItemLink(bag,slot) if (item and item:find('" + TrashItem.Entry + "')) then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                    logs("[LootFilter] удаляем из инвентаря GetTrashFish() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    print("[LootFilter] удаляем из инвентаря GetTrashFish() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    sleep(rnd(500, 1000));
                }
            }

            // mana drink //
            if ((ImWarr || ImDK || ImRogue || ImPal) && GetTrashManaDrink().Count > 0)
            {
                foreach (var TrashItem in GetTrashManaDrink())
                {
                    runlua("for bag = 0,4 do for slot = 1, GetContainerNumSlots(bag) do local item = GetContainerItemLink(bag,slot) if (item and item:find('" + TrashItem.Entry + "')) then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                    logs("[LootFilter] удаляем из инвентаря GetTrashManaDrink() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    print("[LootFilter] удаляем из инвентаря GetTrashManaDrink() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    sleep(rnd(500, 1000));
                }
            }

            // hp food //
            if ((ImPriest || ImShaman || ImPal || ImDruid) && GetTrashHPFood().Count > 0)
            {
                foreach (var TrashItem in GetTrashHPFood())
                {
                    runlua("for bag = 0,4 do for slot = 1, GetContainerNumSlots(bag) do local item = GetContainerItemLink(bag,slot) if (item and item:find('" + TrashItem.Entry + "')) then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                    logs("[LootFilter] удаляем из инвентаря GetTrashHPFood()  " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    print("[LootFilter] удаляем из инвентаря GetTrashHPFood() " + TrashItem.Name + " (" + TrashItem.Entry + ")");
                    sleep(rnd(500, 2000));
                }
            }

            if (RealmShortName == "Circle LK x100" && HaveClockwerk && Bag.GetContainerNumFreeSlots < 10 && MeIsInDungeon())
            {
                nextLootfilterPulse = DateTime.Now.AddSeconds(rnd(10, 20));
                runlua("for bag = 0,4,1 do for slot = 1, 32, 1 do local name = GetContainerItemLink(bag,slot) if name and string.find(name,'ff9d9d9d') then PickupContainerItem(bag,slot) DeleteCursorItem() end end end");
                logs("[LootFilter] удаляем весь серый хлам на х100 в данжах если нет клокверка");
                print("[LootFilter] удаляем весь серый хлам на х100 в данжах если нет клокверка");
            }
        }
    }

    // leave party when party member is far //
    private void LeavePartyOrNot()
    {
        if (DateTime.Now > LeavePartyCheck && me.IsInParty && !Battleground.IsInBattleground())
        {
            LeavePartyCheck = DateTime.Now.AddSeconds(rnd(10, 15));

            var PartyMember1Guid = Party.GetMember1GUID();

            if (NearestFriendlyPlayer() != null && PartyMember1Guid == NearestFriendlyPlayer().Guid && Party.GetPartyHomeAndInstance().Count(p => p.IsValid && p.Position.DistanceTo(me.Position) < 300) > 0)
            {
                PartyMemberLastPos = NearestFriendlyPlayer().Position;
            }

            if (Party.GetPartyHomeAndInstance().Count(p => p.IsValid && p.Position.DistanceTo(me.Position) < 300) == 0 && PartyMemberLastPos == new Vector3(0, 0, 0, "None"))
            {
                print("[LeavePartyOrNot] ласт позиция игрока который c нами в пати нулевая, его нет в зоне видимости, ник и гуид: " + Lua.LuaDoString<string>("return GetUnitName('party1')") + ", " + PartyMember1Guid + "");
                logs("[LeavePartyOrNot] ласт позиция игрока который c нами в пати нулевая, его нет в зоне видимости, ник и гуид: " + Lua.LuaDoString<string>("return GetUnitName('party1')") + ", " + PartyMember1Guid + "");
            }

            print("[LeavePartyOrNot] ласт позиция игрока который c нами в пати: " + PartyMemberLastPos + ", ник и гуид: " + Lua.LuaDoString<string>("return GetUnitName('party1')") + ", " + PartyMember1Guid + ", дистанция до него: " + me.Position.DistanceTo(PartyMemberLastPos) + " ярдов");
            logs("[LeavePartyOrNot] ласт позиция игрока который c нами в пати: " + PartyMemberLastPos + ", ник и гуид: " + Lua.LuaDoString<string>("return GetUnitName('party1')") + ", " + PartyMember1Guid + ", дистанция до него: " + me.Position.DistanceTo(PartyMemberLastPos) + " ярдов");

            if ((me.Position.DistanceTo(PartyMemberLastPos) > 300 || PartyMemberLastPos == new Vector3(0, 0, 0, "None") || Lua.LuaDoString<bool>("if UnitInRaid('player') then return true end") && !ObjectManager.Me.IsDead))
            {
                logs("[LeavePartyOrNot] лив пати если: мы дальше на 300 ярдов от ласт позиции члена пати, или эта позиция равна нулю, или мы в рейде");
                print("[LeavePartyOrNot] лив пати если: мы дальше на 300 ярдов от ласт позиции члена пати, или эта позиция равна нулю, или мы в рейде");
                runlua("LeaveParty()");
                PartyMemberLastPos = new Vector3(0, 0, 0, "None");
            }
        }
    }

    // kill wrobot.exe process when full bags and looting mob (totown bug) //
    private void KillRobotIfFullBags()
    {
        if (DateTime.Now > FullbagsCheck && Bag.GetContainerNumFreeSlots == 0 && tar().IsValid && tar().IsDead && me.Level >= 80 && !me.InCombat && (Continent() == "Northrend" || Continent() == "Azeroth" || Continent() == "Kalimdor" || Continent() == "Expansion01"))
        {
            FullbagsCheck = DateTime.Now.AddSeconds(rnd(1, 2));
            logs("кил бота если фул сумки или продолжает лутать мобов");
            print("кил бота если фул сумки или продолжает лутать мобов");
            SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + RealmShortName + "] [" + MyRealName + ", " + me.Level + "]: кил бота если фул сумки или продолжает лутать мобов");
            sleep(10);
            //System.Diagnostics.Process.GetCurrentProcess().Kill();
            System.Diagnostics.Process.GetCurrentProcess().CloseMainWindow();
        }
    }

    private void PvpFlagCheckOnInitialize()
    {
        if (MeIsInMyFactionCityOrNearToCityNotInSanctuary() && !me.IsOnTaxi && Mapzone() != "Blasted Lands" && Mapzone() != "Выжженные земли" && Lua.LuaDoString<int>("return UnitIsPVP('player')") == 1)
        {
            PauseAndLogout();
            EnterWorldAndOffPause();

            if (Conditions.InGameAndConnected && Lua.LuaDoString<int>("return UnitIsPVP('player')") == 1)
            {
                int NextLogoutAfterThisSeconds = 10000000;
                PvpFlagCheck = DateTime.Now.AddSeconds(NextLogoutAfterThisSeconds);
                logs("[PvpFlagCheckOnInitialize] некст логаут если пвп флаг включен при инициализации плагина на своей территории будет через " + NextLogoutAfterThisSeconds + " сек (забаганый пвп фраг на чаре, когда релог не выключает пвп режим)");
                print("[PvpFlagCheckOnInitialize] некст логаут если пвп флаг включен при инициализации плагина на своей территории будет через " + NextLogoutAfterThisSeconds + " сек (забаганый пвп фраг на чаре, когда релог не выключает пвп режим)");
            }
        }
    }

    private void PauseAndLogout()
    {
        int trycount = 0;
        PauseOn();
        Lua.LuaDoString("Logout()");
        Thread.Sleep(2000);
        if (Conditions.InGameAndConnected && Lua.LuaDoString<string>("return StaticPopup1Text:GetText()").Contains("Seconds until logout"))
        {
            logs("[PauseAndLogout] Ждем выхода из мира 20 сек");
            print("[PauseAndLogout] Ждем выхода из мира 20 сек");
            Thread.Sleep(20000);
        }
        while (Conditions.InGameAndConnected && !Lua.LuaDoString<string>("return StaticPopup1Text:GetText()").Contains("Seconds until logout") && trycount <= 7)
        {
            trycount++;
            Lua.LuaDoString("Logout()");
            logs("[PauseAndLogout] Попытка выйти из мира N " + trycount);
            print("[PauseAndLogout] Попытка выйти из мира N " + trycount);
            Thread.Sleep(3000);
            if (trycount > 7)
            {
                Lua.LuaDoString("ReloadUI()");
                Thread.Sleep(2000);
                break;
            }
        }
        if (!Conditions.InGameAndConnected)
        {
            Var.SetVar("NeedForLogout", 1);
            logs("[PauseAndLogout] NeedForLogout = " + Var.GetVar<int>("NeedForLogout") + "");
        }
    }

    private void EnterWorldAndOffPause()
    {
        int trycount = 0;
        if (!Conditions.InGameAndConnected)
        {
            if(InLoginScreen())
            {
                logs("[EnterWorldAndOffPause] дисконуло в login => return");
                return;
            }
            Lua.LuaDoString("CharSelectEnterWorldButton:Click()", true);
            logs("[EnterWorldAndOffPause] нажамаем кнопку входа");
            while (!Conditions.InGameAndConnected && trycount < 15)
            {
                trycount++;
                logs("[EnterWorldAndOffPause] нажали кнопку входа, ожидаем вход в мир после логаута");
                sleep(1000);
                if (trycount >= 15)
                {
                    Lua.LuaDoString("CharSelectEnterWorldButton:Click()", true);
                    Thread.Sleep(5000);
                    break;
                }
            }
        }

        Var.SetVar("NeedForLogout", 0);
        logs("[EnterWorldAndOffPause] NeedForLogout = " + Var.GetVar<int>("NeedForLogout") + ", вошли в мир, оф паузы");
        print("[EnterWorldAndOffPause] NeedForLogout = " + Var.GetVar<int>("NeedForLogout") + ", вошли в мир, оф паузы");
        CreateAllFrames();
        sleep(1000);
        PauseOff();
    }

    // logout if pvp flag on char in city/near to city locations //
    private void PvpFlagLogoutInCity()
    {
        if (DateTime.Now > PvpFlagCheck && Conditions.InGameAndConnected && !MeIsKacher() && !me.IsOnTaxi && Lua.LuaDoString<int>("return UnitIsPVP('player')") == 1 && MeIsInCityOrNearToCityOrSanctuary() && Mapzone() != "Blasted Lands" && Mapzone() != "Выжженные земли" && Mapzone() != "Dalaran" && Mapzone() != "Даларан" && Mapzone() != "Shattrath City" && Mapzone() != "Шаттрат" && Subzone() != "The Stair of Destiny" && Subzone() != "Ступени Судьбы")
        {
            PvpFlagCheck = DateTime.Now.AddSeconds(rnd(500, 600));
            SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + RealmShortName + "] [" + MyRealName + "]: логаут если с флагом пвп в городе");
            logs("[PvpFlagLogoutInCity] логаут если с флагом пвп в городе или возле города");
            sleep(100);
            runlua("SetPVP(0)");
            sleep(100);
            PauseAndLogout();
            EnterWorldAndOffPause();
        }
    }

    // create trade items //
    private void Reagents()
    {
        if (DateTime.Now > ReagentsCheck && !me.IsDead && !MeIsOnFlyMount())
        {
            ReagentsCheck = DateTime.Now.AddSeconds(rnd(50, 100));

            if (ItemsManager.GetItemCountById(37704) >= 10)
            {
                ItemsManager.UseItem(37704);
                logs("[Reagents] use item Crystallized Life");
            }

            if (ItemsManager.GetItemCountById(37703) >= 10)
            {
                ItemsManager.UseItem(37703);
                logs("[Reagents] use item Crystallized Shadow");
            }
            if (ItemsManager.GetItemCountById(22574) >= 10)
            {
                ItemsManager.UseItem(22574);
                logs("[Reagents] use item Mote of Fire");
            }
            if (ItemsManager.GetItemCountById(37702) >= 10)
            {
                ItemsManager.UseItem(37702);
                logs("[Reagents] use item Crystallized Fire");
            }

            if (ItemsManager.GetItemCountById(37701) >= 10)
            {
                ItemsManager.UseItem(37701);
                logs("[Reagents] use item Crystallized Earth");
            }

            if (ItemsManager.GetItemCountById(37700) >= 10)
            {
                ItemsManager.UseItem(37700);
                logs("[Reagents] use item Crystallized Air");
            }

            if (ItemsManager.GetItemCountById(37705) >= 10)
            {
                ItemsManager.UseItem(37705);
                logs("[Reagents] use item Crystallized Water");
            }

            if (ItemsManager.GetItemCountById(34053) >= 3 && !me.IsFlying)
            {
                ItemsManager.UseItem("Small Dream Shard");
                logs("[Reagents] use item Small Dream Shard");
            }

            if (ItemsManager.GetItemCountById(33567) >= 5 && !me.IsFlying)
            {
                ItemsManager.UseItem("Borean Leather Scraps");
                logs("[Reagents] use item Borean Leather Scraps");
            }
        }
    }


    // custom buffs / potions //
    private void CustomBuffsAndPotions()
    {
        if (DateTime.Now > CustomBuffsPotionsCheck && !MeIsMountedOrHaveDruidForm() && !me.IsFlying && !me.IsDead)
        {

            CustomBuffsPotionsCheck = DateTime.Now.AddSeconds(rnd(30, 60));

            if (DateTime.Now > CustomBuffsCheck && !me.InCombat)
            {
                CustomBuffsCheck = DateTime.Now.AddSeconds(rnd(15, 60));

                // noggenfogger elixir (scale) //
                if (ItemsManager.GetItemCountById(8529) > 0 && !me.HaveBuff(16595) && Bag.GetContainerItemCooldown(8529) == 0 && !MeIsInDungeon())
                {
                    ItemsManager.UseItem(8529);
                    logs("[CustomBuffsAndPotions] use item noggenfogger elixir");
                    print("[CustomBuffsAndPotions] use item noggenfogger elixir");
                }

                // Savory Deviate Delight //
                if (ItemsManager.GetItemCountById(6657) > 0 && !me.HaveBuff(8220) && !me.HaveBuff(8222) && Bag.GetContainerItemCooldown(6657) == 0 && !MeIsInDungeon())
                {
                    ItemsManager.UseItem(6657);
                    logs("[CustomBuffsAndPotions] use item Savory Deviate Delight");
                    print("[CustomBuffsAndPotions] use item Savory Deviate Delight");
                }

                /*

                    if (&& me.Level >= 80)
                    {
                            // runescroll of fortitude //
                            if (ItemsManager.GetItemCountById(49632) >= 1 && !(me.HaveBuff("Fortitude") || me.HaveBuff("Power Word: Fortitude")) && Bag.GetContainerItemCooldown(49632) == 0)
                            {
                                ItemsManager.UseItem(49632);
                                logs("use item runescroll of fortitude");
                                //logs(": use item runescroll of fortitude')");
                            }

                            // use item drums of forgotten kings //
                            if (ItemsManager.GetItemCountById(49633) >= 1 && !(me.HaveBuff("Blessing of Forgotten Kings") || me.HaveBuff("Blessing of Kings") || me.HaveBuff("Greater Blessing of Kings")) && Bag.GetContainerItemCooldown(49633) == 0)
                            {
                                ItemsManager.UseItem(49633);
                                logs("use item drums of forgotten kings");
                                //logs(": use item drums of forgotten kings')");
                            }

                            // use item drums of the wild //
                            if (ItemsManager.GetItemCountById(49634) >= 1 && !me.HaveBuff("Gift of the Wild") && Bag.GetContainerItemCooldown(49634) == 0)
                            {
                                ItemsManager.UseItem(49634);
                                logs("use item drums of the wild ");
                                //logs(": use item drums of the wild ')");
                            }

                            // use item lesser flask of toughness //
                            if (ItemsManager.GetItemCountById(40079) >= 1 && !me.HaveBuff(53752) && Bag.GetContainerItemCooldown(40079) == 0)
                            {
                                ItemsManager.UseItem(40079);
                                logs("use item lesser flask of toughness");
                                //logs(": use item lesser flask of toughness')");
                            }
                    }
                */
            }

            if (DateTime.Now > PotionsPulse && (me.HealthPercent < 30 || me.ManaPercentage < 30))
            {
                PotionsPulse = DateTime.Now.AddSeconds(rnd(5, 10));

                // mp potions //
                if (me.ManaPercentage < 30)
                {
                    if (me.Level >= 70 && ItemsManager.GetItemCountById(33448) > 0 && Bag.GetContainerItemCooldown(33448) == 0)
                    {
                        ItemsManager.UseItem(33448);
                        logs("[CustomBuffsAndPotions] Use Runic Mana Potion");
                        print("[CustomBuffsAndPotions] Use Runic Mana Potion");
                    }

                    else if (me.Level >= 55 && ItemsManager.GetItemCountById(22832) > 0 && Bag.GetContainerItemCooldown(22832) == 0)
                    {
                        ItemsManager.UseItem(22832);
                        logs("[CustomBuffsAndPotions] Use Super Mana Potion");
                        print("[CustomBuffsAndPotions] Use Super Mana Potion");
                    }

                    else if (me.Level >= 49 && ItemsManager.GetItemCountById(13444) > 0 && Bag.GetContainerItemCooldown(13444) == 0)
                    {
                        ItemsManager.UseItem(13444);
                        logs("[CustomBuffsAndPotions] Use Major Mana Potion");
                        print("[CustomBuffsAndPotions] Use Major Mana Potion");
                    }

                    else if (me.Level >= 41 && ItemsManager.GetItemCountById(13443) > 0 && Bag.GetContainerItemCooldown(13443) == 0)
                    {
                        ItemsManager.UseItem(13443);
                        logs("Use Superior Mana Potion");
                        print("Use Superior Mana Potion");
                    }

                    else if (me.Level >= 31 && ItemsManager.GetItemCountById(6149) > 0 && Bag.GetContainerItemCooldown(6149) == 0)
                    {
                        ItemsManager.UseItem(6149);
                        logs("[CustomBuffsAndPotions] Use Greater Mana Potion");
                        print("[CustomBuffsAndPotions] Use Greater Mana Potion");
                    }

                    else if (me.Level >= 22 && ItemsManager.GetItemCountById(3827) > 0 && Bag.GetContainerItemCooldown(3827) == 0)
                    {
                        ItemsManager.UseItem(3827);
                        logs("[CustomBuffsAndPotions] Use Mana Potion");
                        print("[CustomBuffsAndPotions] Use Mana Potion");
                    }

                    else if (me.Level >= 14 && ItemsManager.GetItemCountById(3385) > 0 && Bag.GetContainerItemCooldown(3385) == 0)
                    {
                        ItemsManager.UseItem(3385);
                        logs("[CustomBuffsAndPotions] Use Lesser Mana Potion");
                        print("[CustomBuffsAndPotions] Use Lesser Mana Potion");
                    }

                    else if (me.Level >= 5 && ItemsManager.GetItemCountById(2455) > 0 && Bag.GetContainerItemCooldown(2455) == 0)
                    {
                        ItemsManager.UseItem(2455);
                        logs("[CustomBuffsAndPotions] Use Minor Mana Potion");
                        print("[CustomBuffsAndPotions] Use Minor Mana Potion");
                    }
                }

                // hp potions //
                if (me.HealthPercent < 30)
                {
                    if (me.Level >= 70 && ItemsManager.GetItemCountById(33447) > 0 && Bag.GetContainerItemCooldown(33447) == 0)
                    {
                        ItemsManager.UseItem(33447);
                        logs("[CustomBuffsAndPotions] Use Runic Healing Potion");
                        print("[CustomBuffsAndPotions] Use Runic Healing Potion");
                    }

                    else if (me.Level >= 55 && ItemsManager.GetItemCountById(22829) > 0 && Bag.GetContainerItemCooldown(22829) == 0)
                    {
                        ItemsManager.UseItem(22829);
                        logs("[CustomBuffsAndPotions] Use Super Healing Potion");
                        print("[CustomBuffsAndPotions] Use Super Healing Potion");
                    }

                    else if (me.Level >= 45 && ItemsManager.GetItemCountById(13446) > 0 && Bag.GetContainerItemCooldown(13446) == 0)
                    {
                        ItemsManager.UseItem(13446);
                        logs("[CustomBuffsAndPotions] Use Major Healing Potion");
                        print("[CustomBuffsAndPotions] Use Major Healing Potion");
                    }

                    else if (me.Level >= 35 && ItemsManager.GetItemCountById(3928) > 0 && Bag.GetContainerItemCooldown(3928) == 0)
                    {
                        ItemsManager.UseItem(3928);
                        logs("[CustomBuffsAndPotions] Use Superior Healing Potion");
                        print("[CustomBuffsAndPotions] Use Superior Healing Potion");
                    }

                    else if (me.Level >= 21 && ItemsManager.GetItemCountById(1710) > 0 && Bag.GetContainerItemCooldown(1710) == 0)
                    {
                        ItemsManager.UseItem(1710);
                        logs("[CustomBuffsAndPotions] Use Greater Healing Potion");
                        print("[CustomBuffsAndPotions] Use Greater Healing Potion");
                    }

                    else if (me.Level >= 12 && ItemsManager.GetItemCountById(929) > 0 && Bag.GetContainerItemCooldown(929) == 0)
                    {
                        ItemsManager.UseItem(929);
                        logs("[CustomBuffsAndPotions] Use Healing Potion");
                        print("[CustomBuffsAndPotions] Use Healing Potion");
                    }

                    else if (me.Level >= 3 && ItemsManager.GetItemCountById(858) > 0 && Bag.GetContainerItemCooldown(858) == 0)
                    {
                        ItemsManager.UseItem(858);
                        logs("[CustomBuffsAndPotions] Use Lesser Healing Potion");
                        print("[CustomBuffsAndPotions] Use Lesser Healing Potion");
                    }

                    else if (ItemsManager.GetItemCountById(118) > 0 && Bag.GetContainerItemCooldown(118) == 0)
                    {
                        ItemsManager.UseItem(118);
                        logs("[CustomBuffsAndPotions] Use Minor Healing Potion");
                        print("[CustomBuffsAndPotions] Use Minor Healing Potion");
                    }
                }
            }
        }
    }

    // stop fight with training dummies //
    private void DontHitDummy()
    {
        if (DateTime.Now > DummyCheck && Continent() == "HellfireMilitary" && me.InCombat && tar().Name == "Hellfire Training Dummy")
        {
            DummyCheck = DateTime.Now.AddSeconds(rnd(30, 45));

            {
                logs("[DontHitDummy] stop fight with training dummies");
                print("[DontHitDummy] stop fight with training dummies");
                Fight.StopFight();
                if (ObjectManager.Pet.IsAlive && ObjectManager.Pet.IsValid)
                    runlua("PetPassiveMode()");
                Move.Backward(Move.MoveAction.PressKey, rnd(1500, 2500));
                me.Target = me.Guid;
                print("[DontHitDummy] pause on: stop fight with training dummies");
                logs("[DontHitDummy] pause on: stop fight with training dummies");
                PauseOn();
                sleep(30000);
                PauseOff();
                print("[DontHitDummy] pause off: stop fight with training dummies");
                logs("[DontHitDummy] pause off: stop fight with training dummies");
                if (ObjectManager.Pet.IsAlive && ObjectManager.Pet.IsValid)
                    runlua("PetDefensiveMode()");
            }
        }
    }

    private void UseUnstuckAndSpiritHealerWhenDead()
    {
        if (me.IsDead)
        {
            if (!me.HaveBuff("Ghost"))
            {
                for (int l = 0; l < rnd(10, 100) && !me.HaveBuff("Ghost"); l++)
                {
                    if (Conditions.InGameAndConnected && me.IsDead && !me.HaveBuff("Ghost"))
                    {
                        logs("[UseUnstuckAndSpiritHealer] ожидание бафа призрака " + l + "");
                        print("[UseUnstuckAndSpiritHealer] ожидание бафа призрака " + l + "");
                        sleep(100);
                    }

                    if (!Conditions.InGameAndConnected || me.HaveBuff("Ghost") || !me.IsDead)
                    {
                        logs("[UseUnstuckAndSpiritHealer] ожидание бафа призрака, цикл сломан");
                        print("[UseUnstuckAndSpiritHealer] ожидание бафа призрака, цикл сломан");
                        break;
                    }
                }
                if (me.IsDead && !me.HaveBuff("Ghost"))
                {
                    logs("[UseUnstuckAndSpiritHealer] покидаем тело");
                    print("[UseUnstuckAndSpiritHealer] покидаем тело");
                    runlua("RepopMe()");
                }
            }

            if (me.HaveBuff("Ghost"))
            {

                SendDiscordMessageArchiveAlerts("[" + Time() + "] [" + MyRealName + "]: функция вызвана, каст анстака если в призраке, юз спирит хилера если будет, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                logs("[UseUnstuckAndSpiritHealer] функция вызвана");
                print("[UseUnstuckAndSpiritHealer] функция вызвана");

                while (me.HaveBuff("Ghost"))
                {

                    if (Conditions.InGameAndConnected)
                    {

                        Var.SetVar("LoadingCount", 0);

                        if (ObjectManager.GetWoWUnitByName("Spirit Healer").Count == 0)
                        {
                            if (Setting.UseSpiritHealer)
                            {
                                Setting.UseSpiritHealer = false;
                                logs("[UseUnstuckAndSpiritHealer] нет спирит хилера => UseSpiritHealer = false");
                                print("[UseUnstuckAndSpiritHealer] нет спирит хилера => UseSpiritHealer = false");
                            }

                            while (me.GetMove)
                            {
                                if (Conditions.InGameAndConnected)
                                {
                                    logs("[UseUnstuckAndSpiritHealer] стопмув для каста");
                                    print("[UseUnstuckAndSpiritHealer] стопмув для каста");
                                    MovementManager.StopMove();
                                }

                                if (!Conditions.InGameAndConnected)
                                    break;

                                sleep(500);
                            }

                            if (!me.GetMove && !me.IsCast && UnstuckCDTimer < DateTime.Now)
                            {
                                SendDiscordMessageSpiritHealer("[" + Time() + "] [" + MyRealName + "]: каст анстака в процессе, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                                logs("[UseUnstuckAndSpiritHealer] каст анстака Stuck()");
                                print("[UseUnstuckAndSpiritHealer] каст анстака Stuck()");
                                runlua("Stuck()");
                                //sleep(2000);
                                //Usefuls.WaitIsCasting();
                                Usefuls.WaitIsCasting();
                                sleep(latency);
                                Usefuls.WaitIsCasting();
                                sleep(2000);
                                MovementManager.StopMove();
                                UnstuckCDTimer = DateTime.Now.AddSeconds(30);
                                logs("[UseUnstuckAndSpiritHealer] таймер после каста анстака 30 сек");
                                print("[UseUnstuckAndSpiritHealer] таймер после каста анстака 30 сек");
                            }
                        }

                        if (ObjectManager.GetWoWUnitByName("Spirit Healer").Count == 1)
                        {
                            if (!Setting.UseSpiritHealer)
                            {
                                Setting.UseSpiritHealer = true;
                                logs("[UseUnstuckAndSpiritHealer] спирит хилер найден => UseSpiritHealer = true");
                                print("[UseUnstuckAndSpiritHealer] спирит хилер найден => UseSpiritHealer = true");
                            }
                            if (me.GetMove && !MovementManager.IsFacing(me.Position, me.Rotation, ObjectManager.GetObjectWoWUnit().OrderBy(u => u.Name == "Spirit Healer").FirstOrDefault().Position, 3f))
                            {
                                logs("[UseUnstuckAndSpiritHealer] стопмув если отходит от спирит хилера");
                                print("[UseUnstuckAndSpiritHealer] стопмув если отходит от спирит хилера");
                                MovementManager.StopMove();
                                sleep(500);
                                if(ObjectManager.Me.Position.DistanceTo(ObjectManager.GetObjectWoWUnit().OrderBy(u => u.Name == "Spirit Healer").FirstOrDefault().Position) > 30)
                                {
                                    logs("[UseUnstuckAndSpiritHealer] отбежал слишком далеко от спирит хилера, бежим c помощь CtmPathfinder к целителю душ");
                                    print("[UseUnstuckAndSpiritHealer] отбежал слишком далеко от спирит хилера, бежим c помощь CtmPathfinder к целителю душ");
                                    CtmPathfinder(ObjectManager.GetObjectWoWUnit().OrderBy(u => u.Name == "Spirit Healer").FirstOrDefault().Position, false);
                                }
                            }
                            
                        }
                    }

                    if (!Conditions.InGameAndConnected)
                    {
                        PauseOff();
                        logs("[UseUnstuckAndSpiritHealer] выход из цикла так как вне игры");
                        break;
                    }

                    sleep(500);
                }

                if (!me.IsDead)
                {
                    SendDiscordMessageSpiritHealer("[" + Time() + "] [" + MyRealName + "]: успешное воскрешение у спирит хилера, зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");
                    logs("[UseUnstuckAndSpiritHealer] успешное воскрешение, Statistics.Stucks = 0");
                    print("[UseUnstuckAndSpiritHealer] успешное воскрешение, Statistics.Stucks = 0");
                    Statistics.Stucks = 0;
                }
            }
        }
    }

    public int RandomMoveDuration()
    {

        int RandomMoveDuration = 0;

        //int RandomNumberForMoveDuration = rnd(1, 5);

        if (!(tar().Type == WoWObjectType.Player))
        {
            RandomMoveDuration = rnd(100, 500);
        }

        if (tar().Type == WoWObjectType.Player)
        {

            if (MeIsMeleeClass)
            {
                // bad hp vs melee / vs def abilities //
                if (((me.HealthPercent < 50 && TargetIsMeleeClass()) || (tar().HaveBuff("Divine Shield") || tar().HaveBuff("Ice Block") || tar().HaveBuff("Deterrence") || tar().HaveBuff("Shield Block") || tar().HaveBuff("Anti-Magic Shell") || tar().HaveBuff("Bladestorm") || tar().HaveBuff("Shield Wall") || tar().HaveBuff("Divine Protection") || tar().HaveBuff("Hand of Protection") || tar().HaveBuff("Anti-Magic Zone") || tar().HaveBuff("Icebound Fortitude") || me.HaveBuff("Dismantle") || me.HaveBuff("Disarm"))) && !me.HaveBuff("Anti-Magic Zone"))
                {
                    RandomMoveDuration = rnd(300, 1500);
                }

                if (me.HaveBuff("Anti-Magic Zone"))
                {
                    RandomMoveDuration = rnd(100, 500);
                }

                // good hp and vs melee //
                if (me.HealthPercent >= 50 && TargetIsMeleeClass())
                {
                    RandomMoveDuration = rnd(100, 500);
                }

                // vs rdd //
                if (TargetIsRangeClass())
                {
                    RandomMoveDuration = rnd(100, 500);
                }
            }

            if (MeIsRangeClass)
            {
                if ((tar().HaveBuff("Divine Shield") || tar().HaveBuff("Ice Block") || tar().HaveBuff("Spell Reflection") || tar().HaveBuff("Deterrence") || tar().HaveBuff("Anti-Magic Shell") || tar().HaveBuff("Bladestorm") || tar().HaveBuff("Shield Wall") || tar().HaveBuff("Divine Protection") || tar().HaveBuff("Anti-Magic Zone") || tar().HaveBuff("Icebound Fortitude") || (me.WowClass == WoWClass.Priest && !PsychicScream.IsSpellUsable && TargetIsMeleeClass())) && tar().GetDistance < 25)
                {
                    RandomMoveDuration = rnd(300, 1500);
                }

                if (TargetIsRangeClass())
                {
                    if (tar().GetDistance >= 10 && tar().GetDistance < 25)
                        RandomMoveDuration = rnd(100, 300);
                    if (tar().GetDistance < 10)
                        RandomMoveDuration = rnd(300, 700);
                }

                if (TargetIsMeleeClass())
                {
                    if (tar().GetDistance >= 10 && tar().GetDistance < 25)
                        RandomMoveDuration = rnd(100, 500);
                    if (tar().GetDistance < 10)
                        RandomMoveDuration = rnd(300, 1500);
                }
            }
        }

        logs("RandomMoveDuration = " + RandomMoveDuration + "");
        print("RandomMoveDuration = " + RandomMoveDuration + "");

        return RandomMoveDuration;

    }

    public void RandomMoveAction()
    {

        int RandomNumberForMoveAction = rnd(1, 6);
        sleep(10);

        if (MeIsMeleeClass)
        {
            // strafe right //
            if (RandomNumberForMoveAction == 1 && tar().GetDistance <= 10 && !me.GetMove)
            {
                logs("[RandomMoveAction] strafe right " + RandomMoveDuration() + " ms - melee");
                print("[RandomMoveAction] RandomMoveAction - strafe right " + RandomMoveDuration() + " ms - melee");
                Move.StrafeRight(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // strafe left //
            if (RandomNumberForMoveAction == 2 && tar().GetDistance <= 10)
            {
                logs("[RandomMoveAction] strafe left " + RandomMoveDuration() + " ms - melee");
                print("[RandomMoveAction] strafe left " + RandomMoveDuration() + " ms - melee");
                Move.StrafeLeft(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // backward //
            if (RandomNumberForMoveAction == 3 && tar().GetDistance < 1 && !me.GetMove)
            {
                logs("[RandomMoveAction] move backward " + RandomMoveDuration() + " ms - melee");
                print("[RandomMoveAction] move backward " + RandomMoveDuration() + " ms - melee");
                Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // forward //
            if (RandomNumberForMoveAction == 4 && tar().GetDistance >= 4)
            {
                print("RandomMoveAction - move forward " + RandomMoveDuration() + " ms - melee");
                Move.Forward(Move.MoveAction.PressKey, rnd(50, 100));
            }

            // jump //
            if (RandomNumberForMoveAction == 5 && me.GetMove)
            {
                logs("[RandomMoveAction] jump - melee");
                print("[RandomMoveAction] jump - melee");
                Move.JumpOrAscend();
            }
        }

        if (MeIsRangeClass)
        {
            // strafe right //
            if (RandomNumberForMoveAction == 1)
            {
                logs("[RandomMoveAction] strafe right " + RandomMoveDuration() + " ms - rdd");
                print("[RandomMoveAction] strafe right " + RandomMoveDuration() + " ms - rdd");
                Move.StrafeRight(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // strafe left //
            if (RandomNumberForMoveAction == 2)
            {
                logs("[RandomMoveAction] strafe left " + RandomMoveDuration() + " ms - rdd");
                print("[RandomMoveAction] strafe left " + RandomMoveDuration() + " ms - rdd");
                Move.StrafeLeft(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // backward //
            if (RandomNumberForMoveAction == 3 && tar().GetDistance < 25 && !me.GetMove)
            {
                logs("[RandomMoveAction] move backward " + RandomMoveDuration() + " ms - rdd");
                print("[RandomMoveAction] move backward " + RandomMoveDuration() + " ms - rdd");
                Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // forward //
            if (RandomNumberForMoveAction == 4 && tar().GetDistance >= 30 && !me.GetMove)
            {
                logs("[RandomMoveAction] move forward " + RandomMoveDuration() + " ms - rdd");
                print("[RandomMoveAction] move forward " + RandomMoveDuration() + " ms - rdd");
                Move.Forward(Move.MoveAction.PressKey, RandomMoveDuration());
            }

            // jump //
            if (RandomNumberForMoveAction == 5)
            {
                logs("[RandomMoveAction] jump - rdd");
                print("[RandomMoveAction] jump - rdd");
                Move.JumpOrAscend();
            }
        }
    }

    public int RandomPosXFromTargetPosXPlus()
    {
        int RandomPosXFromTargetPosXPlus = (int)tar().Position.X;

        if (MeIsMeleeClass && me.HealthPercent >= 50)
            RandomPosXFromTargetPosXPlus = (int)tar().Position.X + rnd(1, 4);

        if (MeIsRangeClass || (MeIsMeleeClass && me.HealthPercent < 50))
            RandomPosXFromTargetPosXPlus = (int)tar().Position.X + rnd(1, 6);

        //print("" + RandomPosXFromTargetPosXPlus + "");
        //logs("" + RandomPosXFromTargetPosXPlus + "");

        return RandomPosXFromTargetPosXPlus;
    }

    public int RandomPosYFromTargetPosYPlus()
    {
        int RandomPosYFromTargetPosYPlus = (int)tar().Position.Y;

        if (MeIsMeleeClass && me.HealthPercent >= 50)
            RandomPosYFromTargetPosYPlus = (int)tar().Position.Y + rnd(1, 4);

        if (MeIsRangeClass || (MeIsMeleeClass && me.HealthPercent < 50))
            RandomPosYFromTargetPosYPlus = (int)tar().Position.Y + rnd(1, 6);

        //print("" + RandomPosYFromTargetPosYPlus + "");
        //logs("" + RandomPosYFromTargetPosYPlus + "");

        return RandomPosYFromTargetPosYPlus;
    }

    public int RandomPosXFromTargetPosXMinus()
    {
        int RandomPosXFromTargetPosXMinus = (int)tar().Position.X;

        if (MeIsMeleeClass && me.HealthPercent >= 50)
            RandomPosXFromTargetPosXMinus = (int)tar().Position.X - rnd(1, 4);

        if (MeIsRangeClass || (MeIsMeleeClass && me.HealthPercent < 50))
            RandomPosXFromTargetPosXMinus = (int)tar().Position.X - rnd(1, 6);

        //print("" + RandomPosXFromTargetPosXMinus + "");
        //logs("" + RandomPosXFromTargetPosXMinus + "");

        return RandomPosXFromTargetPosXMinus;
    }

    public int RandomPosYFromTargetPosYMinus()
    {
        int RandomPosYFromTargetPosYMinus = (int)tar().Position.Y;

        if (MeIsMeleeClass && me.HealthPercent >= 50)
            RandomPosYFromTargetPosYMinus = (int)tar().Position.Y - rnd(1, 4);

        if (MeIsRangeClass || (MeIsMeleeClass && me.HealthPercent < 50))
            RandomPosYFromTargetPosYMinus = (int)tar().Position.Y - rnd(1, 6);

        //print("" + RandomPosYFromTargetPosYMinus + "");
        //logs("" + RandomPosYFromTargetPosYMinus + "");

        return RandomPosYFromTargetPosYMinus;
    }
    private bool CheckFlyBaitisLaunched;
    private void CheckFlyBaitFactory()
    {
        if (CheckFlyBaitisLaunched)
            return;
        if(!CheckFlyBaitisLaunched)
        {
            CheckFlyBaitisLaunched = true;
            System.Threading.Tasks.Task.Factory.StartNew(() =>
            { 

            });
        }
        
    }
    
        // байт флаем/высотой //
        private void MindControlBait()
    {
        if(ObjectManager.Me.HaveBuff("Mind Control") && TraceLine.TraceLineGo(ObjectManager.Target.Position) && !Battleground.IsInBattleground())
        
        {
            var lasterror = wManager.Wow.Memory.WowMemory.Memory.ReadStringUTF8(wManager.Wow.Memory.WowMemory.Memory.RebaseAddress(0x7CFB90), 200);
            var Baiter = tar();
            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт майнд контролем: (" + lasterror + ") [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
        }
    }
        private void CheckFlyBait()
    {
        //
        
        if (Fight.InFight && (Continent() == "Northrend" || Continent() == "Expansion01") && !me.IsSwimming)
        {
            // милик //
            if (MeIsMeleeClass)
            {
                if ((tar().GetDistanceZ >= 5 && ((int)tar().Position.Z > (int)me.Position.Z) || Var.GetVar<int>("Targetnotinlineofsight") > 2) && tar().Type == WoWObjectType.Player && tar().IsAttackable)
                {
                    var lasterror = wManager.Wow.Memory.WowMemory.Memory.ReadStringUTF8(wManager.Wow.Memory.WowMemory.Memory.RebaseAddress(0x7CFB90), 200);

                    var Baiter = tar();

                    if (FlyBaitAlertTimer < DateTime.Now)
                    {
                        FlyBaitAlertTimer = DateTime.Now.AddSeconds(10);
                        SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт милика: (" + lasterror + ") [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                        //runlua("PlaySoundFile('Sound/Doodad/G_GongTroll01.wav')");
                        logs("[CheckFlyBait] байт милика: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                        print("[CheckFlyBait] байт милика");
                        //sleep(100);

                        // отсылка лога на байт милика флаем //
                        if (Baiter.IsFlying && Baiter.GetDistanceZ >= 5 && ((int)Baiter.Position.Z > (int)me.Position.Z))
                        {
                            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт милика флаем: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)tar().GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            logs("[CheckFlyBait] байт милика флаем: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            print("[CheckFlyBait] байт милика флаем");
                            ScreenAlertVisualUber("байт милика флаем\\n" + tar().Name + ", " + tar().Guid + "");
                        }

                        // отсылка лога на байт милика высотой //
                        if (!Baiter.IsFlying && Baiter.GetDistanceZ >= 5 && ((int)Baiter.Position.Z > (int)me.Position.Z))
                        {
                            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт милика высотой: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + ", " + Baiter.WowClass + ", таргетит: " + Baiter.IsTargetingMe + ", дист Z: " + Baiter.GetDistanceZ + ", дист 2D: " + (int)Baiter.GetDistance2D + ", дист: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            logs("[CheckFlyBait] байт милика высотой: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", таргетит: " + Baiter.IsTargetingMe + ", дист Z: " + Baiter.GetDistanceZ + ", дист 2D: " + (int)Baiter.GetDistance2D + ", дист: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            print("[CheckFlyBait] байт милика высотой");
                            ScreenAlertVisualUber("байт милика высотой\\n" + Baiter.Name + ", " + Baiter.Guid + "");
                        }

                        //Screenshot("байт милика");
                        //sleep(1000);
                        MaximizeWowWindow();

                    }









                    // милик //
                    while (!me.IsDead)
                    {
                        if (Conditions.InGameAndConnected)
                        {
                            if (!Products.InPause)
                            {
                                PauseOn();
                                print("[CheckFlyBait] пауза, цикл проверок стартанул, милик");
                                logs("[CheckFlyBait] пауза, цикл проверок стартанул, милик");
                            }

                            if (Products.InPause)
                            {
                                if (!Baiter.IsValid)
                                {
                                    print("[CheckFlyBait] байтер исчез, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    logs("[CheckFlyBait] байтер исчез, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    sleep(rnd(1000, 5000));
                                    PauseOff();
                                    break;
                                }

                                if (Baiter.GetDistance > 50)
                                {
                                    print("[CheckFlyBait] байтер дальше 50, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    logs("[CheckFlyBait] байтер дальше 50, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    sleep(rnd(1000, 5000));
                                    PauseOff();
                                    break;
                                }

                                if (!Baiter.InCombat)
                                {
                                    print("[CheckFlyBait] байтер не в бою, цикл завершен небольшое ожидание, оф паузы через 1-5 сек");
                                    logs("[CheckFlyBait] байтер не в бою, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    sleep(rnd(1000, 5000));
                                    PauseOff();
                                    break;
                                }

                                if (!tar().IsValid)
                                {
                                    print("[CheckFlyBait] нет цели - TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer");
                                    logs("[CheckFlyBait] нет цели - TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer");
                                    TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer();
                                }

                                if (me.InCombat && Baiter.GetDistanceZ < 5 && Baiter.GetDistance < 20 && !MeIsOnFlyMount())
                                {
                                    print("[CheckFlyBait] выкл паузу, выкл ForceIgnoreIsAttacked, снова вошел бой но но теперь мы можем атаковать");
                                    logs("[CheckFlyBait] выкл паузу, выкл ForceIgnoreIsAttacked, снова вошел бой но теперь мы можем атаковать");
                                    sleep(rnd(1000, 5000));
                                    Conditions.ForceIgnoreIsAttacked = false;
                                    PauseOff();
                                    break;
                                }

                                if (Baiter.GetDistanceZ >= 5 && Baiter.GetDistance >= 20 && Baiter.GetDistance < 100)
                                {
                                    logs("[CheckFlyBait] RunFromTargetClickToMove");
                                    print("[CheckFlyBait] RunFromTargetClickToMove");
                                    RunFromTargetClickToMove();
                                }

                                if (Baiter.GetDistance >= 100)
                                {
                                    print("[CheckFlyBait] байтер дальше 100, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    logs("[CheckFlyBait] байтер дальше 100, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                    sleep(rnd(1000, 5000));
                                    PauseOff();
                                    break;
                                }

                                if (!Conditions.InGameAndConnected)
                                {
                                    PauseOff();
                                    logs("[CheckFlyBait] выход из цикла, запаузился в меню");
                                    break;
                                }
                            }
                        }

                        if (!Conditions.InGameAndConnected)
                        {
                            PauseOff();
                            logs("[CheckFlyBait] выход из цикла, запаузился в меню");
                            break;
                        }

                        sleep(rnd(200, 1000));
                    }
                }
            }












            // рдд //
            if (MeIsRangeClass)
            {
                if (((tar().IsFlying && tar().GetDistance >= 39) || (!tar().IsFlying && tar().GetDistanceZ >= 39 && tar().GetDistance >= 39) || tar().GetDistance >= 50 || TraceLine.TraceLineGo(tar().Position) || Var.GetVar<int>("Targetnotinlineofsight") > 2) && (tar().Type == WoWObjectType.Player && tar().IsAttackable))
                {

                    var lasterror = wManager.Wow.Memory.WowMemory.Memory.ReadStringUTF8(wManager.Wow.Memory.WowMemory.Memory.RebaseAddress(0x7CFB90), 200);

                    var Baiter = tar();

                    if (FlyBaitAlertTimer < DateTime.Now)
                    {
                        FlyBaitAlertTimer = DateTime.Now.AddSeconds(10);
                        //runlua("PlaySoundFile('Sound/Doodad/G_GongTroll01.wav')");
                        logs("[CheckFlyBait] байт рдд: (" + lasterror + ") [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                        print("[CheckFlyBait] байт рдд");
                        SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт рдд: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                        sleep(100);

                        // отсылка лога на байт рдд флаем //
                        if (Baiter.IsFlying && Baiter.GetDistance >= 39)
                        {
                            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт рдд флаем: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            logs("[CheckFlyBait] байт рдд флаем: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            print("[CheckFlyBait] байт рдд флаем");
                            ScreenAlertVisualUber("байт рдд флаем\\n" + Baiter.Name + ", " + Baiter.Guid + "");
                        }

                        // отсылка лога на байт рдд высотой //
                        if (!Baiter.IsFlying && Baiter.GetDistanceZ >= 39)
                        {
                            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт рдд высотой: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            logs("[CheckFlyBait] байт рдд высотой: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            print("[CheckFlyBait] байт рдд высотой");
                            ScreenAlertVisualUber("байт рдд высотой\\n" + Baiter.Name + ", " + Baiter.Guid + "");
                        }

                        // отсылка лога на байт рдд препятствием //
                        if (TraceLine.TraceLineGo(Baiter.Position) || Var.GetVar<int>("Targetnotinlineofsight") > 2)
                        {
                            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт рдд препятствием: (" + Var.GetVar<int>("Targetnotinlineofsight") + ") [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            logs("[" + MyRealName + "]: байт рдд препятствием: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            print("[CheckFlyBait] байт рдд препятствием");
                            ScreenAlertVisualUber("байт рдд препятствием\\n" + Baiter.Name + ", " + Baiter.Guid + "");
                        }


                        // отсылка лога на байт рдд дистанцией //
                        if (Baiter.GetDistance >= 50)
                        {
                            SendDiscordMessageFlyBait("[" + Time() + "] [" + MyRealName + "]: байт рдд дистанцией: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            logs("[" + MyRealName + "]: байт рдд дистанцией: [" + Baiter.Name + "], гуид " + Baiter.Guid + ", " + Baiter.Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + Baiter.WowClass + ", дистанция по Z: " + Baiter.GetDistanceZ + ", дистанция по 2D: " + (int)Baiter.GetDistance2D + ", дистанция: " + (int)Baiter.GetDistance + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", реалм: " + RealmShortName + "");
                            print("[CheckFlyBait] байт рдд дистанцией");
                            ScreenAlertVisualUber("байт рдд дистанцией\\n" + Baiter.Name + ", " + Baiter.Guid + "");
                        }

                        //Screenshot("байт рдд");
                        //sleep(1000);
                        MaximizeWowWindow();
                    }













                    // цикл из попыток ухода рдд от байтов //
                    while (Conditions.InGameAndConnectedAndProductStarted)
                    {

                        if (!Products.InPause)
                        {
                            PauseOn();
                            print("[CheckFlyBait] пауза, цикл проверок стартанул, рдд");
                            logs("[CheckFlyBait] пауза, цикл проверок стартанул, рдд");
                        }

                        if (Products.InPause)
                        {
                            if (me.IsDead)
                            {
                                print("[CheckFlyBait] перс погиб, выход из цикла");
                                logs("[CheckFlyBait] перс погиб, выход из цикла");
                                Conditions.ForceIgnoreIsAttacked = false;
                                sleep(rnd(1000, 5000));
                                PauseOff();
                                break;
                            }

                            if (!TraceLine.TraceLineGo(Baiter.Position) && Baiter.GetDistance < 39)
                            {
                                print("[CheckFlyBait] цель не за препятствием и расстояние для атаки < 39, выход из цикла");
                                Conditions.ForceIgnoreIsAttacked = false;
                                logs("[CheckFlyBait] цель не за препятствием и расстояние для атаки < 39, выход из цикла");
                                sleep(rnd(1000, 5000));
                                PauseOff();
                                break;
                            }

                            if (!Baiter.IsValid)
                            {
                                print("[CheckFlyBait] байтер исчез, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                logs("[CheckFlyBait] байтер исчез, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                sleep(rnd(1000, 5000));
                                PauseOff();
                                break;
                            }

                            if (Baiter.GetDistance >= 100)
                            {
                                print("[CheckFlyBait] байтер дальше 100, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                logs("[CheckFlyBait] байтер дальше 100, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                sleep(rnd(1000, 5000));
                                PauseOff();
                                break;
                            }

                            if (!Baiter.InCombat)
                            {
                                print("[CheckFlyBait] байтер не в бою, цикл завершен небольшое ожидание, оф паузы через 1-5 сек");
                                logs("[CheckFlyBait] байтер не в бою, цикл завершен, небольшое ожидание, оф паузы через 1-5 сек");
                                sleep(rnd(1000, 5000));
                                PauseOff();
                                break;
                            }

                            if (!tar().IsValid)
                            {
                                print("[CheckFlyBait] нет цели - TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer");
                                logs("[CheckFlyBait] нет цели - TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer");
                                TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer();
                            }

                            if (Baiter.GetDistance >= 39 && Baiter.GetDistance < 100)
                            {
                                logs("[CheckFlyBait] RunFromTargetClickToMove");
                                print("[CheckFlyBait] RunFromTargetClickToMove");
                                RunFromTargetClickToMove();
                            }
                        }

                        sleep(rnd(200, 1000));
                    }
                }
            }









            if (Products.InPause)
            {
                print("[CheckFlyBait] цикл завершен без брейка, небольшое ожидание, оф паузы через 1-5 сек");
                logs("[CheckFlyBait] цикл завершен без брейка, небольшое ожидание, оф паузы через 1-5 сек");
                sleep(rnd(1000, 5000));
                PauseOff();
            }


            Conditions.ForceIgnoreIsAttacked = false;
        }
    }

















    private void ReportFightWithPlayer()
    {
        // отсылка лога на файт с игроком //
        if (CombatWithPlayerCheck < DateTime.Now && !Battleground.IsInBattleground())
        {
            CombatWithPlayerCheck = DateTime.Now.AddSeconds(60);
            BasicScriptsErrorsCloseTime = DateTime.Now.AddSeconds(60);

            if (tar().IsValid)
                LastPlayerThatWeFight = "" + tar().Name + " " + tar().Guid + " " + tar().Level + "";

            SendDiscordMessageFightWithPlayers("[" + Time() + "] [" + MyRealName + "]: в драке с [" + tar().Name + "], гуид " + tar().Guid + ", " + tar().Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + tar().WowClass + ", дистанция: " + (int)tar().GetDistance + ", атакует: " + tar().InCombatWithMe + ", таргетит: " + tar().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)tar().Position.X + ", " + (int)tar().Position.Y + ", " + (int)tar().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");

            logs("[ReportFightWithPlayer] в драке с [" + tar().Name + "], гуид " + tar().Guid + ", " + tar().Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + tar().WowClass + ", дистанция: " + (int)tar().GetDistance + ", атакует: " + tar().InCombatWithMe + ", таргетит: " + tar().IsTargetingMe + ", зона: " + Mapzone() + ", " + Subzone() + ", " + Continent() + ", позиция: " + (int)tar().Position.X + ", " + (int)tar().Position.Y + ", " + (int)tar().Position.Z + ", профиль: " + ProfileName() + ", реалм: " + RealmShortName + "");

            print("[ReportFightWithPlayer] в драке с [" + tar().Name + "], гуид " + tar().Guid + ", " + tar().Level + " лвл " + Lua.LuaDoString<string>("race, fileName = UnitRace('target') return fileName") + " " + tar().WowClass + "");
            //runlua("PlaySoundFile('Sound/Doodad/BellTollHorde.wav')");
            //Screenshot("файт с " + LastPlayerThatWeFight + "");
            ScreenAlertVisualUber("FIGHT!\\n" + tar().Name + " " + tar().Guid + "");
            MaximizeWowWindow();
        }
    }

    private void CTM(float x, float y, float z)
    {
        ClickToMove.CGPlayer_C__ClickToMove(x, y, z, 0, (int)ClickToMoveType.Move, 0);
        print("CTM");
        logs("CTM");
    }


    private void CombatMovements()
    {
        // движения в бою //
        if (MainMovementTimer.IsReady && !me.IsCast)
        {

            RandomMovementPlusMinusNumber = rnd(1, 5);





            // пве //
            if (!(tar().Type == WoWObjectType.Player))
            {

                // фпс в пве //
                if (FpsCooldown < DateTime.Now && !IsFpsExclusionProfile())
                {
                    if ((RealmShortName.Contains("Circle") || RealmShortName.Contains("Virgin")) && Lua.LuaDoString<bool>("if (GetFramerate() >= 16 or GetFramerate() < 14) then return true end") && Lua.LuaDoString<bool>("if " + BigFPSButtonFrameName + " then if " + BigFPSButtonFrameName + ":GetChecked() == nil then return true end end"))
                    {
                        runlua("SetCVar('maxFPS','15') SetCVar('maxFPSBk','15')");
                        print("[CombatMovements] 15 фпс в пве (wow c1r cle)");
                        logs("[CombatMovements] 15 фпс в пве (wow c1r cle)");
                        FpsCooldown = DateTime.Now.AddSeconds(rnd(20, 30));
                    }
                    if (!RealmShortName.Contains("Circle") && !RealmShortName.Contains("Virgin") && Lua.LuaDoString<bool>("if (GetFramerate() >= 26 or GetFramerate() < 24) then return true end"))
                    {
                        runlua("SetCVar('maxFPS','25') SetCVar('maxFPSBk','25')");
                        logs("[CombatMovements] 25 фпс в пве (not wow c1r cle)");
                        print("[CombatMovements] 25 фпс в пве (not wow c1r cle)");
                        FpsCooldown = DateTime.Now.AddSeconds(rnd(20, 30));
                    }
                }

                if (!me.GetMove)
                {

                    if (tar().GetDistance < 1)
                    {
                        logs("[CombatMovements] рандом движение в бою для всех в пве, чутка назад изза дистанции < 1, " + RandomMoveDuration() + " ms");
                        print("[CombatMovements] рандом движение в бою для всех в пве, чутка назад изза дистанции < 1, " + RandomMoveDuration() + " ms");
                        Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        MainMovementTimer = new Timer(rnd(1000, 5000));
                    }

                    // милики //
                    if (MeIsMeleeClass)
                    {
                        if (tar().GetDistance < 5)
                        {
                            RandomMovementPlusMinusNumber = rnd(4, 4);
                            if (RandomMovementPlusMinusNumber == 1)
                            {
                                Vector3 NewRandomPos1 = new Vector3()
                                {
                                    X = RandomPosXFromTargetPosXPlus(),
                                    Y = RandomPosYFromTargetPosYPlus(),
                                    Z = (int)tar().Position.Z
                                };

                                if (me.IsFacing(NewRandomPos1, 3f))
                                {
                                    MainMovementTimer = new Timer(rnd(3000, 10000));
                                    logs("[CombatMovements] милик в пве NewRandomPos1 (" + NewRandomPos1 + ")");
                                    print("[CombatMovements] милик в пве NewRandomPos1 (" + NewRandomPos1 + ")");
                                    //GoToTask.ToPosition(NewRandomPos1);
                                    MovementManager.Face(tar());
                                    CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYPlus(), (int)tar().Position.Z);
                                    MovementManager.Face(tar());
                                }
                            }

                            if (RandomMovementPlusMinusNumber == 2)
                            {
                                Vector3 NewRandomPos2 = new Vector3()
                                {
                                    X = RandomPosXFromTargetPosXMinus(),
                                    Y = RandomPosYFromTargetPosYMinus(),
                                    Z = (int)tar().Position.Z
                                };

                                if (me.IsFacing(NewRandomPos2, 3f))
                                {
                                    MainMovementTimer = new Timer(rnd(3000, 10000));
                                    logs("[CombatMovements] милик в пве NewRandomPos2 (" + NewRandomPos2 + ")");
                                    print("[CombatMovements] милик в пве NewRandomPos2 (" + NewRandomPos2 + ")");
                                    //GoToTask.ToPosition(NewRandomPos2);
                                    MovementManager.Face(tar());
                                    CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                                    MovementManager.Face(tar());
                                }
                            }

                            if (RandomMovementPlusMinusNumber == 3)
                            {
                                Vector3 NewRandomPos3 = new Vector3()
                                {
                                    X = RandomPosXFromTargetPosXPlus(),
                                    Y = RandomPosYFromTargetPosYMinus(),
                                    Z = (int)tar().Position.Z
                                };

                                if (me.IsFacing(NewRandomPos3, 3f))
                                {
                                    MainMovementTimer = new Timer(rnd(3000, 10000));
                                    logs("[CombatMovements] милик в пве NewRandomPos3 (" + NewRandomPos3 + ")");
                                    print("[CombatMovements] милик в пве NewRandomPos3 (" + NewRandomPos3 + ")");
                                    //GoToTask.ToPosition(NewRandomPos3);
                                    MovementManager.Face(tar());
                                    CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                                    MovementManager.Face(tar());
                                }
                            }

                            if (RandomMovementPlusMinusNumber == 4)
                            {
                                Vector3 NewRandomPos4 = new Vector3()
                                {
                                    X = RandomPosXFromTargetPosXMinus(),
                                    Y = RandomPosYFromTargetPosYPlus(),
                                    Z = (int)tar().Position.Z
                                };

                                if (me.IsFacing(NewRandomPos4, 3f))
                                {
                                    MainMovementTimer = new Timer(rnd(3000, 10000));
                                    logs("[CombatMovements] милик в пве NewRandomPos4 (" + NewRandomPos4 + ")");
                                    print("[CombatMovements] милик в пве NewRandomPos4 (" + NewRandomPos4 + ")");
                                    //GoToTask.ToPosition(NewRandomPos4);
                                    MovementManager.Face(tar());
                                    CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYPlus(), (int)tar().Position.Z);
                                    MovementManager.Face(tar());
                                }
                            }

                            if (rnd(1, 3) == 2)
                            {
                                MainMovementTimer = new Timer(rnd(3000, 10000));
                                logs("[CombatMovements] милик в пве RandomMoveAction() 1");
                                print("[CombatMovements] милик в пве RandomMoveAction() 1");
                                MovementManager.Face(tar());
                                RandomMoveAction();
                                MovementManager.Face(tar());
                            }

                            if (rnd(1, 3) == 2)
                            {
                                MainMovementTimer = new Timer(rnd(3000, 10000));
                                logs("[рандом движение в бою, милик в пве] RandomMoveAction() 2");
                                print("[рандом движение в бою, милик в пве] RandomMoveAction() 2");
                                MovementManager.Face(tar());
                                RandomMoveAction();
                                MovementManager.Face(tar());
                            }

                            if (rnd(1, 3) == 2)
                            {
                                MainMovementTimer = new Timer(rnd(3000, 10000));
                                logs("[CombatMovements] милик в пве RandomMoveAction() 3");
                                print("[CombatMovements] милик в пве RandomMoveAction() 3");
                                MovementManager.Face(tar());
                                RandomMoveAction();
                                MovementManager.Face(tar());
                            }

                        }
                    }

                    // рдд //
                    if (MeIsRangeClass)
                    {

                        if (RandomMovementPlusMinusNumber == 1)
                        {
                            Vector3 NewRandomPos1 = new Vector3()
                            {
                                X = RandomPosXFromTargetPosXPlus(),
                                Y = RandomPosYFromTargetPosYPlus(),
                                Z = (int)tar().Position.Z
                            };

                            if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos1, 4.5f) && tar().GetDistance < 30)
                            {
                                MainMovementTimer = new Timer(rnd(10000, 20000));
                                logs("[CombatMovements] рдд в пве NewRandomPos1 (" + NewRandomPos1 + ")");
                                print("[CombatMovements] рдд в пве NewRandomPos1 (" + NewRandomPos1 + ")");
                                //GoToTask.ToPosition(NewRandomPos1);
                                CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                            }
                        }

                        if (RandomMovementPlusMinusNumber == 2)
                        {
                            Vector3 NewRandomPos2 = new Vector3()
                            {
                                X = RandomPosXFromTargetPosXMinus(),
                                Y = RandomPosYFromTargetPosYMinus(),
                                Z = (int)tar().Position.Z
                            };

                            if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos2, 4.5f) && tar().GetDistance < 30)
                            {
                                MainMovementTimer = new Timer(rnd(10000, 20000));
                                logs("[CombatMovements] рдд в пве NewRandomPos2 (" + NewRandomPos2 + ")");
                                print("[CombatMovements] рдд в пве NewRandomPos2 (" + NewRandomPos2 + ")");
                                //GoToTask.ToPosition(NewRandomPos2);
                                CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                            }
                        }

                        if (RandomMovementPlusMinusNumber == 3)
                        {
                            Vector3 NewRandomPos3 = new Vector3()
                            {
                                X = RandomPosXFromTargetPosXPlus(),
                                Y = RandomPosYFromTargetPosYMinus(),
                                Z = (int)tar().Position.Z
                            };

                            if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos3, 4.5f) && tar().GetDistance < 30)
                            {
                                MainMovementTimer = new Timer(rnd(10000, 20000));
                                logs("[CombatMovements] рдд в пве NewRandomPos3 (" + NewRandomPos3 + ")");
                                print("[CombatMovements] рдд в пве NewRandomPos3 (" + NewRandomPos3 + ")");
                                //GoToTask.ToPosition(NewRandomPos3);
                                CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                            }
                        }

                        if (RandomMovementPlusMinusNumber == 4)
                        {
                            Vector3 NewRandomPos4 = new Vector3()
                            {
                                X = RandomPosXFromTargetPosXMinus(),
                                Y = RandomPosYFromTargetPosYPlus(),
                                Z = (int)tar().Position.Z
                            };

                            if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos4, 4.5f) && tar().GetDistance < 30)
                            {
                                MainMovementTimer = new Timer(rnd(10000, 20000));
                                logs("[CombatMovements] рдд в пве NewRandomPos4 (" + NewRandomPos4 + ")");
                                print("[CombatMovements] рдд в пве NewRandomPos4 (" + NewRandomPos4 + ")");
                                //GoToTask.ToPosition(NewRandomPos4);
                                CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYPlus(), (int)tar().Position.Z);
                            }
                        }

                        if (rnd(1, 3) == 2 && tar().GetDistance < 30 && !me.GetMove)
                        {
                            MainMovementTimer = new Timer(rnd(10000, 20000));
                            logs("[CombatMovements] рдд в пве RandomMoveAction()");
                            print("[CombatMovements] рдд в пве RandomMoveAction()");
                            RandomMoveAction();
                        }
                    }
                }
            }





            // пвп //
            if (tar().Type == WoWObjectType.Player)
            {

                if (Lua.LuaDoString<bool>("if GetFramerate() < 43 then return true end"))
                {
                    runlua("SetCVar('maxFPS','44') SetCVar('maxFPSBk','44')");
                    print("[CombatMovements] 44 фпс в пвп");
                }

                // melee //
                if (MeIsMeleeClass)
                {

                    var rnd1 = rnd(100, 1000);
                    var rnd2 = rnd(100, 1500);
                    var rnd3 = rnd(100, 3000);
                    var rnd4 = rnd(100, 5000);
                    var rnd5 = rnd(100, 10000);

                    if (myitemlevel >= 260)
                    {
                        print("[CombatMovements] MainMovementTimer = " + rnd1 + "");
                        logs("[CombatMovements] MainMovementTimer = " + rnd1 + "");
                        MainMovementTimer = new Timer(rnd1);
                    }
                    else if (myitemlevel < 260 && myitemlevel >= 240)
                    {
                        print("[CombatMovements] MainMovementTimer = " + rnd2 + "");
                        logs("[CombatMovements] MainMovementTimer = " + rnd2 + "");
                        MainMovementTimer = new Timer(rnd2);
                    }
                    else if (myitemlevel < 240 && myitemlevel >= 200)
                    {
                        print("[CombatMovements] MainMovementTimer = " + rnd3 + "");
                        logs("[CombatMovements] MainMovementTimer = " + rnd3 + "");
                        MainMovementTimer = new Timer(rnd3);
                    }
                    else if (myitemlevel < 200 && myitemlevel >= 100)
                    {
                        print("[CombatMovements] MainMovementTimer = " + rnd4 + "");
                        logs("[CombatMovements] MainMovementTimer = " + rnd4 + "");
                        MainMovementTimer = new Timer(rnd4);
                    }
                    else if (myitemlevel < 100)
                    {
                        print("MainMovementTimer = " + rnd5 + "");
                        logs("MainMovementTimer = " + rnd5 + "");
                        MainMovementTimer = new Timer(rnd5);
                    }
                    else if (me.HealthPercent < 65 && !ImPal)
                    {
                        print("[CombatMovements] MainMovementTimer = " + rnd3 + "");
                        logs("[CombatMovements] MainMovementTimer = " + rnd3 + "");
                        MainMovementTimer = new Timer(rnd3);
                    }

                    if (RandomMovementPlusMinusNumber == 1)
                    {
                        Vector3 NewRandomPos4 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXPlus(),
                            Y = RandomPosYFromTargetPosYPlus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance < 2 && !me.GetMove)
                        {
                            print("[CombatMovements] милик в пвп move backward");
                            logs("[CombatMovements] милик в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (me.IsFacing(NewRandomPos4, 3f) && tar().GetDistance < 5)
                        {
                            print("[CombatMovements] милик в пвп NewRandomPos1 (" + NewRandomPos4 + ")");
                            logs("[CombatMovements] милик в пвп NewRandomPos1 (" + NewRandomPos4 + ")");
                            GoToTask.ToPosition(NewRandomPos4);
                            CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYPlus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                        if (me.GetMove && rnd(1, 2) == 3)
                            Move.JumpOrAscend();
                    }

                    else if (RandomMovementPlusMinusNumber == 2)
                    {
                        Vector3 NewRandomPos3 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXMinus(),
                            Y = RandomPosYFromTargetPosYMinus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance < 2 && !me.GetMove)
                        {
                            print("[CombatMovements] милик в пвп move backward");
                            logs("[CombatMovements] милик в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (me.IsFacing(NewRandomPos3, 3f) && tar().GetDistance < 5)
                        {
                            print("[CombatMovements] милик в пвп NewRandomPos2 (" + NewRandomPos3 + ")");
                            logs("[CombatMovements] милик в пвп NewRandomPos2 (" + NewRandomPos3 + ")");
                            GoToTask.ToPosition(NewRandomPos3);
                            CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                        if (me.GetMove && rnd(1, 2) == 3)
                            Move.JumpOrAscend();
                    }

                    else if (RandomMovementPlusMinusNumber == 3)
                    {
                        Vector3 NewRandomPos2 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXPlus(),
                            Y = RandomPosYFromTargetPosYMinus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance < 2 && !me.GetMove)
                        {
                            print("[CombatMovements] милик в пвп move backward");
                            logs("[CombatMovements] милик в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (me.IsFacing(NewRandomPos2, 3f) && tar().GetDistance < 5)
                        {
                            print("[CombatMovements] милик в пвп NewRandomPos3 (" + NewRandomPos2 + ")");
                            logs("[CombatMovements] милик в пвп NewRandomPos3 (" + NewRandomPos2 + ")");
                            GoToTask.ToPosition(NewRandomPos2);
                            CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                        if (me.GetMove && rnd(1, 2) == 3)
                            Move.JumpOrAscend();
                    }

                    else if (RandomMovementPlusMinusNumber == 4)
                    {
                        Vector3 NewRandomPos1 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXMinus(),
                            Y = RandomPosYFromTargetPosYPlus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance < 2 && !me.GetMove)
                        {
                            print("[CombatMovements] милик в пвп move backward");
                            logs("[CombatMovements] милик в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (me.IsFacing(NewRandomPos1, 3f) && tar().GetDistance < 5)
                        {
                            print("[CombatMovements] милик в пвп NewRandomPos4 (" + NewRandomPos1 + ")");
                            logs("[CombatMovements] милик в пвп NewRandomPos4 (" + NewRandomPos1 + ")");
                            GoToTask.ToPosition(NewRandomPos1);
                            CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                        if (me.GetMove && rnd(1, 2) == 3)
                            Move.JumpOrAscend();
                    }

                    if (rnd(1, 3) == 2)
                    {
                        logs("[CombatMovements] милик в пвп RandomMoveAction() 1");
                        print("[CombatMovements] милик в пвп RandomMoveAction() 1");
                        RandomMoveAction();
                    }

                    if (rnd(1, 3) == 2)
                    {
                        logs("[CombatMovements] милик в пвп RandomMoveAction() 2");
                        print("[CombatMovements] милик в пвп RandomMoveAction() 2");
                        RandomMoveAction();
                    }

                    if (rnd(1, 3) == 2)
                    {
                        logs("[CombatMovements] милик в пвп RandomMoveAction() 3");
                        print("[CombatMovements] милик в пвп RandomMoveAction() 3");
                        RandomMoveAction();
                    }

                }



                // rdd //
                else if (MeIsRangeClass)
                {

                    if (tar().GetDistance < 6)
                    {
                        MainMovementTimer = new Timer(rnd(5000, 10000));
                    }

                    if (tar().GetDistance >= 6)
                    {
                        MainMovementTimer = new Timer(rnd(10000, 20000));
                    }

                    print("MainMovementTimer = " + MainMovementTimer + " ms");

                    if (RandomMovementPlusMinusNumber == 1)
                    {
                        Vector3 NewRandomPos1 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXPlus(),
                            Y = RandomPosYFromTargetPosYPlus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance <= 2 && !me.GetMove)
                        {
                            print("[CombatMovements] рдд в пвп move backward");
                            logs("[CombatMovements] рдд в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos1, 4.5f) && tar().GetDistance < 10)
                        {
                            print("[CombatMovements] рдд в пвп NewRandomPos1 (" + NewRandomPos1 + ")");
                            logs("[CombatMovements] рдд в пвп NewRandomPos1 (" + NewRandomPos1 + ")");
                            //GoToTask.ToPosition(NewRandomPos1);
                            CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYPlus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                    }

                    else if (RandomMovementPlusMinusNumber == 2)
                    {
                        Vector3 NewRandomPos2 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXMinus(),
                            Y = RandomPosYFromTargetPosYMinus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance <= 2 && !me.GetMove)
                        {
                            print("[CombatMovements] рдд в пвп move backward");
                            logs("[CombatMovements] рдд в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos2, 4.5f) && tar().GetDistance < 10)
                        {
                            print("[CombatMovements] рдд в пвп NewRandomPos2 (" + NewRandomPos2 + ")");
                            logs("[CombatMovements] рдд в пвп NewRandomPos2 (" + NewRandomPos2 + ")");
                            //GoToTask.ToPosition(NewRandomPos2);
                            CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                    }

                    else if (RandomMovementPlusMinusNumber == 3)
                    {
                        Vector3 NewRandomPos3 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXPlus(),
                            Y = RandomPosYFromTargetPosYMinus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance <= 2 && !me.GetMove)
                        {
                            print("[CombatMovements] рдд в пвп move backward");
                            logs("[CombatMovements] рдд в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos3, 4.5f) && tar().GetDistance < 10)
                        {
                            print("[CombatMovements] рдд в пвп NewRandomPos3 (" + NewRandomPos3 + ")");
                            logs("[CombatMovements] рдд в пвп NewRandomPos3 (" + NewRandomPos3 + ")");
                            //GoToTask.ToPosition(NewRandomPos3);
                            CTM(RandomPosXFromTargetPosXPlus(), RandomPosYFromTargetPosYMinus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                    }

                    else if (RandomMovementPlusMinusNumber == 4)
                    {
                        Vector3 NewRandomPos4 = new Vector3()
                        {
                            X = RandomPosXFromTargetPosXMinus(),
                            Y = RandomPosYFromTargetPosYPlus(),
                            Z = (int)tar().Position.Z
                        };

                        if (tar().GetDistance <= 2 && !me.GetMove)
                        {
                            print("[CombatMovements] рдд в пвп move backward");
                            logs("[CombatMovements] рдд в пвп move backward");
                            Move.Backward(Move.MoveAction.PressKey, RandomMoveDuration());
                        }

                        if (!MovementManager.IsFacing(me.Position, me.Rotation, NewRandomPos4, 4.5f) && tar().GetDistance < 10)
                        {
                            print("[CombatMovements] рдд в пвп NewRandomPos4 (" + NewRandomPos4 + ")");
                            logs("[CombatMovements] рдд в пвп NewRandomPos4 (" + NewRandomPos4 + ")");
                            //GoToTask.ToPosition(NewRandomPos4);
                            CTM(RandomPosXFromTargetPosXMinus(), RandomPosYFromTargetPosYPlus(), (int)tar().Position.Z);
                        }
                        RandomMoveAction();
                    }
                }
            }
        }
    }

    private void DisableIgnoreFightIfNoBait()
    {
        // выключаем игнор боя если не байтят //
        if ((Setting.IgnoreFightWithPlayer || Conditions.ForceIgnoreIsAttacked) && tar().IsValid && tar().IsAttackable)
        {
            if (Subzone() != "Coilfang Reservoir" && Mapzone() != "Coilfang Reservoir" && Mapzone() != "Резервуар Кривого Клыка" && Subzone() != "Резервуар Кривого Клыка" && !MeIsInDungeon())
            {
                if (MeIsMeleeClass)
                {
                    if (tar().GetDistanceZ < 5)
                    {
                        if (Setting.IgnoreFightWithPlayer)
                        {
                            Setting.IgnoreFightWithPlayer = false;
                            logs("[DisableIgnoreFightIfNoBait] выключаем IgnoreFightWithPlayer если не байтят (мили)");
                            print("[DisableIgnoreFightIfNoBait] выключаем IgnoreFightWithPlayer если не байтят (мили)");
                        }
                        if (Conditions.ForceIgnoreIsAttacked)
                        {
                            Conditions.ForceIgnoreIsAttacked = false;
                            logs("[DisableIgnoreFightIfNoBait] выключаем ForceIgnoreIsAttacked если не байтят (мили)");
                            print("[DisableIgnoreFightIfNoBait] выключаем ForceIgnoreIsAttacked если не байтят (мили)");
                        }
                    }
                }

                if (MeIsRangeClass)
                {
                    if ((tar().IsFlying && tar().GetDistance < 30) || (!tar().IsFlying && tar().GetDistanceZ < 20 && tar().GetDistance < 30))
                    {
                        if (Setting.IgnoreFightWithPlayer)
                        {
                            Setting.IgnoreFightWithPlayer = false;
                            logs("[DisableIgnoreFightIfNoBait] выключаем IgnoreFightWithPlayer если не байтят (рдд)");
                            print("[DisableIgnoreFightIfNoBait] выключаем IgnoreFightWithPlayer если не байтят (рдд)");
                        }
                        if (Conditions.ForceIgnoreIsAttacked)
                        {
                            Conditions.ForceIgnoreIsAttacked = false;
                            logs("[DisableIgnoreFightIfNoBait] выключаем ForceIgnoreIsAttacked если не байтят (рдд)");
                            print("[DisableIgnoreFightIfNoBait] выключаем ForceIgnoreIsAttacked не байтят (рдд)");
                        }
                    }
                }
            }
        }
    }

    // fight events //
    private void FightEventsOnOnFightLoop(WoWUnit woWUnit, CancelEventArgs cancelable)
    {

        if ((Fight.InFight || me.InCombat) && !MeIsMountedOrHaveDruidForm() && tar().IsValid && tar().IsAttackable)
        {
            //CombatEventsCheck = DateTime.Now.AddMilliseconds(rnd(50, 500)); // timer on fight events check

            // бой с игроком //
            if (tar().Type == WoWObjectType.Player && tar().IsAttackable)
            {

                CheckFlyBait();
                ReportFightWithPlayer();

                //if (PvpEmoteTimer < DateTime.Now.AddSeconds(rnd(1, 10)) && rnd(1, 1000) == 999 && !Battleground.IsInBattleground())
                //RandomEmoteOnHater();
            }

            CombatMovements();

        }
    }

    // frame update //
    private void CenterTextFrameUpdate()
    {

        // normal update //
        if (DateTime.Now > FramesUpdatePulse)
        {

            FramesUpdatePulse = DateTime.Now.AddSeconds(2);

            //CreateCenterTextFrame();
            CreateAllFrames();
            sleep(10);

            // HS button - cast HS //
            if (ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) < 2000 && !me.InCombat && !Fight.InFight && Lua.LuaDoString<bool>("if " + HSButtonFrameName + " then if " + HSButtonFrameName + ":GetChecked() == 1 then return true end end"))
            {

                for (int l = 0; l < rnd(10, 20) && Lua.LuaDoString<bool>("if " + HSButtonFrameName + ":GetChecked() == 1 then return true end"); l++)
                {
                    if (me.IsFlying)
                    {
                        if (me.GetMove)
                            MovementManager.StopMove();
                        if (!me.GetMove)
                        {
                            runlua("" + HSButtonFrameName + "Text:SetText('landing...')");
                            Move.SitStandOrDescend(Move.MoveAction.PressKey, 10000);
                            Move.SitStandOrDescend(Move.MoveAction.PressKey, 2000);
                            MountTask.Land();
                            Dismount();
                            sleep(2000);
                        }
                        if (!MeIsMountedOrHaveDruidForm())
                            break;
                    }
                }

                for (int l = 0; l < rnd(10, 20) && Lua.LuaDoString<bool>("if " + HSButtonFrameName + ":GetChecked() == 1 then return true end"); l++)
                {
                    if (!me.IsFlying)
                    {
                        runlua("" + HSButtonFrameName + "Text:SetText('casting hs')");
                        if (!me.IsCast)
                        {
                            if (MeIsMountedOrHaveDruidForm())
                                Dismount();
                            if (me.GetMove)
                                MovementManager.StopMove();
                            sleep(500);
                            print("[CenterTextFrameUpdate] casting hs");
                            logs("[CenterTextFrameUpdate] casting hs");
                            ItemsManager.UseItem(6948);
                            Usefuls.WaitIsCasting();
                            sleep(latency);
                            Usefuls.WaitIsCasting();
                            sleep(5000);
                        }
                        if (Bag.GetContainerItemCooldown(6948) > 2000)
                            break;
                    }
                }
            }

            // HS button - disable button when bad conditions for cast HS //
            if (ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) > 2000 && Lua.LuaDoString<bool>("if " + HSButtonFrameName + " then return true end"))
            {
                runlua("" + HSButtonFrameName + ":Disable() " + HSButtonFrameName + ":SetChecked(false) " + HSButtonFrameName + "Text:SetText('CD: " + Bag.GetContainerItemCooldown(6948) / 1000 + " s') " + HSButtonFrameName + "Text:SetTextColor(0.5, 0.5, 0.5, 1)");
            }

            // HS button - hide button when have no HS //
            if (ItemsManager.GetItemCountById(6948) == 0 && Lua.LuaDoString<bool>("if " + HSButtonFrameName + " then if " + HSButtonFrameName + ":IsShown() then return true end end"))
            {
                runlua("" + HSButtonFrameName + ":Hide()");
                print("[CenterTextFrameUpdate] нет камня, прячем кнопку хс");
                logs("[CenterTextFrameUpdate] нет камня, прячем кнопку хс");
            }

            // HS button - enable button when good conditions for cast HS //
            if (ItemsManager.GetItemCountById(6948) > 0 && Bag.GetContainerItemCooldown(6948) < 2000 && !Lua.LuaDoString<bool>("if " + HSButtonFrameName + " then if " + HSButtonFrameName + "Text:GetText() == 'casting hs' or " + HSButtonFrameName + "Text:GetText() == 'landing...' then return true end end") && Lua.LuaDoString<bool>("if " + HSButtonFrameName + " then if " + HSButtonFrameName + ":IsEnabled() == 0 then return true end end"))
            {
                runlua("" + HSButtonFrameName + ":Enable() if (" + HSButtonFrameName + "Text:GetText() ~= 'casting hs' and " + HSButtonFrameName + "Text:GetText() ~= 'landing...' and " + HSButtonFrameName + "Text:GetText() ~= 'HS') then " + HSButtonFrameName + "Text:SetText('HS') " + HSButtonFrameName + "Text:SetTextColor(1, 1, 1, 1) end");
                print("[CenterTextFrameUpdate] хс готов");
                logs("[CenterTextFrameUpdate] хс готов");
            }
            if (Lua.LuaDoString<bool>("if " + MailButtonFrameName + " then if " + MailButtonFrameName + ":GetChecked() == 1 then return true end end"))
            {
                //runlua("" + LoadAddonsButtonFrameName + ":SetChecked(false) " + LoadAddonsButtonFrameName + ":Disable()");
                runlua("" + MailButtonFrameName + ":SetChecked(false)");
                //logs("[CenterTextFrameUpdate] загрузка аддонов");
                FindAndOpenMailbox();
            }
            if (Lua.LuaDoString<bool>("if " + ShowAppButtonFrameName + " then if " + ShowAppButtonFrameName + ":GetChecked() == 1 then return true end end"))
            {
                runlua("" + ShowAppButtonFrameName + ":SetChecked(false)");
                robotManager.Helpful.Win32.Native.ShowWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle, 4); // развернуть окно робота
                robotManager.Helpful.Win32.Native.SetForegroundWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle); // сделать окно робота поверх
                print("[CenterTextFrameUpdate] развернуть окно и сделать поверх");
                logs("[CenterTextFrameUpdate] развернуть окно и сделать поверх");
            }

            if (Lua.LuaDoString<bool>("if " + LoadAddonsButtonFrameName + " then if " + LoadAddonsButtonFrameName + ":GetChecked() == 1 then return true end end"))
            {
                runlua("" + LoadAddonsButtonFrameName + ":SetChecked(false) " + LoadAddonsButtonFrameName + ":Disable()");
                logs("[CenterTextFrameUpdate] загрузка аддонов");
                print("[CenterTextFrameUpdate] загрузка аддонов");
                LoadAddons();
            }

            if (Lua.LuaDoString<bool>("if " + ReloadButtonFrameName + " then if " + ReloadButtonFrameName + ":GetChecked() == 1 then return true end end"))
            {
                runlua("ReloadUI()");
                logs("[CenterTextFrameUpdate] reload ui");
                print("[CenterTextFrameUpdate] reload ui");
            }

            if (Lua.LuaDoString<bool>("if " + LogsButtonFrameName + " then if " + LogsButtonFrameName + ":GetChecked() == 1 then return true end end") && !ShowLogsInWowChat2)
            {
                ShowLogsInWowChat2 = true;
                LogsInWowChat();
                logs("[CenterTextFrameUpdate] показ логов вкл");
                print("[CenterTextFrameUpdate] показ логов вкл");
            }

            if (Lua.LuaDoString<bool>("if " + LogsButtonFrameName + " then if " + LogsButtonFrameName + ":GetChecked() == nil then return true end end") && ShowLogsInWowChat2)
            {
                ShowLogsInWowChat2 = false;
                LogsInWowChat();
                logs("[CenterTextFrameUpdate] показ логов выкл");
                print("[CenterTextFrameUpdate] показ логов выкл");
            }

            if (Lua.LuaDoString<bool>("if " + BigFPSButtonFrameName + " then if " + BigFPSButtonFrameName + ":GetChecked() == 1 then return true end end") && Lua.LuaDoString<bool>("if GetFramerate() < 43 then return true end"))
            {
                //EnableRenderTexture();
                runlua("SetCVar('maxFPS','44') SetCVar('maxFPSBk','44')");
                logs("[CenterTextFrameUpdate] 44 fps");
                print("[CenterTextFrameUpdate] 44 fps");
            }

            if (Lua.LuaDoString<bool>("if " + NameChangeScriptsFrameName + " then if " + NameChangeScriptsFrameName + ":GetChecked() == 1 then return true end end"))
            {
                runlua("" + NameChangeScriptsFrameName + ":SetChecked(false) " + NameChangeScriptsFrameName + ":Disable()");
                logs("[CenterTextFrameUpdate] NameChangeScripts");
                print("[CenterTextFrameUpdate] NameChangeScripts");
                NameChangeScripts();
            }

            if (Lua.LuaDoString<bool>("if " + KillAllTasksFrameName + " then if " + KillAllTasksFrameName + ":GetChecked() == 1 then return true end end"))
            {
                runlua("" + KillAllTasksFrameName + ":SetChecked(false) " + KillAllTasksFrameName + ":Disable()");
                logs("[CenterTextFrameUpdate] KillAllTasks");
                print("[CenterTextFrameUpdate] KillAllTasks");
                KillAllTasks();
            }


            if (Lua.LuaDoString<bool>("if " + CenterTextFrameName + " then if " + CenterTextFrameName + ":IsShown() then return true end end") && !Fight.InFight && !me.IsDead)
            {
                runlua("" + CenterTextFrameName + ":SetBackdropColor(0, 0, 0, 0)");

                if (Products.ProductName == "Quester")
                {
                    if (MeIsKacher())
                    {
                        runlua(FormatLua("" + CenterTextFrameName + ".text:SetText('{0}')", "" + me.Level + "L  |cffFFD700" + MyMoney() + "  " + factioncolor + "" + MyFaction + "  " + classcolor + "" + MyRealName + "\\n|cffFFFFFF" + Step() + ": [" + StepName() + "]\\n|cffFFFFFF" + Logging.Status + ""));
                        //runlua(FormatLua("" + CenterTextFrameName + ".text:SetText('{0}')", "|cffFFD700" + MyMoney() + "  " + factioncolor + "" + MyFaction + " " + classcolor + "" + MyRealName + "\\n|cffFFFFFF" + Step() + ": [" + StepName() + "]"));
                    }

                    if (!MeIsKacher())
                    {
                        if (!ProfileName().Contains("Saronit") && !ProfileName().Contains("Cobalt"))
                        {
                            //var insert = "|cffFFD700" + MyMoney() + "  " + factioncolor + "" + MyFaction + " " + classcolor + "" + MyRealName + "\\n|cffFFFFFF" + Step() + ": [" + StepName() + "]";
                            runlua(FormatLua("" + CenterTextFrameName + ".text:SetText('{0}')", "|cffFFD700" + MyMoney() + "  " + factioncolor + "" + MyFaction + " " + classcolor + "" + MyRealName + "\\n|cffFFFFFF" + Step() + ": [" + StepName() + "]"));
                        }

                        if (ProfileName().Contains("Saronit") || ProfileName().Contains("Cobalt"))
                        {
                            runlua(FormatLua("" + CenterTextFrameName + ".text:SetText('{0}')", "|cffFFD700" + MyMoney() + "  " + factioncolor + "" + MyFaction + " " + classcolor + "" + MyRealName + ""));
                        }
                    }
                }

                if (Products.ProductName != "Quester")
                {
                    runlua(FormatLua("" + CenterTextFrameName + ".text:SetText('{0}')", "|cffFFD700" + MyMoney() + "  " + factioncolor + "" + MyFaction + " " + classcolor + "" + MyRealName + "\\n|cffFFFFFF" + Logging.Status + ""));
                }
            }
        }
    }


    private string FormatLua(string str, params object[] names)
    {
        return string.Format(str, names.Select(s => s.ToString().Replace("'", "\\'").Replace("\"", "\\\"")).ToArray());
    }


    private void CreateAllFrames()
    {
        if (Conditions.InGameAndConnected && KillAllTasksFrameName != "" && NameChangeScriptsFrameName != "" && ButtonsFrameName != "" && LogsButtonFrameName != "" && DontRestoreDownWowButtonFrameName != "" && ShowAppButtonFrameName != "" && LoadAddonsButtonFrameName != "" && BigFPSButtonFrameName != "" && HSButtonFrameName != "" && ReloadButtonFrameName != "" && CenterTextFrameName != "" && PauseButtonFrameName != "" && MailButtonFrameName != "")
        {

            runlua(FormatLua(@"

            if not {0} then
                {0} = CreateFrame('Frame','{0}')
                {0}:SetAllPoints()
                {0}:SetFrameStrata('FULLSCREEN_DIALOG')
                {0}.Close = CreateFrame('BUTTON', nil, {0}, 'UIPanelCloseButton')
                {0}.Close:SetWidth(20)
                {0}.Close:SetHeight(20)
                {0}.Close:SetPoint('CENTER', -28, -185)
            end

            if not {1} then
                copper = GetMoney()
                goldK = ('%dK'):format(copper / 100 / 100 / 1000, (copper / 100) % 100, copper % 100)
		        level = UnitLevel('player')
                englishFaction,_ = UnitFactionGroup('player')

                {1} = CreateFrame('Frame', '{1}', nil)
                {1}:SetBackdrop(StaticPopup1:GetBackdrop())
                {1}:SetHeight(1080)
                {1}:SetWidth(1920)
                {1}:SetFrameStrata('FULLSCREEN')
                {1}:SetPoint('CENTER', 0, 45)
                {1}:SetBackdropBorderColor(0, 0, 0, 0)
                {1}:SetBackdropColor(0, 0, 0, 0)

                {1}.text = {1}:CreateFontString({1}, 'BACKGROUND', 'GameFontNormal')
                {1}.text:SetAllPoints()
                {1}.text:SetText(''..goldK..' '..level..'L '..englishFaction..' '..GetUnitName('player')..' ')
                {1}.text:SetFont(GameFontNormal:GetFont(), 120, 'OUTLINE, THICKOUTLINE')
                {1}.text:SetTextColor(1, 1, 1, 1)
                {1}.text:SetShadowOffset(5, -5)

                {1}.Close = CreateFrame('BUTTON', nil, {1}, 'UIPanelCloseButton')
                {1}.Close:SetWidth(20)
                {1}.Close:SetHeight(20)
                {1}.Close:SetPoint('CENTER', {1}, 3, 33)
				
                --{1}.Close:SetScript('OnClick', function()
                    --{0}:Hide()
                    --DEFAULT_CHAT_FRAME:AddMessage('[UP log]: CenterTextFrame was hide, type /cf to show it again', 0.0, 1.0, 0.7)
                --end)
                --SLASH_{1}1='/cf'
                --SlashCmdList.{1} = function()
                    --if {1}:IsShown() == 1 then {1}:Hide()
                    --else if {1}:IsShown() == nil then {1}:Show() end end
                --end
            end

              if {0} then  
                    if not {2} then
                      {2} = CreateFrame('CheckButton', '{2}', {0}, 'ChatConfigCheckButtonTemplate')
                      {2}:SetPoint('CENTER', 3, -240)
                      {2}:SetHeight(20)
                      {2}:SetWidth(20)
                      --{2}:SetBackdrop(StaticPopup1: GetBackdrop())
                      --{2}:SetBackdropBorderColor(1, 1, 1, 1)
                      --{2}:SetBackdropColor(1, 1, 1, 1)
                      {2}Text:SetText('RL')
                      {2}:SetChecked(false)
                      {2}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                      {2}Text:SetTextColor(1, 1, 1, 1)
                    end
                end

            if {0} then
                if not {3} then
                  {3} = CreateFrame('CheckButton', '{3}', {0}, 'ChatConfigCheckButtonTemplate')
                  {3}:SetPoint('CENTER', 3, -220)
                  {3}:SetHeight(20)
                  {3}:SetWidth(20)
                  --{3}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{3}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{3}:SetBackdropColor(1, 1, 1, 1)
                  {3}Text:SetText('HS')
                  {3}:SetChecked(false)
                  {3}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {3}Text:SetTextColor(1, 1, 1, 1)
                end
            end

            if {0} then
                if not {4} then
                  {4} = CreateFrame('CheckButton', '{4}', {0}, 'ChatConfigCheckButtonTemplate')
                  {4}:SetPoint('CENTER', 195, -260)
                  {4}:SetHeight(20)
                  {4}:SetWidth(20)
                  --{4}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{4}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{4}:SetBackdropColor(1, 1, 1, 1)
                  {4}Text:SetText('F')
                  {4}:SetChecked(false)
                  {4}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {4}Text:SetTextColor(1, 1, 1, 1)
                end
            end

            if {0} then
                if not {5} then
                  {5} = CreateFrame('CheckButton', '{5}', {0}, 'ChatConfigCheckButtonTemplate')
                  {5}:SetPoint('CENTER', 195, -220)
                  {5}:SetHeight(20)
                  {5}:SetWidth(20)
                  --{5}:Disable()
                  --{5}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{5}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{5}:SetBackdropColor(1, 1, 1, 1)
                  {5}Text:SetText('MOD')
                  {5}:SetChecked(false)
                  {5}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {5}Text:SetTextColor(0.5, 0.5, 0.5, 1)
                end
            end

            if {0} then
                if not {6} then
                  {6} = CreateFrame('CheckButton', '{6}', {0}, 'ChatConfigCheckButtonTemplate')
                  {6}:SetPoint('CENTER', 195, -240)
                  {6}:SetHeight(20)
                  {6}:SetWidth(20)
                  --{6}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{6}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{6}:SetBackdropColor(1, 1, 1, 1)
                  {6}Text:SetText('APP')
                  {6}:SetChecked(false)
                  {6}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {6}Text:SetTextColor(1, 1, 1, 1)
                end
            end

            if {0} then
                if not {7} then
                    {7} = CreateFrame('CheckButton', '{7}', {0}, 'ChatConfigCheckButtonTemplate')
                    {7}:SetPoint('CENTER', 195, -280)
                    {7}:SetHeight(20)
                    {7}:SetWidth(20)
                    --{7}:SetBackdrop(StaticPopup1:GetBackdrop())
                    --{7}:SetBackdropBorderColor(1, 1, 1, 1)
                    --{7}:SetBackdropColor(1, 1, 1, 1)
                    {7}Text:SetText('N')
                    {7}:SetChecked(false)
                    {7}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                    {7}Text:SetTextColor(1, 1, 1, 1)
                end
            end

            if {0} then
                if not {8} then
                    {8} = CreateFrame('CheckButton', '{8}', {0}, 'ChatConfigCheckButtonTemplate')
                    {8}:SetPoint('CENTER', -410, 290)
                    {8}:SetHeight(20)
                    {8}:SetWidth(20)
                    --{8}:SetBackdrop(StaticPopup1:GetBackdrop())
                    --{8}:SetBackdropBorderColor(1, 1, 1, 1)
                    --{8}:SetBackdropColor(1, 1, 1, 1)
                    {8}Text:SetText('K')
                    {8}:SetChecked(false)
                    {8}:Disable()
                    {8}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                    {8}Text:SetTextColor(1, 1, 1, 1)
                end
            end
            if {0} then
                if not {9} then
                    {9} = CreateFrame('CheckButton', '{9}', {0}, 'ChatConfigCheckButtonTemplate')
                    {9}:SetPoint('CENTER', 3, -260)
                    {9}:SetHeight(20)
                    {9}:SetWidth(20)
                    --{9}:SetBackdrop(StaticPopup1:GetBackdrop())
                    --{9}:SetBackdropBorderColor(1, 1, 1, 1)
                    --{9}:SetBackdropColor(1, 1, 1, 1)
                    {9}Text:SetText('G2M')
                    {9}:SetChecked(false)
                    {9}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                    {9}Text:SetTextColor(1, 1, 1, 1)
                end
            end


            ", ButtonsFrameName, CenterTextFrameName, ReloadButtonFrameName, HSButtonFrameName, BigFPSButtonFrameName, LoadAddonsButtonFrameName, ShowAppButtonFrameName, NameChangeScriptsFrameName, KillAllTasksFrameName, MailButtonFrameName));

            /*
            runlua(string.Format(@"

            if not {0} then
                {0} = CreateFrame('Frame','{0}')
                {0}:SetAllPoints()
                {0}:SetFrameStrata('FULLSCREEN_DIALOG')
                {0}.Close = CreateFrame('BUTTON', nil, {0}, 'UIPanelCloseButton')
                {0}.Close:SetWidth(20)
                {0}.Close:SetHeight(20)
                {0}.Close:SetPoint('CENTER', -28, -185)
            end

        ", ButtonsFrameName));
            */

            if (Products.InPause)
            {
                Lua.LuaDoString(FormatLua(@"
            if {1} then
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 3, -186)
                  {0}:SetHeight(40)
                  {0}:SetWidth(40)
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('P ON')
                  {0}:SetChecked(true)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
            ", PauseButtonFrameName, ButtonsFrameName));
            }

            if (!Products.InPause)
            {
                runlua(FormatLua(@"
            if {1} then
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 3, -186)
                  {0}:SetHeight(40)
                  {0}:SetWidth(40)
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('P OFF')
                  {0}:SetChecked(false)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
            ", PauseButtonFrameName, ButtonsFrameName));
            }

            /*
            runlua(string.Format(@"
            if not {0} then
                copper = GetMoney()
                goldK = ('%dK'):format(copper / 100 / 100 / 1000, (copper / 100) % 100, copper % 100)
		        level = UnitLevel('player')
                englishFaction,_ = UnitFactionGroup('player')

                {0} = CreateFrame('Frame', '{0}', nil)
                {0}:SetBackdrop(StaticPopup1:GetBackdrop())
                {0}:SetHeight(1080)
                {0}:SetWidth(1920)
                {0}:SetFrameStrata('FULLSCREEN')
                {0}:SetPoint('CENTER', 0, 45)
                {0}:SetBackdropBorderColor(0, 0, 0, 0)
                {0}:SetBackdropColor(0, 0, 0, 0)

                {0}.text = {0}:CreateFontString({0}, 'BACKGROUND', 'GameFontNormal')
                {0}.text:SetAllPoints()
                {0}.text:SetText(''..goldK..' '..level..'L '..englishFaction..' '..GetUnitName('player')..' ')
                {0}.text:SetFont(GameFontNormal:GetFont(), 150, 'OUTLINE, THICKOUTLINE')
                {0}.text:SetTextColor(1, 1, 1, 1)
                {0}.text:SetShadowOffset(5, -5)

                {0}.Close = CreateFrame('BUTTON', nil, {0}, 'UIPanelCloseButton')
                {0}.Close:SetWidth(20)
                {0}.Close:SetHeight(20)
                {0}.Close:SetPoint('CENTER', {0}, 3, 33)
				
                --{0}.Close:SetScript('OnClick', function()
                    --{0}:Hide()
                    --DEFAULT_CHAT_FRAME:AddMessage('[UP log]: CenterTextFrame was hide, type /cf to show it again', 0.0, 1.0, 0.7)
                --end)
                --SLASH_{0}1='/cf'
                --SlashCmdList.{0} = function()
                    --if {0}:IsShown() == 1 then {0}:Hide()
                    --else if {0}:IsShown() == nil then {0}:Show() end end
                --end
            end
            ", CenterTextFrameName));


            runlua(string.Format(@"
          if {1} then  
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 3, -240)
                  {0}:SetHeight(20)
                  {0}:SetWidth(20)
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('RL')
                  {0}:SetChecked(false)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
        ", ReloadButtonFrameName, ButtonsFrameName));
            
            runlua(string.Format(@"
            if {1} then
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 3, -220)
                  {0}:SetHeight(20)
                  {0}:SetWidth(20)
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('HS')
                  {0}:SetChecked(false)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
        ", HSButtonFrameName, ButtonsFrameName));
            
            runlua(string.Format(@"
            if {1} then
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 195, -260)
                  {0}:SetHeight(20)
                  {0}:SetWidth(20)
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('FPS')
                  {0}:SetChecked(false)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
        ", BigFPSButtonFrameName, ButtonsFrameName));
            
            runlua(string.Format(@"
            if {1} then
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 195, -220)
                  {0}:SetHeight(20)
                  {0}:SetWidth(20)
                    {0}:Disable()
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('ADS')
                  {0}:SetChecked(false)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(0.5, 0.5, 0.5, 1)
                end
            end
        ", LoadAddonsButtonFrameName, ButtonsFrameName));
            
            runlua(string.Format(@"
            if {1} then
                if not {0} then
                  {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                  {0}:SetPoint('CENTER', 195, -240)
                  {0}:SetHeight(20)
                  {0}:SetWidth(20)
                  --{0}:SetBackdrop(StaticPopup1: GetBackdrop())
                  --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                  --{0}:SetBackdropColor(1, 1, 1, 1)
                  {0}Text:SetText('APP')
                  {0}:SetChecked(false)
                  {0}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                  {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
        ", ShowAppButtonFrameName, ButtonsFrameName));
            
            runlua(string.Format(@"
            if {1} then
                if not {0} then
                    {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                    {0}:SetPoint('CENTER', 195, -280)
                    {0}:SetHeight(20)
                    {0}:SetWidth(20)
                    --{0}:SetBackdrop(StaticPopup1:GetBackdrop())
                    --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                    --{0}:SetBackdropColor(1, 1, 1, 1)
                    {0}Text:SetText('N')
                    {0}:SetChecked(false)
                    {0}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                    {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
            ", NameChangeScriptsFrameName, ButtonsFrameName));
            
            runlua(string.Format(@"
            if {1} then
                if not {0} then
                    {0} = CreateFrame('CheckButton', '{0}', {1}, 'ChatConfigCheckButtonTemplate')
                    {0}:SetPoint('CENTER', -410, 290)
                    {0}:SetHeight(20)
                    {0}:SetWidth(20)
                    --{0}:SetBackdrop(StaticPopup1:GetBackdrop())
                    --{0}:SetBackdropBorderColor(1, 1, 1, 1)
                    --{0}:SetBackdropColor(1, 1, 1, 1)
                    {0}Text:SetText('K')
                    {0}:SetChecked(false)
                    {0}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                    {0}Text:SetTextColor(1, 1, 1, 1)
                end
            end
            ", KillAllTasksFrameName, ButtonsFrameName));
            */

            /*
            Lua.LuaDoString(string.Format(@"
                if not {0} then
                    local {0} = CreateFrame('BUTTON', '{0}', nil, 'UIPanelButtonTemplate')
                    {0}:SetPoint('CENTER', -120, -250)
                    {0}:SetHeight(150)
                    {0}:SetWidth(120)
                    {0}Text:SetText('ok')
                    {0}Text:SetFont(GameFontNormal:GetFont(), 88)
                    {0}Text:SetTextColor(1, 1, 0, 1)
                    {0}Text:SetShadowOffset(2, -2)
                    {0}:Hide()
                    --{0}:SetScript('OnClick', function() 
                        --UIFrameFlashStop(UIParent) 
                        --UIFrameFlashStop(LowHealthFrame) 
                        --LowHealthFrame:Hide() 
                        --if {0} then if {0}:IsShown() then {0}.text:SetText(''..goldK..' '..level..'L '..englishFaction..' '..GetUnitName('player')..' ') {0}:SetBackdropColor(0, 0, 0, 0) end end
                    --if not UIParent:IsShown() then UIParent:Show() end 
                    --{0}:Hide()
                    --end)
                end

                ", OKButtonFrameName));
            */

            if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600)
            {

                runlua(FormatLua(@"
                if {0} then
                    if not {1} then
                        {1} = CreateFrame('CheckButton', '{1}', {0}, 'ChatConfigCheckButtonTemplate')
                        {1}:SetPoint('CENTER', 195, -180)
                        {1}:SetHeight(20)
                        {1}:SetWidth(20)
                        --{1}:SetBackdrop(StaticPopup1: GetBackdrop())
                        --{1}:SetBackdropBorderColor(1, 1, 1, 1)
                        --{1}:SetBackdropColor(1, 1, 1, 1)
                        {1}Text:SetText('L')
                        {1}:SetChecked(true)
                        {1}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                        {1}Text:SetTextColor(1, 1, 1, 1)
                    end
                end

                if {0} then
                    if not {2} then
                        {2} = CreateFrame('CheckButton', '{2}', {0}, 'ChatConfigCheckButtonTemplate')
                        {2}:SetPoint('CENTER', 195, -200)
                        {2}:SetHeight(20)
                        {2}:SetWidth(20)
                        --{2}:SetBackdrop(StaticPopup1:GetBackdrop())
                        --{2}:SetBackdropBorderColor(1, 1, 1, 1)
                        --{2}:SetBackdropColor(1, 1, 1, 1)
                        {2}Text:SetText('DNRW')
                        {2}:SetChecked(true)
                        {2}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                        {2}Text:SetTextColor(1, 1, 1, 1)
                    end
                end

                ", ButtonsFrameName, LogsButtonFrameName, DontRestoreDownWowButtonFrameName));

            }

            if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) < 600)
            {

                runlua(FormatLua(@"
                if {0} then
                    if not {1} then
                        {1} = CreateFrame('CheckButton', '{1}', {0}, 'ChatConfigCheckButtonTemplate')
                        {1}:SetPoint('CENTER', 195, -180)
                        {1}:SetHeight(20)
                        {1}:SetWidth(20)
                        --{1}:SetBackdrop(StaticPopup1: GetBackdrop())
                        --{1}:SetBackdropBorderColor(1, 1, 1, 1)
                        --{1}:SetBackdropColor(1, 1, 1, 1)
                        {1}Text:SetText('L')
                        {1}:SetChecked(false)
                        {1}Text:SetFont(GameFontNormal: GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                        {1}Text:SetTextColor(1, 1, 1, 1)
                    end
                end

                if {0} then
                    if not {2} then
                        {2} = CreateFrame('CheckButton', '{2}', {0}, 'ChatConfigCheckButtonTemplate')
                        {2}:SetPoint('CENTER', 195, -200)
                        {2}:SetHeight(20)
                        {2}:SetWidth(20)
                        --{2}:SetBackdrop(StaticPopup1:GetBackdrop())
                        --{2}:SetBackdropBorderColor(1, 1, 1, 1)
                        --{2}:SetBackdropColor(1, 1, 1, 1)
                        {2}Text:SetText('DNRW')
                        {2}:SetChecked(false)
                        {2}Text:SetFont(GameFontNormal:GetFont(), 14, 'OUTLINE, THICKOUTLINE')
                        {2}Text:SetTextColor(1, 1, 1, 1)
                    end
                end

                ", ButtonsFrameName, LogsButtonFrameName, DontRestoreDownWowButtonFrameName));

            }
            FramesCreated = true;
        }
    }

    private void LoadAddons()
    {
        IdTip();
        GearScore();
        //Postal();
    }

    private void TopFit()
    {

    }

    private void OpenAllMail()
    {
        runlua(@"

            if not OpenAllFrame then
			    OpenAllFrame = CreateFrame('Frame','OpenAllFrame')
                DEFAULT_CHAT_FRAME:AddMessage('[UP log]: OpenAll addon loaded', 0.0, 1.0, 0.7)
			    local deletedelay, t = 0.2, 0
			    local takingOnlyCash = false
			    local button, button2, waitForMail, doNothing, openAll, openAllCash, openMail, lastopened, stopOpening, onEvent, needsToWait, copper_to_pretty_money, total_cash
			    local _G = _G
			    local baseInboxFrame_OnClick
			    function doNothing() end

			    function openAll()
				    if GetInboxNumItems() == 0 then return end
				    button:SetScript('OnClick', nil)
				    button2:SetScript('OnClick', nil)
				    baseInboxFrame_OnClick = InboxFrame_OnClick
				    InboxFrame_OnClick = doNothing
				    button:RegisterEvent('UI_ERROR_MESSAGE')
				    openMail(GetInboxNumItems())
			    end
			    function openAllCash()
				    takingOnlyCash = true
				    openAll()
			    end
			    function openMail(index)
				    if not InboxFrame:IsVisible() then return stopOpening('Need a mailbox.') end
				    if index == 0 then return stopOpening('Reached the end.') end
				    local _, _, _, _, money, COD, _, numItems = GetInboxHeaderInfo(index)
				    if money > 0 then
					    TakeInboxMoney(index)
					    needsToWait = true
					    if total_cash then total_cash = total_cash - money end
				    elseif (not takingOnlyCash) and numItems and (numItems > 0) and COD <= 0 then
					    TakeInboxItem(index)
					    needsToWait = true
				    end
				    local items = GetInboxNumItems()
				    if (numItems and numItems > 1) or (items > 1 and index <= items) then
					    lastopened = index
					    t = 0
					    button:SetScript('OnUpdate', waitForMail)
				    else
					    stopOpening('All done.')
				    end
			    end
			    function waitForMail()
				    t = t + arg1
				    if (not needsToWait) or (t > deletedelay) then
					    needsToWait = false
					    button:SetScript('OnUpdate', nil)
					    local _, _, _, _, money, COD, _, numItems = GetInboxHeaderInfo(lastopened)
					    if money > 0 or ((not takingOnlyCash) and COD <= 0 and numItems and (numItems > 0)) then
						    --The lastopened index inbox item still contains stuff we want
						    openMail(lastopened)
					    else
						    openMail(lastopened - 1)
					    end
				    end
			    end
			    function stopOpening(msg, ...)
				    button:SetScript('OnUpdate', nil)
				    button:SetScript('OnClick', openAll)
				    button2:SetScript('OnClick', openAllCash)
				    if baseInboxFrame_OnClick then
					    InboxFrame_OnClick = baseInboxFrame_OnClick
				    end
				    button:UnregisterEvent('UI_ERROR_MESSAGE')
				    takingOnlyCash = false
				    total_cash = nil
				    if msg then DEFAULT_CHAT_FRAME:AddMessage('OpenAll: '..msg, ...) end
			    end
			    function onEvent(frame, event, arg1, arg2, arg3, arg4)
				    if event == 'UI_ERROR_MESSAGE' then
					    if arg1 == ERR_INV_FULL then
						    stopOpening('Stopped, inventory is full.')
					    end
				    end
			    end
			    local function makeButton(id, text, w, h, x, y)
				    local button = CreateFrame('Button', id, InboxFrame, 'UIPanelButtonTemplate')
				    button:SetWidth(w)
				    button:SetHeight(h)
				    button:SetPoint('CENTER', InboxFrame, 'TOP', x, y)
				    button:SetText(text)
				    return button
			    end
			    button = makeButton('OpenAllButton', 'Take All', 60, 25, -50, -410)
			    button:SetScript('OnClick', openAll)
			    button:SetScript('OnEvent', onEvent)
			    button2 = makeButton('OpenAllButton2', 'Take Cash', 60, 25, 20, -410)
			    button2:SetScript('OnClick', openAllCash)

			    button:SetScript('OnEnter', function()
				    GameTooltip:SetOwner(button, 'ANCHOR_RIGHT')
				    GameTooltip:AddLine(string.format('%d messages', GetInboxNumItems()), 1, 1, 1)
				    GameTooltip:Show()
			    end)
			    button:SetScript('OnLeave', function() GameTooltip:Hide() end)

			    function copper_to_pretty_money(c)
				    if c > 10000 then
					    return ('%d|cffffd700g|r%d|cffc7c7cfs|r%d|cffeda55fc|r'):format(c/10000, (c/100)%100, c%100)
				    elseif c > 100 then
					    return ('%d|cffc7c7cfs|r%d|cffeda55fc|r'):format((c/100)%100, c%100)
				    else
					    return ('%d|cffeda55fc|r'):format(c%100)
				    end
			    end
			    button2:SetScript('OnEnter', function()
				    if not total_cash then
					    total_cash = 0
					    for index=0, GetInboxNumItems() do
						    total_cash = total_cash + select(5, GetInboxHeaderInfo(index))
					    end
				    end
				    GameTooltip:SetOwner(button, 'ANCHOR_RIGHT')
				    GameTooltip:AddLine(copper_to_pretty_money(total_cash), 1, 1, 1)
				    GameTooltip:Show()
			    end)
			    button2:SetScript('OnLeave', function() GameTooltip:Hide() end)
		    end

            ");
    }

    private void IdTip()
    {
        runlua(@"

            if not IdTip then
			    local IdTip = CreateFrame('FRAME','IdTip')
                DEFAULT_CHAT_FRAME:AddMessage('[UP log]: IdTip addon loaded', 0.0, 1.0, 0.7)
					    local select, UnitBuff, UnitDebuff, UnitAura, tonumber, strfind, hooksecurefunc =
				    select, UnitBuff, UnitDebuff, UnitAura, tonumber, strfind, hooksecurefunc

			    local function addLine(self,id,isItem)
				    if isItem then
					    self:AddDoubleLine('Item ID:','|cffffffff'..id)
				    else
					    self:AddDoubleLine('Spell ID:','|cffffffff'..id)
				    end
				    self:Show()
			    end

			    -- Spell Hooks ----------------------------------------------------------------
			    hooksecurefunc(GameTooltip, 'SetUnitBuff', function(self,...)
				    local id = select(11,UnitBuff(...))
				    if id then addLine(self,id) end
			    end)

			    hooksecurefunc(GameTooltip, 'SetUnitDebuff', function(self,...)
				    local id = select(11,UnitDebuff(...))
				    if id then addLine(self,id) end
			    end)

			    hooksecurefunc(GameTooltip, 'SetUnitAura', function(self,...)
				    local id = select(11,UnitAura(...))
				    if id then addLine(self,id) end
			    end)

			    GameTooltip:HookScript('OnTooltipSetSpell', function(self)
				    local id = select(3,self:GetSpell())
				    if id then addLine(self,id) end
			    end)

			    -- Item Hooks -----------------------------------------------------------------
			    hooksecurefunc('SetItemRef', function(link, ...)
				    local id = tonumber(link:match('spell:(%d+)'))
				    if id then addLine(ItemRefTooltip,id) end
			    end)

			    local function attachItemTooltip(self)
				    local link = select(2,self:GetItem())
				    if not link then return end
				    local id = select(3,strfind(link, '^|%x+|Hitem:(%-?%d+):(%d+):(%d+):(%d+):(%d+):(%d+):(%-?%d+):(%-?%d+)'))
				    if id then addLine(self,id,true) end
			    end

			    GameTooltip:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ItemRefTooltip:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ItemRefShoppingTooltip1:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ItemRefShoppingTooltip2:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ItemRefShoppingTooltip3:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ShoppingTooltip1:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ShoppingTooltip2:HookScript('OnTooltipSetItem', attachItemTooltip)
			    ShoppingTooltip3:HookScript('OnTooltipSetItem', attachItemTooltip)

			    local function F() 
				    local g=GameTooltip;
				    if g:IsShown() then 
				    local d=UnitGUID('mouseover')
				    local B = tonumber(d:sub(5,5), 16) % 8;
				    local C = tonumber(d:sub(6,12), 16);
				    local D = tonumber(d:sub(9,12), 16);
				    local E = tonumber(d:sub(13,18), 16);
				    if B==0 and UnitName('mouseover') ~= GetUnitName('player') then g:AddLine('PLAYER гуид '..E);
				    else if B==0 and UnitName('mouseover') == GetUnitName('player') then g:AddLine('PLAYER гуид LIKE A BOSS') end end;
				    if B==4 and UnitName('mouseover') ~= GetUnitName('pet') then g:AddLine('PET гуид '..C);
				    else if B==4 and UnitName('mouseover') == GetUnitName('pet') then g:AddLine('PET гуид LIKE A BOSS PET') end end;
				    if B==3 then g:AddLine('NPC ID: '..D) end;
			    --	g:AppendText(' - '..d);
				    g:AppendText('  ');
				    end;
				    end;
				    local f=CreateFrame('frame');f:RegisterEvent('UPDATE_MOUSEOVER_UNIT');f:SetScript('OnEvent',F)

			    -- Quest Hooks ----------------------------------------------------------------
			    local QuestLevel_original_GetQuestLogTitle = GetQuestLogTitle; 
			    function GetQuestLogTitle(questIndex) 
			      questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete, isDaily, questID = QuestLevel_original_GetQuestLogTitle(questIndex) 
			      if (questTitle and (not isHeader)) then 
			       --questTitle = '['..questID..'] '.. questTitle 
			       questTitle = questTitle ..' ['..questID..'] '
			      end 
			      return questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete, isDaily, questID 
			    end

			    hooksecurefunc('SetItemRef', function(link, ...) 
				      local id = tonumber(link:match(':(%d+)')) 
				      if (id) then   
				    ItemRefTooltip:AddDoubleLine('ID: ' .. id); 
				    ItemRefTooltip:Show(); 
			       end 
			    end)
		    end

            ");
    }

    private void CustomNameplates()
    {
        runlua(@"

		    if not CustomNameplates then
			    CustomNameplates = CreateFrame('Frame','CustomNameplates')
			    local cfg = {

					    --//Полосы здоровья и касты]]--
					    HPheight = 4 ,--высота
					    HPwidth = 85 ,--ширина
					
					    CBheight = 4 , --Высота каст бара
					    CBtieFont = 7 , --Размер шрифта каст бар
					    border = 1 , --размер бортика
					
					    --//рейдовая иконка]]--
					    rheight = 15 ,-- размер (например 15 означает , что размер иконки будет высотой 15 и шириной 15 пикселей)
					    Rpoint          = 'RIGHT' , --чем цепляем
					    RrelativePoint = 'LEFT' , --куда цепляем
					    Rx             = 0 , --координата Х (по ширине)
					    Ry             = -4 , --координата У (по высоте)
					
					    --//Уровень]]--
					    LvLFontSize = 6 , --размер букв
					    LvLpoint          = 'RIGHT' , --чем цепляем
					    LvLrelativePoint = 'LEFT'  ,--куда цепляем
					    LvLx             = 10 , --координата Х (по ширине)
					    LvLy             = 3 , --координата У (по высоте)
					
					    --//Имя]]--
					    NameFontSize = 8 , --размер букв имени
					    Npoint          = 'BOTTOM' , --чем цепляем
					    NrelativePoint = 'TOP'  ,--куда цепляем
					    Nx             = 0 , --координата Х (по ширине)
					    Ny             = -12 , --координата У (по высоте))
					
					    --//Цвета]]
					    hostileunit    = {r=0.8, g=0.2, b=0.2},  --цвет враждебного инита
					    friendlyunit   = {r=0.23, g=0.79, b=0.23},  --цвет дружественного юнита
					    friendlyplayer = {r=0.2, g=0.2, b=0.95},  --цвет дружественного игрока
					    neutralunit    = {r=0.9, g=0.9, b=0.15},  --цвет нейтрального юнита
			    }

			    local media = {
				    ['font'] = [=[Fonts\FRIZQT__.TTF]=],
				    ['normTex'] = [[Interface\Buttons\WHITE8x8]],
				    ['glowTex'] = [[Interface\Buttons\WHITE8x8]],
				    ['back'] = [[Interface\Buttons\WHITE8x8]],
			    }

			    local backdrop = {
				    edgeFile = media.glowTex, edgeSize = cfg.border,
				    insets = {left = cfg.border, right = cfg.border, top = cfg.border, bottom = cfg.border}
			    }

			    local numChildren = -1
			    local frames = {}

			    local function UpdateCastTime(self, curValue)
				    local minValue, maxValue = self:GetMinMaxValues()
				    if self.channeling then
					    local casttime = string.format('%.1f', curValue)
					    local castcur = string.format('\n%.1f', maxValue)
					    self.time:SetText(casttime..castcur)
				    else
					    local casttime = string.format('%.1f', (maxValue-curValue))
					    local castcur = string.format('\n%.1f', maxValue)
					    self.time:SetText(casttime..castcur)
				    end
			    end

			    local function Healthbar_OnUpdate(self)

				    local r, g, b = self:GetStatusBarColor()
				    if g + b == 0 then
					    self.r, self.g, self.b = cfg.hostileunit.r, cfg.hostileunit.g, cfg.hostileunit.b
					    self:SetStatusBarColor(cfg.hostileunit.r, cfg.hostileunit.g, cfg.hostileunit.b)
				    elseif r + b == 0 then
					    self.r, self.g, self.b = cfg.friendlyunit.r, cfg.friendlyunit.g, cfg.friendlyunit.b
					    self:SetStatusBarColor(cfg.friendlyunit.r, cfg.friendlyunit.g, cfg.friendlyunit.b)
				    elseif r + g == 0 then
					    self.r, self.g, self.b = cfg.friendlyplayer.r, cfg.friendlyplayer.g, cfg.friendlyplayer.b
					    self:SetStatusBarColor(cfg.friendlyplayer.r, cfg.friendlyplayer.g, cfg.friendlyplayer.b)
				    elseif 2 - (r + g) < 0.05 and b == 0 then
					    self.r, self.g, self.b = cfg.neutralunit.r, cfg.neutralunit.g, cfg.neutralunit.b
					    self:SetStatusBarColor(cfg.neutralunit.r, cfg.neutralunit.g, cfg.neutralunit.b)
				    else
					    self.r, self.g, self.b = r, g, b
				    end

				    frame = self:GetParent()
				    if not frame.oldglow:IsShown() then
					    self.hpBorder:SetBackdropBorderColor(0, 0, 0)
				    else
					    local r, g, b = frame.oldglow:GetVertexColor()
					    if g + b == 0 then
						    self.hpBorder:SetBackdropBorderColor(1, 0, 0)
					    else
						    self.hpBorder:SetBackdropBorderColor(1, 1, 0)
					    end
				    end
					    self:SetStatusBarColor(self.r, self.g, self.b)

				    self:ClearAllPoints()
				    self:SetPoint('CENTER', self:GetParent(), 0, 10)
				    self:SetHeight(cfg.HPheight)
				    self:SetWidth(cfg.HPwidth)
				
				    self.hpBackground:SetVertexColor(self.r * 0.25, self.g * 0.25, self.b * 0.25)
				
				    local nameString = frame.oldname:GetText()
				    if nameString == GetUnitName('pet') then nameString = 'i am pet' end
				    if string.len(nameString) < cfg.HPwidth/3 then
					    frame.name:SetText(nameString)
				    else
					    frame.name:SetFormattedText(nameString:sub(0, cfg.HPwidth/3)..'...')
				    end
				
				    frame.level:Hide() -- скрыть уровень
				    frame.level:ClearAllPoints()
				    frame.level:SetPoint(cfg.LvLpoint, frame.healthBar, cfg.LvLrelativePoint, cfg.LvLx, cfg.LvLy)
				    if frame.boss:IsShown() then
					    frame.level:SetText('БОС')
					    frame.level:SetTextColor(0.8, 0.05, 0)
					    --frame.level:Show()
				    end
				    frame.highlight:SetAllPoints(self)
			    end

			    local function onHide(self)
				    self.highlight:Hide()
			    end
			 
			    local function SkinObjects(frame)
				    frame.healthBar, frame.castBar = frame:GetChildren()
				    local healthBar, castBar = frame.healthBar, frame.castBar
				    local glowRegion, overlayRegion, castbarOverlay, shieldedRegion, spellIconRegion, highlightRegion, nameTextRegion, levelTextRegion, bossIconRegion, raidIconRegion, stateIconRegion = frame:GetRegions()
				    frame.oldname = nameTextRegion
				    nameTextRegion:Hide()
				    nameTextRegion.Show = function() end
				    frame.name = frame:CreateFontString()
				    frame.name:SetPoint(cfg.Npoint, healthBar, cfg.NrelativePoint, cfg.Nx, cfg.Ny)
				    frame.name:SetFont(media.font, cfg.NameFontSize, 'OUTLINE')
				    frame.name:SetTextColor(0.9, 0.9, 0.9)
				    frame.name:SetShadowOffset(1, -1)
				    frame.level = levelTextRegion
				    levelTextRegion:SetFont(media.font, cfg.LvLFontSize, 'OUTLINE')
				    levelTextRegion:SetShadowOffset(1, -1)
				    frame.boss = bossIconRegion
				    healthBar:SetStatusBarTexture(media.normTex)
				    healthBar.hpBackground = healthBar:CreateTexture(nil, 'BORDER')
				    healthBar.hpBackground:SetAllPoints(healthBar)
				    healthBar.hpBackground:SetTexture(media.back)
				    healthBar.hpBackground:SetVertexColor(0.15, 0.15, 0.15)
				    healthBar.hpBorder = CreateFrame('Frame', nil, healthBar)
				    healthBar.hpBorder:SetFrameLevel(healthBar:GetFrameLevel() -1 > 0 and healthBar:GetFrameLevel() -1 or 0)
				    healthBar.hpBorder:SetPoint('TOPLEFT', healthBar, 'TOPLEFT', -cfg.border, cfg.border)
				    healthBar.hpBorder:SetPoint('BOTTOMRIGHT', healthBar, 'BOTTOMRIGHT', cfg.border, -cfg.border)
				    healthBar.hpBorder:SetBackdrop(backdrop)
				    healthBar.hpBorder:SetBackdropColor(0, 0, 0)
				    healthBar.hpBorder:SetBackdropBorderColor(0, 0, 0)
				    healthBar:SetScript('OnUpdate', Healthbar_OnUpdate)			
				    highlightRegion:SetTexture(media.normTex)
				    highlightRegion:SetVertexColor(0.25, 0.25, 0.25)
				    frame.highlight = highlightRegion	
				    local castbar = CreateFrame('StatusBar', nil, frame)
				    castbar:SetHeight(cfg.CBheight)
				    castbar:SetWidth(cfg.HPwidth-(cfg.CBheight+8))
				    castbar:SetStatusBarTexture(media.normTex)
				    castbar:GetStatusBarTexture():SetHorizTile(false)
				    castbar:GetStatusBarTexture():SetVertTile(false)
				    castbar:SetPoint('TOPRIGHT', healthBar, 'BOTTOMRIGHT', 0, -8)		   
				    castbar.showTradeSkills = true
				    castbar.showShield = true
				    castbar.casting = true
				    castbar.channeling = true
				    castbar.holdTime = 0				  
				    castbar.Border = castbar:CreateTexture(nil, 'BACKGROUND')
				    castbar.Border:SetSize(castbarOverlay:GetSize())
				    castbar.Border:SetAllPoints(castbar)
				    castbar.Border:SetTexture(media.back)
				    castbar.Border:SetVertexColor(0,0,0, 0.8)				     
				    castbar.Icon = castbar:CreateTexture(nil, 'ARTWORK')
				    castbar.Icon:SetSize(spellIconRegion:GetSize())
				    castbar.Icon:SetPoint('RIGHT', castbar, 'LEFT', -2, 0)
				    castbar.Icon:SetTexCoord(0.1, 0.9, 0.1, 0.9)
				    castbar.time = castbar:CreateFontString(nil, 'ARTWORK')
				    castbar.time:SetPoint('RIGHT', castbar.Icon, 'LEFT', -4, 0)
				    castbar.time:SetFont(media.font, cfg.CBtieFont, 'OUTLINE')
				    castbar.time:SetTextColor(0.84, 0.75, 0.65)
				    castbar.time:SetShadowOffset(1, -1)
				    castbar:Hide()   
				    castbar:RegisterEvent('UNIT_SPELLCAST_START')
				    castbar:RegisterEvent('UNIT_SPELLCAST_FAILED')
				    castbar:RegisterEvent('UNIT_SPELLCAST_STOP')
				    castbar:RegisterEvent('UNIT_SPELLCAST_INTERRUPTED')
				    castbar:RegisterEvent('UNIT_SPELLCAST_INTERRUPTIBLE')
				    castbar:RegisterEvent('UNIT_SPELLCAST_NOT_INTERRUPTIBLE')
				    castbar:RegisterEvent('UNIT_SPELLCAST_DELAYED')
				    castbar:RegisterEvent('UNIT_SPELLCAST_CHANNEL_START')
				    castbar:RegisterEvent('UNIT_SPELLCAST_CHANNEL_UPDATE')
				    castbar:RegisterEvent('UNIT_SPELLCAST_CHANNEL_STOP')
				    castbar:SetScript('OnEvent', Castbar_OnEvent)
				    castbar:SetScript('OnUpdate', Castbar_OnUpdate)
				    castbar:HookScript('OnValueChanged', UpdateCastTime)				   
				    frame.oldglow = glowRegion
				    frame:SetScript('OnHide', onHide)
				    frames[frame] = true	
				    glowRegion:SetTexture(nil)
				    overlayRegion:SetTexture(nil)
				    shieldedRegion:SetTexture(nil)
				    castbarOverlay:SetTexture(nil)
				    stateIconRegion:SetTexture(nil)
				    bossIconRegion:SetTexture(nil)
			    end
			 
			    local select = select
			    local function HookFrames(...)
				    for index = 1, select('#', ...) do
					    local frame = select(index, ...)
					    local region = frame:GetRegions()
					    if(not frames[frame] and not frame:GetName() and region and region:GetObjectType() == 'Texture' and region:GetTexture() == [=[Interface\TargetingFrame\UI-TargetingFrame-Flash]=]) then
						    SkinObjects(frame)
					    end
				    end
			    end
			 
			    local t = .1
			    CreateFrame('Frame'):SetScript('OnUpdate', function(self, elapsed)
				    if(WorldFrame:GetNumChildren() ~= numChildren) then
					    numChildren = WorldFrame:GetNumChildren()
					    HookFrames(WorldFrame:GetChildren())
				    end
			    end) 
		    end

		    ");
    }

    private void GearScore()
    {
        int gearscore = Lua.LuaDoString<int>(@"
            if not GearScoreFrame then
                GearScoreFrame = CreateFrame('Frame','GearScoreFrame')
                DEFAULT_CHAT_FRAME:AddMessage('[UP log]: GearScore loaded', 0.0, 1.0, 0.7)
			    function GearScore_OnEvent(GS_Nil, GS_EventName, GS_Prefix, GS_AddonMessage, GS_Whisper, GS_Sender)
				    if ( GS_EventName == 'PLAYER_REGEN_ENABLED' ) then GS_PlayerIsInCombat = false; return; end
				    if ( GS_EventName == 'PLAYER_REGEN_DISABLED' ) then GS_PlayerIsInCombat = true; return; end
				    if ( GS_EventName == 'PLAYER_EQUIPMENT_CHANGED' ) then
					    local MyGearScore = GearScore_GetScore(UnitName('player'), 'player');
					    local Red, Blue, Green = GearScore_GetQuality(MyGearScore)
					    PersonalGearScore:SetText(MyGearScore); PersonalGearScore:SetTextColor(Red, Green, Blue, 1)
				    end
				    if ( GS_EventName == 'ADDON_LOADED' ) then
					    if ( GS_Prefix == 'GearScoreLite' ) then
						    if not ( GS_Settings ) then	GS_Settings = GS_DefaultSettings end
						    if not ( GS_Data ) then GS_Data = {}; end; if not ( GS_Data[GetRealmName()] ) then GS_Data[GetRealmName()] = { ['Players'] = {} }; end
						    for i, v in pairs(GS_DefaultSettings) do if not ( GS_Settings[i] ) then GS_Settings[i] = GS_DefaultSettings[i]; end; end
					    end
				    end
			    end
			    function GearScore_GetScore(Name, Target)
				    if ( UnitIsPlayer(Target) ) then
					    local PlayerClass, PlayerEnglishClass = UnitClass(Target);
					    local GearScore = 0; local PVPScore = 0; local ItemCount = 0; local LevelTotal = 0; local TitanGrip = 1; local TempEquip = {}; local TempPVPScore = 0
					    if ( GetInventoryItemLink(Target, 16) ) and ( GetInventoryItemLink(Target, 17) ) then
						    local ItemName, ItemLink, ItemRarity, ItemLevel, ItemMinLevel, ItemType, ItemSubType, ItemStackCount, ItemEquipLoc, ItemTexture = GetItemInfo(GetInventoryItemLink(Target, 16))
						    if ( ItemEquipLoc == 'INVTYPE_2HWEAPON' ) then TitanGrip = 0.5; end
					    end
					    if ( GetInventoryItemLink(Target, 17) ) then
						    local ItemName, ItemLink, ItemRarity, ItemLevel, ItemMinLevel, ItemType, ItemSubType, ItemStackCount, ItemEquipLoc, ItemTexture = GetItemInfo(GetInventoryItemLink(Target, 17))
						    if ( ItemEquipLoc == 'INVTYPE_2HWEAPON' ) then TitanGrip = 0.5; end
						    TempScore, ItemLevel = GearScore_GetItemScore(GetInventoryItemLink(Target, 17));
						    if ( PlayerEnglishClass == 'HUNTER' ) then TempScore = TempScore * 0.3164; end
						    GearScore = GearScore + TempScore * TitanGrip;	ItemCount = ItemCount + 1; LevelTotal = LevelTotal + ItemLevel
					    end
					    for i = 1, 18 do
						    if ( i ~= 4 ) and ( i ~= 17 ) then
							    ItemLink = GetInventoryItemLink(Target, i)
							    GS_ItemLinkTable = {}
							    if ( ItemLink ) then
								    local ItemName, ItemLink, ItemRarity, ItemLevel, ItemMinLevel, ItemType, ItemSubType, ItemStackCount, ItemEquipLoc, ItemTexture = GetItemInfo(ItemLink)
								    if ( GS_Settings['Detail'] == 1 ) then GS_ItemLinkTable[i] = ItemLink; end
								    TempScore = GearScore_GetItemScore(ItemLink);
								    if ( i == 16 ) and ( PlayerEnglishClass == 'HUNTER' ) then TempScore = TempScore * 0.3164; end
								    if ( i == 18 ) and ( PlayerEnglishClass == 'HUNTER' ) then TempScore = TempScore * 5.3224; end
								    if ( i == 16 ) then TempScore = TempScore * TitanGrip; end
								    GearScore = GearScore + TempScore;	ItemCount = ItemCount + 1; LevelTotal = LevelTotal + ItemLevel
							    end
						    end;
					    end
					    if ( GearScore <= 0 ) and ( Name ~= UnitName('player') ) then
						    GearScore = 0; return 0,0;
					    elseif ( Name == UnitName('player') ) and ( GearScore <= 0 ) then
						    GearScore = 0; end
				    if ( ItemCount == 0 ) then LevelTotal = 0; end		    
				    return floor(GearScore), floor(LevelTotal/ItemCount)
				    end
			    end
			    function GearScore_GetEnchantInfo(ItemLink, ItemEquipLoc)
				    local found, _, ItemSubString = string.find(ItemLink, '^|c%x+|H(.+)|h%[.*%]');
				    local ItemSubStringTable = {}
				    for v in string.gmatch(ItemSubString, '[^:]+') do tinsert(ItemSubStringTable, v); end
				    ItemSubString = ItemSubStringTable[2]..':'..ItemSubStringTable[3], ItemSubStringTable[2]
				    local StringStart, StringEnd = string.find(ItemSubString, ':') 
				    ItemSubString = string.sub(ItemSubString, StringStart + 1)
				    if ( ItemSubString == '0' ) and ( GS_ItemTypes[ItemEquipLoc]['Enchantable'] )then
					     --table.insert(MissingEnchantTable, ItemEquipLoc)
					     local percent = ( floor((-2 * ( GS_ItemTypes[ItemEquipLoc]['SlotMOD'] )) * 100) / 100 );
					     return(1 + (percent/100));
				    else
				    return 1;
				    end
			    end						
			    function GearScore_GetItemScore(ItemLink)
				    local QualityScale = 1; local PVPScale = 1; local PVPScore = 0; local GearScore = 0
				    if not ( ItemLink ) then return 0, 0; end
				    local ItemName, ItemLink, ItemRarity, ItemLevel, ItemMinLevel, ItemType, ItemSubType, ItemStackCount, ItemEquipLoc, ItemTexture = GetItemInfo(ItemLink); local Table = {}; local Scale = 1.8618
				    if ( ItemRarity == 5 ) then QualityScale = 1.3; ItemRarity = 4;
				    elseif ( ItemRarity == 1 ) then QualityScale = 0.005;  ItemRarity = 2
				    elseif ( ItemRarity == 0 ) then QualityScale = 0.005;  ItemRarity = 2 end
				    if ( ItemRarity == 7 ) then ItemRarity = 3; ItemLevel = 187.05; end
				    if ( GS_ItemTypes[ItemEquipLoc] ) then
					    if ( ItemLevel > 120 ) then Table = GS_Formula['A']; else Table = GS_Formula['B']; end
					    if ( ItemRarity >= 2 ) and ( ItemRarity <= 4 )then
						    local Red, Green, Blue = GearScore_GetQuality((floor(((ItemLevel - Table[ItemRarity].A) / Table[ItemRarity].B) * 1 * Scale)) * 11.25 )
						    GearScore = floor(((ItemLevel - Table[ItemRarity].A) / Table[ItemRarity].B) * GS_ItemTypes[ItemEquipLoc].SlotMOD * Scale * QualityScale)
						    if ( ItemLevel == 187.05 ) then ItemLevel = 0; end
						    if ( GearScore < 0 ) then GearScore = 0;   Red, Green, Blue = GearScore_GetQuality(1); end
						    if ( PVPScale == 0.75 ) then PVPScore = 1; GearScore = GearScore * 1; 
						    else PVPScore = GearScore * 0; end
						    local percent = (GearScore_GetEnchantInfo(ItemLink, ItemEquipLoc) or 1)
						    GearScore = floor(GearScore * percent )
						    PVPScore = floor(PVPScore)
						    return GearScore, ItemLevel, GS_ItemTypes[ItemEquipLoc].ItemSlot, Red, Green, Blue, PVPScore, ItemEquipLoc, percent ;
					    end
				    end
				    return -1, ItemLevel, 50, 1, 1, 1, PVPScore, ItemEquipLoc, 1
			    end
			    function GearScore_GetQuality(ItemScore)
				    if ( ItemScore > 5999 ) then ItemScore = 5999; end
				    local Red = 0.1; local Blue = 0.1; local Green = 0.1; local GS_QualityDescription = 'Legendary'
				    if not ( ItemScore ) then return 0, 0, 0, 'Trash'; end
				    for i = 0,6 do
					    if ( ItemScore > i * 1000 ) and ( ItemScore <= ( ( i + 1 ) * 1000 ) ) then
						    local Red = GS_Quality[( i + 1 ) * 1000].Red['A'] + (((ItemScore - GS_Quality[( i + 1 ) * 1000].Red['B'])*GS_Quality[( i + 1 ) * 1000].Red['C'])*GS_Quality[( i + 1 ) * 1000].Red['D'])
						    local Blue = GS_Quality[( i + 1 ) * 1000].Green['A'] + (((ItemScore - GS_Quality[( i + 1 ) * 1000].Green['B'])*GS_Quality[( i + 1 ) * 1000].Green['C'])*GS_Quality[( i + 1 ) * 1000].Green['D'])
						    local Green = GS_Quality[( i + 1 ) * 1000].Blue['A'] + (((ItemScore - GS_Quality[( i + 1 ) * 1000].Blue['B'])*GS_Quality[( i + 1 ) * 1000].Blue['C'])*GS_Quality[( i + 1 ) * 1000].Blue['D'])
						    --if not ( Red ) or not ( Blue ) or not ( Green ) then return 0.1, 0.1, 0.1, nil; end
						    return Red, Green, Blue, GS_Quality[( i + 1 ) * 1000].Description
					    end
				    end
			    return 0.1, 0.1, 0.1
			    end
			    function GearScore_HookSetUnit(arg1, arg2)
				    if ( GS_PlayerIsInCombat ) then return; end
				    local Name = GameTooltip:GetUnit();local MouseOverGearScore, MouseOverAverage = 0,0
				    if ( CanInspect('mouseover') ) and ( UnitName('mouseover') == Name ) and not ( GS_PlayerIsInCombat ) then 
					    NotifyInspect('mouseover'); MouseOverGearScore, MouseOverAverage = GearScore_GetScore(Name, 'mouseover'); 
				    end
				    if ( MouseOverGearScore ) and ( MouseOverGearScore > 0 ) and ( GS_Settings['Player'] == 1 ) then 
					    local Red, Blue, Green = GearScore_GetQuality(MouseOverGearScore)
					    if ( GS_Settings['Level'] == 1 ) then 
						    GameTooltip:AddDoubleLine('GearScore: '..MouseOverGearScore, '(iLevel: '..MouseOverAverage..')', Red, Green, Blue, Red, Green, Blue)
					    else
						    GameTooltip:AddLine('GearScore: '..MouseOverGearScore, Red, Green, Blue)
					    end
					    if ( GS_Settings['Compare'] == 1 ) then
						    local MyGearScore = GearScore_GetScore(UnitName('player'), 'player');
						    local TheirGearScore = MouseOverGearScore
						    if ( MyGearScore  > TheirGearScore  ) then GameTooltip:AddDoubleLine('YourScore: '..MyGearScore  , '(+'..(MyGearScore - TheirGearScore  )..')', 0,1,0, 0,1,0); end
						    if ( MyGearScore   < TheirGearScore   ) then GameTooltip:AddDoubleLine('YourScore: '..MyGearScore, '(-'..(TheirGearScore - MyGearScore  )..')', 1,0,0, 1,0,0); end	
						    if ( MyGearScore   == TheirGearScore   ) then GameTooltip:AddDoubleLine('YourScore: '..MyGearScore  , '(+0)', 0,1,1,0,1,1); end	
					    end
				    end
			    end
			    function GearScore_SetDetails(tooltip, Name)
				    if not ( UnitName('mouseover') ) or ( UnitName('mouseover') ~= Name )then return; end
				    for i = 1,18 do
					    if not ( i == 4 ) then
						    local ItemName, ItemLink, ItemRarity, ItemLevel, ItemMinLevel, ItemType, ItemSubType, ItemStackCount, ItemEquipLoc, ItemTexture = GetItemInfo(GS_ItemLinkTable[i])
						    if ( ItemLink ) then
							    local GearScore, ItemLevel, ItemType, Red, Green, Blue = GearScore_GetItemScore(ItemLink)
							    --local Red, Green, Blue = GearScore_GetQuality((floor(((ItemLevel - Table[ItemRarity].A) / Table[ItemRarity].B) * 1 * 1.8618)) * 11.25 )
							    if ( GearScore ) and ( i ~= 4 ) then
								    local Add = ''
								    if ( GS_Settings['Level'] == 1 ) then Add = ' (iLevel '..tostring(ItemLevel)..')'; end
								    tooltip:AddDoubleLine('['..ItemName..']', tostring(GearScore)..Add, GS_Rarity[ItemRarity].Red, GS_Rarity[ItemRarity].Green, GS_Rarity[ItemRarity].Blue, Red, Blue, Green)
							    end
						    end
					    end
				    end
			    end
			    function GearScore_HookSetItem() ItemName, ItemLink = GameTooltip:GetItem(); GearScore_HookItem(ItemName, ItemLink, GameTooltip); end
			    function GearScore_HookRefItem() ItemName, ItemLink = ItemRefTooltip:GetItem(); GearScore_HookItem(ItemName, ItemLink, ItemRefTooltip); end
			    function GearScore_HookCompareItem() ItemName, ItemLink = ShoppingTooltip1:GetItem(); GearScore_HookItem(ItemName, ItemLink, ShoppingTooltip1); end
			    function GearScore_HookCompareItem2() ItemName, ItemLink = ShoppingTooltip2:GetItem(); GearScore_HookItem(ItemName, ItemLink, ShoppingTooltip2); end
			    function GearScore_HookItem(ItemName, ItemLink, Tooltip)
				    if ( GS_PlayerIsInCombat ) then return; end
				    local PlayerClass, PlayerEnglishClass = UnitClass('player');
				    if not ( IsEquippableItem(ItemLink) ) then return; end
				    local ItemScore, ItemLevel, EquipLoc, Red, Green, Blue, PVPScore, ItemEquipLoc, enchantPercent = GearScore_GetItemScore(ItemLink);
				    if ( ItemScore >= 0 ) then
					    if ( GS_Settings['Item'] == 1 ) then
						    if ( ItemLevel ) and ( GS_Settings['Level'] == 1 ) then Tooltip:AddDoubleLine('GearScore: '..ItemScore, '(iLevel '..ItemLevel..')', Red, Blue, Green, Red, Blue, Green);
							    if ( PlayerEnglishClass == 'HUNTER' ) then
								    if ( ItemEquipLoc == 'INVTYPE_RANGEDRIGHT' ) or ( ItemEquipLoc == 'INVTYPE_RANGED' ) then
									    Tooltip:AddLine('HunterScore: '..floor(ItemScore * 5.3224), Red, Blue, Green)
								    end
								    if ( ItemEquipLoc == 'INVTYPE_2HWEAPON' ) or ( ItemEquipLoc == 'INVTYPE_WEAPONMAINHAND' ) or ( ItemEquipLoc == 'INVTYPE_WEAPONOFFHAND' ) or ( ItemEquipLoc == 'INVTYPE_WEAPON' ) or ( ItemEquipLoc == 'INVTYPE_HOLDABLE' )  then
									    Tooltip:AddLine('HunterScore: '..floor(ItemScore * 0.3164), Red, Blue, Green)
								    end
							    end
						    else
							    Tooltip:AddLine('GearScore: '..ItemScore, Red, Blue, Green)
							    if ( PlayerEnglishClass == 'HUNTER' ) then
								    if ( ItemEquipLoc == 'INVTYPE_RANGEDRIGHT' ) or ( ItemEquipLoc == 'INVTYPE_RANGED' ) then
									    Tooltip:AddLine('HunterScore: '..floor(ItemScore * 5.3224), Red, Blue, Green)
								    end
								    if ( ItemEquipLoc == 'INVTYPE_2HWEAPON' ) or ( ItemEquipLoc == 'INVTYPE_WEAPONMAINHAND' ) or ( ItemEquipLoc == 'INVTYPE_WEAPONOFFHAND' ) or ( ItemEquipLoc == 'INVTYPE_WEAPON' ) or ( ItemEquipLoc == 'INVTYPE_HOLDABLE' )  then
									    Tooltip:AddLine('HunterScore: '..floor(ItemScore * 0.3164), Red, Blue, Green)
								    end
							    end
						    end
					    end
				    else
					    if ( GS_Settings['Level'] == 1 ) and ( ItemLevel ) then
						    Tooltip:AddLine('iLevel '..ItemLevel)
					    end
				    end
			    end
			    function GearScore_OnEnter(Name, ItemSlot, Argument)
				    if ( UnitName('target') ) then NotifyInspect('target'); GS_LastNotified = UnitName('target'); end
				    local OriginalOnEnter = GearScore_Original_SetInventoryItem(Name, ItemSlot, Argument); return OriginalOnEnter
			    end
			    function MyPaperDoll()
				    if ( GS_PlayerIsInCombat ) then return; end
				    local MyGearScore = GearScore_GetScore(UnitName('player'), 'player');
				    local Red, Blue, Green = GearScore_GetQuality(MyGearScore)
				    PersonalGearScore:SetText(MyGearScore); PersonalGearScore:SetTextColor(Red, Green, Blue, 1)
			    end
			    function GS_MANSET(Command)
				    if ( strlower(Command) == '' ) or ( strlower(Command) == 'options' ) or ( strlower(Command) == 'option' ) or ( strlower(Command) == 'help' ) then for i,v in ipairs(GS_CommandList) do DEFAULT_CHAT_FRAME:AddMessage(v); end; return end
				    if ( strlower(Command) == 'show' ) then GS_Settings['Player'] = GS_ShowSwitch[GS_Settings['Player']]; if ( GS_Settings['Player'] == 1 ) or ( GS_Settings['Player'] == 2 ) then DEFAULT_CHAT_FRAME:AddMessage('Player Scores: On'); else DEFAULT_CHAT_FRAME:AddMessage('Player Scores: Off'); end; return; end
				    if ( strlower(Command) == 'player' ) then GS_Settings['Player'] = GS_ShowSwitch[GS_Settings['Player']]; if ( GS_Settings['Player'] == 1 ) or ( GS_Settings['Player'] == 2 ) then DEFAULT_CHAT_FRAME:AddMessage('Player Scores: On'); else DEFAULT_CHAT_FRAME:AddMessage('Player Scores: Off'); end; return; end
				    if ( strlower(Command) == 'item' ) then GS_Settings['Item'] = GS_ItemSwitch[GS_Settings['Item']]; if ( GS_Settings['Item'] == 1 ) or ( GS_Settings['Item'] == 3 ) then DEFAULT_CHAT_FRAME:AddMessage('Item Scores: On'); else DEFAULT_CHAT_FRAME:AddMessage('Item Scores: Off'); end; return; end
				    if ( strlower(Command) == 'level' ) then GS_Settings['Level'] = GS_Settings['Level'] * -1; if ( GS_Settings['Level'] == 1 ) then print ('Item Levels: On'); else print ('Item Levels: Off'); end; return; end
				    if ( strlower(Command) == 'compare' ) then GS_Settings['Compare'] = GS_Settings['Compare'] * -1; if ( GS_Settings['Compare'] == 1 ) then print ('Comparisons: On'); else print ('Comparisons: Off'); end; return; end
				    DEFAULT_CHAT_FRAME:AddMessage('GearScore: Unknown Command. Type '/gs' for a list of options')
			    end
			    local f = CreateFrame('Frame', 'GearScore', UIParent);
			    f:SetScript('OnEvent', GearScore_OnEvent);
			    f:RegisterEvent('PLAYER_EQUIPMENT_CHANGED');
			    f:RegisterEvent('ADDON_LOADED')
			    f:RegisterEvent('PLAYER_REGEN_ENABLED')
			    f:RegisterEvent('PLAYER_REGEN_DISABLED')
			    GameTooltip:HookScript('OnTooltipSetUnit', GearScore_HookSetUnit)
			    GameTooltip:HookScript('OnTooltipSetItem', GearScore_HookSetItem)
			    ShoppingTooltip1:HookScript('OnTooltipSetItem', GearScore_HookCompareItem)
			    ShoppingTooltip2:HookScript('OnTooltipSetItem', GearScore_HookCompareItem2)
			    ItemRefTooltip:HookScript('OnTooltipSetItem', GearScore_HookRefItem)
			    PaperDollFrame:HookScript('OnShow', MyPaperDoll)
			    PaperDollFrame:CreateFontString('PersonalGearScore')
			    PersonalGearScore:SetFont('Fonts\\FRIZQT__.TTF', 10)
			    PersonalGearScore:SetText('GS: 0')
			    PersonalGearScore:SetPoint('BOTTOMLEFT',PaperDollFrame,'TOPLEFT',72,-253)
			    PersonalGearScore:Show()
			    PaperDollFrame:CreateFontString('GearScore2')
			    GearScore2:SetFont('Fonts\\FRIZQT__.TTF', 10)
			    GearScore2:SetText('GearScore')
			    GearScore2:SetPoint('BOTTOMLEFT',PaperDollFrame,'TOPLEFT',72,-265)
			    GearScore2:Show()
			    GearScore_Original_SetInventoryItem = GameTooltip.SetInventoryItem
			    GameTooltip.SetInventoryItem = GearScore_OnEnter
			    SlashCmdList['MY2SCRIPT'] = GS_MANSET
			    SLASH_MY2SCRIPT1 = '/gset'
			    SLASH_MY2SCRIPT2 = '/gs'
			    SLASH_MY2SCRIPT3 = '/gearscore'
			    GS_ItemTypes = {
				    ['INVTYPE_RELIC'] = { ['SlotMOD'] = 0.3164, ['ItemSlot'] = 18, ['Enchantable'] = false},
				    ['INVTYPE_TRINKET'] = { ['SlotMOD'] = 0.5625, ['ItemSlot'] = 33, ['Enchantable'] = false },
				    ['INVTYPE_2HWEAPON'] = { ['SlotMOD'] = 2.000, ['ItemSlot'] = 16, ['Enchantable'] = true },
				    ['INVTYPE_WEAPONMAINHAND'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 16, ['Enchantable'] = true },
				    ['INVTYPE_WEAPONOFFHAND'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 17, ['Enchantable'] = true },
				    ['INVTYPE_RANGED'] = { ['SlotMOD'] = 0.3164, ['ItemSlot'] = 18, ['Enchantable'] = true },
				    ['INVTYPE_THROWN'] = { ['SlotMOD'] = 0.3164, ['ItemSlot'] = 18, ['Enchantable'] = false },
				    ['INVTYPE_RANGEDRIGHT'] = { ['SlotMOD'] = 0.3164, ['ItemSlot'] = 18, ['Enchantable'] = false },
				    ['INVTYPE_SHIELD'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 17, ['Enchantable'] = true },
				    ['INVTYPE_WEAPON'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 36, ['Enchantable'] = true },
				    ['INVTYPE_HOLDABLE'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 17, ['Enchantable'] = false },
				    ['INVTYPE_HEAD'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 1, ['Enchantable'] = true },
				    ['INVTYPE_NECK'] = { ['SlotMOD'] = 0.5625, ['ItemSlot'] = 2, ['Enchantable'] = false },
				    ['INVTYPE_SHOULDER'] = { ['SlotMOD'] = 0.7500, ['ItemSlot'] = 3, ['Enchantable'] = true },
				    ['INVTYPE_CHEST'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 5, ['Enchantable'] = true },
				    ['INVTYPE_ROBE'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 5, ['Enchantable'] = true },
				    ['INVTYPE_WAIST'] = { ['SlotMOD'] = 0.7500, ['ItemSlot'] = 6, ['Enchantable'] = false },
				    ['INVTYPE_LEGS'] = { ['SlotMOD'] = 1.0000, ['ItemSlot'] = 7, ['Enchantable'] = true },
				    ['INVTYPE_FEET'] = { ['SlotMOD'] = 0.75, ['ItemSlot'] = 8, ['Enchantable'] = true },
				    ['INVTYPE_WRIST'] = { ['SlotMOD'] = 0.5625, ['ItemSlot'] = 9, ['Enchantable'] = true },
				    ['INVTYPE_HAND'] = { ['SlotMOD'] = 0.7500, ['ItemSlot'] = 10, ['Enchantable'] = true },
				    ['INVTYPE_FINGER'] = { ['SlotMOD'] = 0.5625, ['ItemSlot'] = 31, ['Enchantable'] = false },
				    ['INVTYPE_CLOAK'] = { ['SlotMOD'] = 0.5625, ['ItemSlot'] = 15, ['Enchantable'] = true },
				    ['INVTYPE_BODY'] = { ['SlotMOD'] = 0, ['ItemSlot'] = 4, ['Enchantable'] = false },
			    }
			    GS_Settings = {
				    ['Show'] = 1,
				    ['Player'] = 1,
				    ['Item'] = 1,
				    ['Level'] = 1,
				    ['Average'] = 1,
				    ['Compare'] = -1,
			    }
			    GS_DefaultSettings = {
				    ['Player'] = 1,
				    ['Item'] = 1,
				    ['Show'] = 1,
				    ['Compare'] = -1,
				    ['Level'] = 1,
				    ['Average'] = 1,
			    }
			    GS_Rarity = {
				    [0] = { Red = 0.55,	Green = 0.55, Blue = 0.55 },
				    [1] = {	Red = 1.00,	Green = 1.00, Blue = 1.00 },
				    [2] = {	Red = 0.12,	Green = 1.00, Blue = 0.00 },
				    [3] = {	Red = 0.00,	Green = 0.50, Blue = 1.00 },
				    [4] = {	Red = 0.69, Green = 0.28, Blue = 0.97 },
				    [5] = { Red = 0.94,	Green = 0.09, Blue = 0.00 },
				    [6] = {	Red = 1.00,	Green = 0.00, Blue = 0.00 },
				    [7] = {	Red = 0.90,	Green = 0.80, Blue = 0.50 },
			    }
			    GS_Formula = {
				    ['A'] = {
					    [4] = { ['A'] = 91.4500, ['B'] = 0.6500 },
					    [3] = { ['A'] = 81.3750, ['B'] = 0.8125 },
					    [2] = { ['A'] = 73.0000, ['B'] = 1.0000 }
				    },
				    ['B'] = {
					    [4] = { ['A'] = 26.0000, ['B'] = 1.2000 },
					    [3] = { ['A'] = 0.7500, ['B'] = 1.8000 },
					    [2] = { ['A'] = 8.0000, ['B'] = 2.0000 },
					    [1] = { ['A'] = 0.0000, ['B'] = 2.2500 }
				    }
			    }
			    GS_Quality = {
				    [6000] = {
					    ['Red'] = { ['A'] = 0.94, ['B'] = 5000, ['C'] = 0.00006, ['D'] = 1 },
					    ['Green'] = { ['A'] = 0.47, ['B'] = 5000, ['C'] = 0.00047, ['D'] = -1 },
					    ['Blue'] = { ['A'] = 0, ['B'] = 0, ['C'] = 0, ['D'] = 0 },
					    ['Description'] = 'Legendary'
				    },
				    [5000] = {
					    ['Red'] = { ['A'] = 0.69, ['B'] = 4000, ['C'] = 0.00025, ['D'] = 1 },
					    ['Green'] = { ['A'] = 0.28, ['B'] = 4000, ['C'] = 0.00019, ['D'] = 1 },
					    ['Blue'] = { ['A'] = 0.97, ['B'] = 4000, ['C'] = 0.00096, ['D'] = -1 },
					    ['Description'] = 'Epic'
				    },
				    [4000] = {
					    ['Red'] = { ['A'] = 0.0, ['B'] = 3000, ['C'] = 0.00069, ['D'] = 1 },
					    ['Green'] = { ['A'] = 0.5, ['B'] = 3000, ['C'] = 0.00022, ['D'] = -1 },
					    ['Blue'] = { ['A'] = 1, ['B'] = 3000, ['C'] = 0.00003, ['D'] = -1 },
					    ['Description'] = 'Superior'
				    },
				    [3000] = {
					    ['Red'] = { ['A'] = 0.12, ['B'] = 2000, ['C'] = 0.00012, ['D'] = -1 },
					    ['Green'] = { ['A'] = 1, ['B'] = 2000, ['C'] = 0.00050, ['D'] = -1 },
					    ['Blue'] = { ['A'] = 0, ['B'] = 2000, ['C'] = 0.001, ['D'] = 1 },
					    ['Description'] = 'Uncommon'
				    },
				    [2000] = {
					    ['Red'] = { ['A'] = 1, ['B'] = 1000, ['C'] = 0.00088, ['D'] = -1 },
					    ['Green'] = { ['A'] = 1, ['B'] = 000, ['C'] = 0.00000, ['D'] = 0 },
					    ['Blue'] = { ['A'] = 1, ['B'] = 1000, ['C'] = 0.001, ['D'] = -1 },
					    ['Description'] = 'Common'
				    },
				    [1000] = {
					    ['Red'] = { ['A'] = 0.55, ['B'] = 0, ['C'] = 0.00045, ['D'] = 1 },
					    ['Green'] = { ['A'] = 0.55, ['B'] = 0, ['C'] = 0.00045, ['D'] = 1 },
					    ['Blue'] = { ['A'] = 0.55, ['B'] = 0, ['C'] = 0.00045, ['D'] = 1 },
					    ['Description'] = 'Trash'
				    },
			    }
			    GS_CommandList = {
				    [1] = '---GearScore Options List---',
				    [2] = '/gs player -> Toggles display of scores on players.',
				    [3] = '/gs item -> Toggles display of scores for items.',
				    [4] = '/gs level -> Toggles iLevel information.',
				    [5] = '/gs reset --> Resets GearScore-s Options back to Default.',
				    [6] = '/gs compare --> Toggles display of comparative info between you and your target-s GearScore.',
			    }
			    GS_ShowSwitch = {[0] = 2,[1] = 3,[2] = 0,[3] = 1}
			    GS_ItemSwitch = {[0] = 3,[1] = 2,[2] = 1,[3] = 0}
                local GearScoreX = GearScore_GetScore(UnitName('player'), 'player');
                return GearScoreX;
		    end");

        logs("gearscore: " + gearscore + "");
        print("gearscore: " + gearscore + "");
    }

    private void Postal()
    {
        Lua.LuaDoString(@"
            if not PostalFrame then 
            PostalFrame = CreateFrame('FRAME','PostalFrame')
            local LIBSTUB_MAJOR, LIBSTUB_MINOR = ""LibStub"", 2  -- NEVER MAKE THIS AN SVN REVISION! IT NEEDS TO BE USABLE IN ALL REPOS!
            local LibStub = _G[LIBSTUB_MAJOR]

            if not LibStub or LibStub.minor < LIBSTUB_MINOR then
                LibStub = LibStub or {libs = {}, minors = {} }
                _G[LIBSTUB_MAJOR] = LibStub
                LibStub.minor = LIBSTUB_MINOR
            
                function LibStub:NewLibrary(major, minor)
                    assert(type(major) == ""string"", ""Bad argument #2 to NewLibrary (string expected)"")
                    minor = assert(tonumber(strmatch(minor, ""%d+"")), ""Minor version must either be a number or contain a number."")
                
                    local oldminor = self.minors[major]
                    if oldminor and oldminor >= minor then return nil end
                    self.minors[major], self.libs[major] = minor, self.libs[major] or {}
                    return self.libs[major], oldminor
                end
            
                function LibStub:GetLibrary(major, silent)
                    if not self.libs[major] and not silent then
                        error((""Cannot find a library instance of %q.""):format(tostring(major)), 2)
                    end
                    return self.libs[major], self.minors[major]
                end
            
                function LibStub:IterateLibraries() return pairs(self.libs) end
                setmetatable(LibStub, { __call = LibStub.GetLibrary })
            end

            local MAJOR, MINOR = ""CallbackHandler-1.0"", 6
            local CallbackHandler = LibStub:NewLibrary(MAJOR, MINOR)

            if not CallbackHandler then return end -- No upgrade needed

            local meta = {__index = function(tbl, key) tbl[key] = {} return tbl[key] end}

            local tconcat = table.concat
            local assert, error, loadstring = assert, error, loadstring
            local setmetatable, rawset, rawget = setmetatable, rawset, rawget
            local next, select, pairs, type, tostring = next, select, pairs, type, tostring

            local xpcall = xpcall

            local function errorhandler(err)
                return geterrorhandler()(err)
            end

            local function CreateDispatcher(argCount)
                local code = [[
                local next, xpcall, eh = ...

                local method, ARGS
                local function call() method(ARGS) end

                local function dispatch(handlers, ...)
                    local index
                    index, method = next(handlers)
                    if not method then return end
                    local OLD_ARGS = ARGS
                    ARGS = ...
                    repeat
                        xpcall(call, eh)
                        index, method = next(handlers, index)
                    until not method
                    ARGS = OLD_ARGS
                end

                return dispatch
                ]]

                local ARGS, OLD_ARGS = {}, {}
                for i = 1, argCount do ARGS[i], OLD_ARGS[i] = ""arg""..i, ""old_arg""..i end
                code = code:gsub(""OLD_ARGS"", tconcat(OLD_ARGS, "", "")):gsub(""ARGS"", tconcat(ARGS, "", ""))
                return assert(loadstring(code, ""safecall Dispatcher[""..argCount..""]""))(next, xpcall, errorhandler)
            end

            local Dispatchers = setmetatable({}, {__index=function(self, argCount)
                local dispatcher = CreateDispatcher(argCount)
                rawset(self, argCount, dispatcher)
                return dispatcher
            end})

            function CallbackHandler:New(target, RegisterName, UnregisterName, UnregisterAllName, OnUsed, OnUnused)
                -- TODO: Remove this after beta has gone out
                assert(not OnUsed and not OnUnused, ""ACE-80: OnUsed/OnUnused are deprecated. Callbacks are now done to registry.OnUsed and registry.OnUnused"")

                RegisterName = RegisterName or ""RegisterCallback""
                UnregisterName = UnregisterName or ""UnregisterCallback""
                if UnregisterAllName==nil then	-- false is used to indicate ""don't want this method""
                    UnregisterAllName = ""UnregisterAllCallbacks""
                end
                local events = setmetatable({}, meta)
                local registry = { recurse=0, events=events }

                function registry:Fire(eventname, ...)
                    if not rawget(events, eventname) or not next(events[eventname]) then return end
                    local oldrecurse = registry.recurse
                    registry.recurse = oldrecurse + 1

                    Dispatchers[select('#', ...) + 1](events[eventname], eventname, ...)

                    registry.recurse = oldrecurse

                    if registry.insertQueue and oldrecurse==0 then
                        -- Something in one of our callbacks wanted to register more callbacks; they got queued
                        for eventname,callbacks in pairs(registry.insertQueue) do
                            local first = not rawget(events, eventname) or not next(events[eventname])	-- test for empty before. not test for one member after. that one member may have been overwritten.
                            for self,func in pairs(callbacks) do
                                events[eventname][self] = func
                                -- fire OnUsed callback?
                                if first and registry.OnUsed then
                                    registry.OnUsed(registry, target, eventname)
                                    first = nil
                                end
                            end
                        end
                        registry.insertQueue = nil
                    end
                end
                target[RegisterName] = function(self, eventname, method, ... --[[actually just a single arg]])
                    if type(eventname) ~= ""string"" then
                        error(""Usage: ""..RegisterName..""(eventname, method[, arg]): 'eventname' - string expected."", 2)
                    end

                    method = method or eventname

                    local first = not rawget(events, eventname) or not next(events[eventname])	-- test for empty before. not test for one member after. that one member may have been overwritten.

                    if type(method) ~= ""string"" and type(method) ~= ""function"" then
                        error(""Usage: ""..RegisterName..""(\""eventname\"", \""methodname\""): 'methodname' - string or function expected."", 2)
                    end

                    local regfunc

                    if type(method) == ""string"" then
                        -- self[""method""] calling style
                        if type(self) ~= ""table"" then
                            error(""Usage: ""..RegisterName..""(\""eventname\"", \""methodname\""): self was not a table?"", 2)
                        elseif self==target then
                            error(""Usage: ""..RegisterName..""(\""eventname\"", \""methodname\""): do not use Library:""..RegisterName..""(), use your own 'self'"", 2)
                        elseif type(self[method]) ~= ""function"" then
                            error(""Usage: ""..RegisterName..""(\""eventname\"", \""methodname\""): 'methodname' - method '""..tostring(method)..""' not found on self."", 2)
                        end

                        if select(""#"",...)>=1 then	-- this is not the same as testing for arg==nil!
                            local arg=select(1,...)
                            regfunc = function(...) self[method](self,arg,...) end
                        else
                            regfunc = function(...) self[method](self,...) end
                        end
                    else
                        -- function ref with self=object or self=""addonId"" or self=thread
                        if type(self)~=""table"" and type(self)~=""string"" and type(self)~=""thread"" then
                            error(""Usage: ""..RegisterName..""(self or \""addonId\"", eventname, method): 'self or addonId': table or string or thread expected."", 2)
                        end

                        if select(""#"",...)>=1 then	-- this is not the same as testing for arg==nil!
                            local arg=select(1,...)
                            regfunc = function(...) method(arg,...) end
                        else
                            regfunc = method
                        end
                    end


                    if events[eventname][self] or registry.recurse<1 then
                        events[eventname][self] = regfunc
                        -- fire OnUsed callback?
                        if registry.OnUsed and first then
                            registry.OnUsed(registry, target, eventname)
                        end
                    else
                        registry.insertQueue = registry.insertQueue or setmetatable({},meta)
                        registry.insertQueue[eventname][self] = regfunc
                    end
                end

                target[UnregisterName] = function(self, eventname)
                    if not self or self==target then
                        error(""Usage: ""..UnregisterName..""(eventname): bad 'self'"", 2)
                    end
                    if type(eventname) ~= ""string"" then
                        error(""Usage: ""..UnregisterName..""(eventname): 'eventname' - string expected."", 2)
                    end
                    if rawget(events, eventname) and events[eventname][self] then
                        events[eventname][self] = nil
                        -- Fire OnUnused callback?
                        if registry.OnUnused and not next(events[eventname]) then
                            registry.OnUnused(registry, target, eventname)
                        end
                    end
                    if registry.insertQueue and rawget(registry.insertQueue, eventname) and registry.insertQueue[eventname][self] then
                        registry.insertQueue[eventname][self] = nil
                    end
                end

                if UnregisterAllName then
                    target[UnregisterAllName] = function(...)
                        if select(""#"",...)<1 then
                            error(""Usage: ""..UnregisterAllName..""([whatFor]): missing 'self' or \""addonId\"" to unregister events for."", 2)
                        end
                        if select(""#"",...)==1 and ...==target then
                            error(""Usage: ""..UnregisterAllName..""([whatFor]): supply a meaningful 'self' or \""addonId\"""", 2)
                        end


                        for i=1,select(""#"",...) do
                            local self = select(i,...)
                            if registry.insertQueue then
                                for eventname, callbacks in pairs(registry.insertQueue) do
                                    if callbacks[self] then
                                        callbacks[self] = nil
                                    end
                                end
                            end
                            for eventname, callbacks in pairs(events) do
                                if callbacks[self] then
                                    callbacks[self] = nil
                                    -- Fire OnUnused callback?
                                    if registry.OnUnused and not next(callbacks) then
                                        registry.OnUnused(registry, target, eventname)
                                    end
                                end
                            end
                        end
                    end
                end

                return registry
            end

            local MAJOR, MINOR = ""AceAddon-3.0"", 5
            local AceAddon, oldminor = LibStub:NewLibrary(MAJOR, MINOR)

            if not AceAddon then return end -- No Upgrade needed.

            AceAddon.frame = AceAddon.frame or CreateFrame(""Frame"", ""AceAddon30Frame"") -- Our very own frame
            AceAddon.addons = AceAddon.addons or {} -- addons in general
            AceAddon.statuses = AceAddon.statuses or {} -- statuses of addon.
            AceAddon.initializequeue = AceAddon.initializequeue or {} -- addons that are new and not initialized
            AceAddon.enablequeue = AceAddon.enablequeue or {} -- addons that are initialized and waiting to be enabled
            AceAddon.embeds = AceAddon.embeds or setmetatable({}, {__index = function(tbl, key) tbl[key] = {} return tbl[key] end }) -- contains a list of libraries embedded in an addon

            local tinsert, tconcat, tremove = table.insert, table.concat, table.remove
            local fmt, tostring = string.format, tostring
            local select, pairs, next, type, unpack = select, pairs, next, type, unpack
            local loadstring, assert, error = loadstring, assert, error
            local setmetatable, getmetatable, rawset, rawget = setmetatable, getmetatable, rawset, rawget

            local xpcall = xpcall

            local function errorhandler(err)
                return geterrorhandler()(err)
            end

            local function CreateDispatcher(argCount)
                local code = [[
                    local xpcall, eh = ...
                    local method, ARGS
                    local function call() return method(ARGS) end
            
                    local function dispatch(func, ...)
                         method = func
                         if not method then return end
                         ARGS = ...
                         return xpcall(call, eh)
                    end
            
                    return dispatch
                ]]
            
                local ARGS = {}
                for i = 1, argCount do ARGS[i] = ""arg""..i end
                code = code:gsub(""ARGS"", tconcat(ARGS, "", ""))
                return assert(loadstring(code, ""safecall Dispatcher[""..argCount..""]""))(xpcall, errorhandler)
            end

            local Dispatchers = setmetatable({}, {__index=function(self, argCount)
                local dispatcher = CreateDispatcher(argCount)
                rawset(self, argCount, dispatcher)
                return dispatcher
            end})
            Dispatchers[0] = function(func)
                return xpcall(func, errorhandler)
            end

            local function safecall(func, ...)
                if type(func) == ""function"" then
                    return Dispatchers[select('#', ...)](func, ...)
                end
            end

            local Enable, Disable, EnableModule, DisableModule, Embed, NewModule, GetModule, GetName, SetDefaultModuleState, SetDefaultModuleLibraries, SetEnabledState, SetDefaultModulePrototype

            local function addontostring( self ) return self.name end 

            function AceAddon:NewAddon(objectorname, ...)
                local object,name
                local i=1
                if type(objectorname)==""table"" then
                    object=objectorname
                    name=...
                    i=2
                else
                    name=objectorname
                end
                if type(name)~=""string"" then
                    error((""Usage: NewAddon([object,] name, [lib, lib, lib, ...]): 'name' - string expected got '%s'.""):format(type(name)), 2)
                end
                if self.addons[name] then 
                    error((""Usage: NewAddon([object,] name, [lib, lib, lib, ...]): 'name' - Addon '%s' already exists.""):format(name), 2)
                end
            
                object = object or {}
                object.name = name

                local addonmeta = {}
                local oldmeta = getmetatable(object)
                if oldmeta then
                    for k, v in pairs(oldmeta) do addonmeta[k] = v end
                end
                addonmeta.__tostring = addontostring
            
                setmetatable( object, addonmeta )
                self.addons[name] = object
                object.modules = {}
                object.defaultModuleLibraries = {}
                Embed( object ) -- embed NewModule, GetModule methods
                self:EmbedLibraries(object, select(i,...))
            
                -- add to queue of addons to be initialized upon ADDON_LOADED
                tinsert(self.initializequeue, object)
                return object
            end

            function AceAddon:GetAddon(name, silent)
                if not silent and not self.addons[name] then
                    error((""Usage: GetAddon(name): 'name' - Cannot find an AceAddon '%s'.""):format(tostring(name)), 2)
                end
                return self.addons[name]
            end

            function AceAddon:EmbedLibraries(addon, ...)
                for i=1,select(""#"", ... ) do
                    local libname = select(i, ...)
                    self:EmbedLibrary(addon, libname, false, 4)
                end
            end

            function AceAddon:EmbedLibrary(addon, libname, silent, offset)
                local lib = LibStub:GetLibrary(libname, true)
                if not lib and not silent then
                    error((""Usage: EmbedLibrary(addon, libname, silent, offset): 'libname' - Cannot find a library instance of %q.""):format(tostring(libname)), offset or 2)
                elseif lib and type(lib.Embed) == ""function"" then
                    lib:Embed(addon)
                    tinsert(self.embeds[addon], libname)
                    return true
                elseif lib then
                    error((""Usage: EmbedLibrary(addon, libname, silent, offset): 'libname' - Library '%s' is not Embed capable""):format(libname), offset or 2)
                end
            end

            function GetModule(self, name, silent)
                if not self.modules[name] and not silent then
                    error((""Usage: GetModule(name, silent): 'name' - Cannot find module '%s'.""):format(tostring(name)), 2)
                end
                return self.modules[name]
            end

            local function IsModuleTrue(self) return true end

            function NewModule(self, name, prototype, ...)
                if type(name) ~= ""string"" then error((""Usage: NewModule(name, [prototype, [lib, lib, lib, ...]): 'name' - string expected got '%s'.""):format(type(name)), 2) end
                if type(prototype) ~= ""string"" and type(prototype) ~= ""table"" and type(prototype) ~= ""nil"" then error((""Usage: NewModule(name, [prototype, [lib, lib, lib, ...]): 'prototype' - table (prototype), string (lib) or nil expected got '%s'.""):format(type(prototype)), 2) end
            
                if self.modules[name] then error((""Usage: NewModule(name, [prototype, [lib, lib, lib, ...]): 'name' - Module '%s' already exists.""):format(name), 2) end
            
                local module = AceAddon:NewAddon(fmt(""%s_%s"", self.name or tostring(self), name))
            
                module.IsModule = IsModuleTrue
                module:SetEnabledState(self.defaultModuleState)
                module.moduleName = name

                if type(prototype) == ""string"" then
                    AceAddon:EmbedLibraries(module, prototype, ...)
                else
                    AceAddon:EmbedLibraries(module, ...)
                end
                AceAddon:EmbedLibraries(module, unpack(self.defaultModuleLibraries))

                if not prototype or type(prototype) == ""string"" then
                    prototype = self.defaultModulePrototype or nil
                end
            
                if type(prototype) == ""table"" then
                    local mt = getmetatable(module)
                    mt.__index = prototype
                    setmetatable(module, mt)  -- More of a Base class type feel.
                end
            
                safecall(self.OnModuleCreated, self, module) -- Was in Ace2 and I think it could be a cool thing to have handy.
                self.modules[name] = module
            
                return module
            end

            function GetName(self)
                return self.moduleName or self.name
            end

            function Enable(self)
                self:SetEnabledState(true)
                return AceAddon:EnableAddon(self)
            end

            function Disable(self)
                self:SetEnabledState(false)
                return AceAddon:DisableAddon(self)
            end

            function EnableModule(self, name)
                local module = self:GetModule( name )
                return module:Enable()
            end

            function DisableModule(self, name)
                local module = self:GetModule( name )
                return module:Disable()
            end

            function SetDefaultModuleLibraries(self, ...)
                if next(self.modules) then
                    error(""Usage: SetDefaultModuleLibraries(...): cannot change the module defaults after a module has been registered."", 2)
                end
                self.defaultModuleLibraries = {...}
            end

            function SetDefaultModuleState(self, state)
                if next(self.modules) then
                    error(""Usage: SetDefaultModuleState(state): cannot change the module defaults after a module has been registered."", 2)
                end
                self.defaultModuleState = state
            end

            function SetDefaultModulePrototype(self, prototype)
                if next(self.modules) then
                    error(""Usage: SetDefaultModulePrototype(prototype): cannot change the module defaults after a module has been registered."", 2)
                end
                if type(prototype) ~= ""table"" then
                    error((""Usage: SetDefaultModulePrototype(prototype): 'prototype' - table expected got '%s'.""):format(type(prototype)), 2)
                end
                self.defaultModulePrototype = prototype
            end

            function SetEnabledState(self, state)
                self.enabledState = state
            end

            local function IterateModules(self) return pairs(self.modules) end

            local function IterateEmbeds(self) return pairs(AceAddon.embeds[self]) end

            local function IsEnabled(self) return self.enabledState end
            local mixins = {
                NewModule = NewModule,
                GetModule = GetModule,
                Enable = Enable,
                Disable = Disable,
                EnableModule = EnableModule,
                DisableModule = DisableModule,
                IsEnabled = IsEnabled,
                SetDefaultModuleLibraries = SetDefaultModuleLibraries,
                SetDefaultModuleState = SetDefaultModuleState,
                SetDefaultModulePrototype = SetDefaultModulePrototype,
                SetEnabledState = SetEnabledState,
                IterateModules = IterateModules,
                IterateEmbeds = IterateEmbeds,
                GetName = GetName,
            }
            local function IsModule(self) return false end
            local pmixins = {
                defaultModuleState = true,
                enabledState = true,
                IsModule = IsModule,
            }

            function Embed(target)
                for k, v in pairs(mixins) do
                    target[k] = v
                end
                for k, v in pairs(pmixins) do
                    target[k] = target[k] or v
                end
            end

            function AceAddon:InitializeAddon(addon)
                safecall(addon.OnInitialize, addon)
            
                local embeds = self.embeds[addon]
                for i = 1, #embeds do
                    local lib = LibStub:GetLibrary(embeds[i], true)
                    if lib then safecall(lib.OnEmbedInitialize, lib, addon) end
                end

            end

            function AceAddon:EnableAddon(addon)
                if type(addon) == ""string"" then addon = AceAddon:GetAddon(addon) end
                if self.statuses[addon.name] or not addon.enabledState then return false end
            
                self.statuses[addon.name] = true
            
                safecall(addon.OnEnable, addon)
            
                if self.statuses[addon.name] then
                    local embeds = self.embeds[addon]
                    for i = 1, #embeds do
                        local lib = LibStub:GetLibrary(embeds[i], true)
                        if lib then safecall(lib.OnEmbedEnable, lib, addon) end
                    end
            
                    -- enable possible modules.
                    for name, module in pairs(addon.modules) do
                        self:EnableAddon(module)
                    end
                end
                return self.statuses[addon.name] -- return true if we're disabled
            end

            function AceAddon:DisableAddon(addon)
                if type(addon) == ""string"" then addon = AceAddon:GetAddon(addon) end
                if not self.statuses[addon.name] then return false end
            
                -- set statuses first before calling OnDisable, this allows for aborting the disable in OnDisable.
                self.statuses[addon.name] = false
            
                safecall( addon.OnDisable, addon )
            
                if not self.statuses[addon.name] then 
                    local embeds = self.embeds[addon]
                    for i = 1, #embeds do
                        local lib = LibStub:GetLibrary(embeds[i], true)
                        if lib then safecall(lib.OnEmbedDisable, lib, addon) end
                    end
                    -- disable possible modules.
                    for name, module in pairs(addon.modules) do
                        self:DisableAddon(module)
                    end
                end
            
                return not self.statuses[addon.name] -- return true if we're disabled
            end

            function AceAddon:IterateAddons() return pairs(self.addons) end

            function AceAddon:IterateAddonStatus() return pairs(self.statuses) end

            function AceAddon:IterateEmbedsOnAddon(addon) return pairs(self.embeds[addon]) end
            function AceAddon:IterateModulesOfAddon(addon) return pairs(addon.modules) end

            local function onEvent(this, event, arg1)
                if event == ""ADDON_LOADED"" or event == ""PLAYER_LOGIN"" then
                    -- if a addon loads another addon, recursion could happen here, so we need to validate the table on every iteration
                    while(#AceAddon.initializequeue > 0) do
                        local addon = tremove(AceAddon.initializequeue, 1)
                        -- this might be an issue with recursion - TODO: validate
                        if event == ""ADDON_LOADED"" then addon.baseName = arg1 end
                        AceAddon:InitializeAddon(addon)
                        tinsert(AceAddon.enablequeue, addon)
                    end
                
                    if IsLoggedIn() then
                        while(#AceAddon.enablequeue > 0) do
                            local addon = tremove(AceAddon.enablequeue, 1)
                            AceAddon:EnableAddon(addon)
                        end
                    end
                end
            end

            AceAddon.frame:RegisterEvent(""ADDON_LOADED"")
            AceAddon.frame:RegisterEvent(""PLAYER_LOGIN"")
            AceAddon.frame:SetScript(""OnEvent"", onEvent)

            for name, addon in pairs(AceAddon.addons) do
                Embed(addon)
            end

            local MAJOR, MINOR = ""AceEvent-3.0"", 3
            local AceEvent = LibStub:NewLibrary(MAJOR, MINOR)

            if not AceEvent then return end

            local pairs = pairs

            local CallbackHandler = LibStub:GetLibrary(""CallbackHandler-1.0"")

            AceEvent.frame = AceEvent.frame or CreateFrame(""Frame"", ""AceEvent30Frame"") -- our event frame
            AceEvent.embeds = AceEvent.embeds or {} -- what objects embed this lib

            if not AceEvent.events then
                AceEvent.events = CallbackHandler:New(AceEvent, 
                    ""RegisterEvent"", ""UnregisterEvent"", ""UnregisterAllEvents"")
            end

            function AceEvent.events:OnUsed(target, eventname) 
                AceEvent.frame:RegisterEvent(eventname)
            end

            function AceEvent.events:OnUnused(target, eventname) 
                AceEvent.frame:UnregisterEvent(eventname)
            end

            if not AceEvent.messages then
                AceEvent.messages = CallbackHandler:New(AceEvent, 
                    ""RegisterMessage"", ""UnregisterMessage"", ""UnregisterAllMessages""
                )
                AceEvent.SendMessage = AceEvent.messages.Fire
            end

            local mixins = {
                ""RegisterEvent"", ""UnregisterEvent"",
                ""RegisterMessage"", ""UnregisterMessage"",
                ""SendMessage"",
                ""UnregisterAllEvents"", ""UnregisterAllMessages"",
            }

            function AceEvent:Embed(target)
                for k, v in pairs(mixins) do
                    target[v] = self[v]
                end
                self.embeds[target] = true
                return target
            end

            function AceEvent:OnEmbedDisable(target)
                target:UnregisterAllEvents()
                target:UnregisterAllMessages()
            end

            local events = AceEvent.events
            AceEvent.frame:SetScript(""OnEvent"", function(this, event, ...)
                events:Fire(event, ...)
            end)

            for target, v in pairs(AceEvent.embeds) do
                AceEvent:Embed(target)
            end

            local ACEDB_MAJOR, ACEDB_MINOR = ""AceDB-3.0"", 21
            local AceDB, oldminor = LibStub:NewLibrary(ACEDB_MAJOR, ACEDB_MINOR)

            if not AceDB then return end -- No upgrade needed

            local type, pairs, next, error = type, pairs, next, error
            local setmetatable, getmetatable, rawset, rawget = setmetatable, getmetatable, rawset, rawget

            local _G = _G

            AceDB.db_registry = AceDB.db_registry or {}
            AceDB.frame = AceDB.frame or CreateFrame(""Frame"")

            local CallbackHandler
            local CallbackDummy = { Fire = function() end }

            local DBObjectLib = {}

            -- Simple shallow copy for copying defaults
            local function copyTable(src, dest)
                if type(dest) ~= ""table"" then dest = {} end
                if type(src) == ""table"" then
                    for k,v in pairs(src) do
                        if type(v) == ""table"" then
                            -- try to index the key first so that the metatable creates the defaults, if set, and use that table
                            v = copyTable(v, dest[k])
                        end
                        dest[k] = v
                    end
                end
                return dest
            end

            local function copyDefaults(dest, src)

                for k, v in pairs(src) do
                    if k == ""*"" or k == ""**"" then
                        if type(v) == ""table"" then

                            local mt = {

                                __index = function(t,k)
                                        if k == nil then return nil end
                                        local tbl = {}
                                        copyDefaults(tbl, v)
                                        rawset(t, k, tbl)
                                        return tbl
                                    end,
                            }
                            setmetatable(dest, mt)

                            for dk, dv in pairs(dest) do
                                if not rawget(src, dk) and type(dv) == ""table"" then
                                    copyDefaults(dv, v)
                                end
                            end
                        else
                            local mt = {__index = function(t,k) return k~=nil and v or nil end}
                            setmetatable(dest, mt)
                        end
                    elseif type(v) == ""table"" then
                        if not rawget(dest, k) then rawset(dest, k, {}) end
                        if type(dest[k]) == ""table"" then
                            copyDefaults(dest[k], v)
                            if src['**'] then
                                copyDefaults(dest[k], src['**'])
                            end
                        end
                    else
                        if rawget(dest, k) == nil then
                            rawset(dest, k, v)
                        end
                    end
                end
            end

            local function removeDefaults(db, defaults, blocker)

                setmetatable(db, nil)
			
                for k,v in pairs(defaults) do
                    if k == ""*"" or k == ""**"" then
                        if type(v) == ""table"" then
                            -- Loop through all the actual k,v pairs and remove
                            for key, value in pairs(db) do
                                if type(value) == ""table"" then
                                    -- if the key was not explicitly specified in the defaults table, just strip everything from * and ** tables
                                    if defaults[key] == nil and (not blocker or blocker[key] == nil) then
                                        removeDefaults(value, v)
                                        -- if the table is empty afterwards, remove it
                                        if next(value) == nil then
                                            db[key] = nil
                                        end
                                    -- if it was specified, only strip ** content, but block values which were set in the key table
                                    elseif k == ""**"" then
                                        removeDefaults(value, v, defaults[key])
                                    end
                                end
                            end
                        elseif k == ""*"" then
                            -- check for non-table default
                            for key, value in pairs(db) do
                                if defaults[key] == nil and v == value then
                                    db[key] = nil
                                end
                            end
                        end
                    elseif type(v) == ""table"" and type(db[k]) == ""table"" then
                        -- if a blocker was set, dive into it, to allow multi-level defaults
                        removeDefaults(db[k], v, blocker and blocker[k])
                        if next(db[k]) == nil then
                            db[k] = nil
                        end
                    else
                        -- check if the current value matches the default, and that its not blocked by another defaults table
                        if db[k] == defaults[k] and (not blocker or blocker[k] == nil) then
                            db[k] = nil
                        end
                    end
                end
            end

            local function initSection(db, section, svstore, key, defaults)
                local sv = rawget(db, ""sv"")

                local tableCreated
                if not sv[svstore] then sv[svstore] = {} end
                if not sv[svstore][key] then
                    sv[svstore][key] = {}
                    tableCreated = true
                end

                local tbl = sv[svstore][key]

                if defaults then
                    copyDefaults(tbl, defaults)
                end
                rawset(db, section, tbl)

                return tableCreated, tbl
            end

            local dbmt = {
                __index = function(t, section)
                        local keys = rawget(t, ""keys"")
                        local key = keys[section]
                        if key then
                            local defaultTbl = rawget(t, ""defaults"")
                            local defaults = defaultTbl and defaultTbl[section]

                            if section == ""profile"" then
                                local new = initSection(t, section, ""profiles"", key, defaults)
                                if new then
                                    -- Callback: OnNewProfile, database, newProfileKey
                                    t.callbacks:Fire(""OnNewProfile"", t, key)
                                end
                            elseif section == ""profiles"" then
                                local sv = rawget(t, ""sv"")
                                if not sv.profiles then sv.profiles = {} end
                                rawset(t, ""profiles"", sv.profiles)
                            elseif section == ""global"" then
                                local sv = rawget(t, ""sv"")
                                if not sv.global then sv.global = {} end
                                if defaults then
                                    copyDefaults(sv.global, defaults)
                                end
                                rawset(t, section, sv.global)
                            else
                                initSection(t, section, section, key, defaults)
                            end
                        end

                        return rawget(t, section)
                    end
            }

            local function validateDefaults(defaults, keyTbl, offset)
                if not defaults then return end
                offset = offset or 0
                for k in pairs(defaults) do
                    if not keyTbl[k] or k == ""profiles"" then
                        error((""Usage: AceDBObject:RegisterDefaults(defaults): '%s' is not a valid datatype.""):format(k), 3 + offset)
                    end
                end
            end

            local preserve_keys = {
                [""callbacks""] = true,
                [""RegisterCallback""] = true,
                [""UnregisterCallback""] = true,
                [""UnregisterAllCallbacks""] = true,
                [""children""] = true,
            }

            local realmKey = GetRealmName()
            local charKey = UnitName(""player"") .. "" - "" .. realmKey
            local _, classKey = UnitClass(""player"")
            local _, raceKey = UnitRace(""player"")
            local factionKey = UnitFactionGroup(""player"")
            local factionrealmKey = factionKey .. "" - "" .. realmKey
            local function initdb(sv, defaults, defaultProfile, olddb, parent)

                if defaultProfile == true then defaultProfile = ""Default"" end

                local profileKey
                if not parent then
                    if not sv.profileKeys then sv.profileKeys = {} end

                    profileKey = sv.profileKeys[charKey] or defaultProfile or charKey

                    sv.profileKeys[charKey] = profileKey
                else

                    profileKey = parent.keys.profile or defaultProfile or charKey

                    sv.profileKeys = nil
                end

                -- This table contains keys that enable the dynamic creation
                -- of each section of the table.  The 'global' and 'profiles'
                -- have a key of true, since they are handled in a special case
                local keyTbl= {
                    [""char""] = charKey,
                    [""realm""] = realmKey,
                    [""class""] = classKey,
                    [""race""] = raceKey,
                    [""faction""] = factionKey,
                    [""factionrealm""] = factionrealmKey,
                    [""profile""] = profileKey,
                    [""global""] = true,
                    [""profiles""] = true,
                }

                validateDefaults(defaults, keyTbl, 1)

                if olddb then
                    for k,v in pairs(olddb) do if not preserve_keys[k] then olddb[k] = nil end end
                end

                local db = setmetatable(olddb or {}, dbmt)

                if not rawget(db, ""callbacks"") then

                    if not CallbackHandler then CallbackHandler = LibStub:GetLibrary(""CallbackHandler-1.0"", true) end
                    db.callbacks = CallbackHandler and CallbackHandler:New(db) or CallbackDummy
                end
			
                if not parent then
                    for name, func in pairs(DBObjectLib) do
                        db[name] = func
                    end
                else

                    db.RegisterDefaults = DBObjectLib.RegisterDefaults
                    db.ResetProfile = DBObjectLib.ResetProfile
                end

                db.profiles = sv.profiles
                db.keys = keyTbl
                db.sv = sv

                db.defaults = defaults
                db.parent = parent

                AceDB.db_registry[db] = true

                return db
            end

            local function logoutHandler(frame, event)
                if event == ""PLAYER_LOGOUT"" then
                    for db in pairs(AceDB.db_registry) do
                        db.callbacks:Fire(""OnDatabaseShutdown"", db)
                        db:RegisterDefaults(nil)
                    
                        local sv = rawget(db, ""sv"")
                        for section in pairs(db.keys) do
                            if rawget(sv, section) then

                                if section ~= ""global"" and (section ~= ""profiles"" or rawget(db, ""parent"")) then
                                    for key in pairs(sv[section]) do
                                        if not next(sv[section][key]) then
                                            sv[section][key] = nil
                                        end
                                    end
                                end
                                if not next(sv[section]) then
                                    sv[section] = nil
                                end
                            end
                        end
                    end
                end
            end

            AceDB.frame:RegisterEvent(""PLAYER_LOGOUT"")
            AceDB.frame:SetScript(""OnEvent"", logoutHandler)

            function DBObjectLib:RegisterDefaults(defaults)
                if defaults and type(defaults) ~= ""table"" then
                    error(""Usage: AceDBObject:RegisterDefaults(defaults): 'defaults' - table or nil expected."", 2)
                end

                validateDefaults(defaults, self.keys)

                if self.defaults then
                    for section,key in pairs(self.keys) do
                        if self.defaults[section] and rawget(self, section) then
                            removeDefaults(self[section], self.defaults[section])
                        end
                    end
                end

                self.defaults = defaults

                if defaults then
                    for section,key in pairs(self.keys) do
                        if defaults[section] and rawget(self, section) then
                            copyDefaults(self[section], defaults[section])
                        end
                    end
                end
            end

            function DBObjectLib:SetProfile(name)
                if type(name) ~= ""string"" then
                    error(""Usage: AceDBObject:SetProfile(name): 'name' - string expected."", 2)
                end

                if name == self.keys.profile then return end

                local oldProfile = self.profile
                local defaults = self.defaults and self.defaults.profile

                self.callbacks:Fire(""OnProfileShutdown"", self)

                if oldProfile and defaults then
                    -- Remove the defaults from the old profile
                    removeDefaults(oldProfile, defaults)
                end

                self.profile = nil
                self.keys[""profile""] = name

                if self.sv.profileKeys then
                    self.sv.profileKeys[charKey] = name
                end

                if self.children then
                    for _, db in pairs(self.children) do
                        DBObjectLib.SetProfile(db, name)
                    end
                end

                self.callbacks:Fire(""OnProfileChanged"", self, name)
            end

            function DBObjectLib:GetProfiles(tbl)
                if tbl and type(tbl) ~= ""table"" then
                    error(""Usage: AceDBObject:GetProfiles(tbl): 'tbl' - table or nil expected."", 2)
                end

                if tbl then
                    for k,v in pairs(tbl) do tbl[k] = nil end
                else
                    tbl = {}
                end

                local curProfile = self.keys.profile

                local i = 0
                for profileKey in pairs(self.profiles) do
                    i = i + 1
                    tbl[i] = profileKey
                    if curProfile and profileKey == curProfile then curProfile = nil end
                end

                if curProfile then
                    i = i + 1
                    tbl[i] = curProfile
                end

                return tbl, i
            end

            function DBObjectLib:GetCurrentProfile()
                return self.keys.profile
            end

            function DBObjectLib:DeleteProfile(name, silent)
                if type(name) ~= ""string"" then
                    error(""Usage: AceDBObject:DeleteProfile(name): 'name' - string expected."", 2)
                end

                if self.keys.profile == name then
                    error(""Cannot delete the active profile in an AceDBObject."", 2)
                end

                if not rawget(self.profiles, name) and not silent then
                    error(""Cannot delete profile '"" .. name .. ""'. It does not exist."", 2)
                end

                self.profiles[name] = nil

                if self.children then
                    for _, db in pairs(self.children) do
                        DBObjectLib.DeleteProfile(db, name, true)
                    end
                end

                self.callbacks:Fire(""OnProfileDeleted"", self, name)
            end

            function DBObjectLib:CopyProfile(name, silent)
                if type(name) ~= ""string"" then
                    error(""Usage: AceDBObject:CopyProfile(name): 'name' - string expected."", 2)
                end

                if name == self.keys.profile then
                    error(""Cannot have the same source and destination profiles."", 2)
                end

                if not rawget(self.profiles, name) and not silent then
                    error(""Cannot copy profile '"" .. name .. ""'. It does not exist."", 2)
                end

                DBObjectLib.ResetProfile(self, nil, true)

                local profile = self.profile
                local source = self.profiles[name]

                copyTable(source, profile)

                if self.children then
                    for _, db in pairs(self.children) do
                        DBObjectLib.CopyProfile(db, name, true)
                    end
                end


                self.callbacks:Fire(""OnProfileCopied"", self, name)
            end

            function DBObjectLib:ResetProfile(noChildren, noCallbacks)
                local profile = self.profile

                for k,v in pairs(profile) do
                    profile[k] = nil
                end

                local defaults = self.defaults and self.defaults.profile
                if defaults then
                    copyDefaults(profile, defaults)
                end

                if self.children and not noChildren then
                    for _, db in pairs(self.children) do
                        DBObjectLib.ResetProfile(db, nil, noCallbacks)
                    end
                end

                if not noCallbacks then
                    self.callbacks:Fire(""OnProfileReset"", self)
                end
            end

            function DBObjectLib:ResetDB(defaultProfile)
                if defaultProfile and type(defaultProfile) ~= ""string"" then
                    error(""Usage: AceDBObject:ResetDB(defaultProfile): 'defaultProfile' - string or nil expected."", 2)
                end

                local sv = self.sv
                for k,v in pairs(sv) do
                    sv[k] = nil
                end

                local parent = self.parent

                initdb(sv, self.defaults, defaultProfile, self)

                if self.children then
                    if not sv.namespaces then sv.namespaces = {} end
                    for name, db in pairs(self.children) do
                        if not sv.namespaces[name] then sv.namespaces[name] = {} end
                        initdb(sv.namespaces[name], db.defaults, self.keys.profile, db, self)
                    end
                end

                self.callbacks:Fire(""OnDatabaseReset"", self)
                self.callbacks:Fire(""OnProfileChanged"", self, self.keys[""profile""])

                return self
            end

            function DBObjectLib:RegisterNamespace(name, defaults)
                if type(name) ~= ""string"" then
                    error(""Usage: AceDBObject:RegisterNamespace(name, defaults): 'name' - string expected."", 2)
                end
                if defaults and type(defaults) ~= ""table"" then
                    error(""Usage: AceDBObject:RegisterNamespace(name, defaults): 'defaults' - table or nil expected."", 2)
                end
                if self.children and self.children[name] then
                    error (""Usage: AceDBObject:RegisterNamespace(name, defaults): 'name' - a namespace with that name already exists."", 2)
                end

                local sv = self.sv
                if not sv.namespaces then sv.namespaces = {} end
                if not sv.namespaces[name] then
                    sv.namespaces[name] = {}
                end

                local newDB = initdb(sv.namespaces[name], defaults, self.keys.profile, nil, self)

                if not self.children then self.children = {} end
                self.children[name] = newDB
                return newDB
            end

            function DBObjectLib:GetNamespace(name, silent)
                if type(name) ~= ""string"" then
                    error(""Usage: AceDBObject:GetNamespace(name): 'name' - string expected."", 2)
                end
                if not silent and not (self.children and self.children[name]) then
                    error (""Usage: AceDBObject:GetNamespace(name): 'name' - namespace does not exist."", 2)
                end
                if not self.children then self.children = {} end
                return self.children[name]
            end

            function AceDB:New(tbl, defaults, defaultProfile)
                if type(tbl) == ""string"" then
                    local name = tbl
                    tbl = _G[name]
                    if not tbl then
                        tbl = {}
                        _G[name] = tbl
                    end
                end

                if type(tbl) ~= ""table"" then
                    error(""Usage: AceDB:New(tbl, defaults, defaultProfile): 'tbl' - table expected."", 2)
                end

                if defaults and type(defaults) ~= ""table"" then
                    error(""Usage: AceDB:New(tbl, defaults, defaultProfile): 'defaults' - table expected."", 2)
                end

                if defaultProfile and type(defaultProfile) ~= ""string"" and defaultProfile ~= true then
                    error(""Usage: AceDB:New(tbl, defaults, defaultProfile): 'defaultProfile' - string or true expected."", 2)
                end

                return initdb(tbl, defaults, defaultProfile)
            end

            for db in pairs(AceDB.db_registry) do
                if not db.parent then
                    for name,func in pairs(DBObjectLib) do
                        db[name] = func
                    end
                else
                    db.RegisterDefaults = DBObjectLib.RegisterDefaults
                    db.ResetProfile = DBObjectLib.ResetProfile
                end
            end

            local ACEHOOK_MAJOR, ACEHOOK_MINOR = ""AceHook-3.0"", 5
            local AceHook, oldminor = LibStub:NewLibrary(ACEHOOK_MAJOR, ACEHOOK_MINOR)

            if not AceHook then return end -- No upgrade needed

            AceHook.embeded = AceHook.embeded or {}
            AceHook.registry = AceHook.registry or setmetatable({}, {__index = function(tbl, key) tbl[key] = {} return tbl[key] end })
            AceHook.handlers = AceHook.handlers or {}
            AceHook.actives = AceHook.actives or {}
            AceHook.scripts = AceHook.scripts or {}
            AceHook.onceSecure = AceHook.onceSecure or {}
            AceHook.hooks = AceHook.hooks or {}

            local registry = AceHook.registry
            local handlers = AceHook.handlers
            local actives = AceHook.actives
            local scripts = AceHook.scripts
            local onceSecure = AceHook.onceSecure

            local pairs, next, type = pairs, next, type
            local format = string.format
            local assert, error = assert, error

            local issecurevariable, hooksecurefunc = issecurevariable, hooksecurefunc
            local _G = _G

            local donothing, createHook, hook

            local protectedScripts = {
                OnClick = true,
            }

            local mixins = {
                ""Hook"", ""SecureHook"",
                ""HookScript"", ""SecureHookScript"",
                ""Unhook"", ""UnhookAll"",
                ""IsHooked"",
                ""RawHook"", ""RawHookScript""
            }

            function AceHook:Embed( target )
                for k, v in pairs( mixins ) do
                    target[v] = self[v]
                end
                self.embeded[target] = true
                target.hooks = target.hooks or {}
                return target
            end

            function AceHook:OnEmbedDisable( target )
                target:UnhookAll()
            end

            function createHook(self, handler, orig, secure, failsafe)
                local uid
                local method = type(handler) == ""string""
                if failsafe and not secure then
                    uid = function(...)
                        if actives[uid] then
                            if method then
                                self[handler](self, ...)
                            else
                                handler(...)
                            end
                        end
                        return orig(...)
                    end
                else
                    uid = function(...)
                        if actives[uid] then
                            if method then
                                return self[handler](self, ...)
                            else
                                return handler(...)
                            end
                        elseif not secure then -- backup on non secure
                            return orig(...)
                        end
                    end
                end
                return uid
            end

            function donothing() end

            function hook(self, obj, method, handler, script, secure, raw, forceSecure, usage)
                if not handler then handler = method end
            
                assert(not script or type(script) == ""boolean"")
                assert(not secure or type(secure) == ""boolean"")
                assert(not raw or type(raw) == ""boolean"")
                assert(not forceSecure or type(forceSecure) == ""boolean"")
                assert(usage)
            
                if obj and type(obj) ~= ""table"" then
                    error(format(""%s: 'object' - nil or table expected got %s"", usage, type(obj)), 3)
                end
                if type(method) ~= ""string"" then
                    error(format(""%s: 'method' - string expected got %s"", usage, type(method)), 3)
                end
                if type(handler) ~= ""string"" and type(handler) ~= ""function"" then
                    error(format(""%s: 'handler' - nil, string, or function expected got %s"", usage, type(handler)), 3)
                end
                if type(handler) == ""string"" and type(self[handler]) ~= ""function"" then
                    error(format(""%s: 'handler' - Handler specified does not exist at self[handler]"", usage), 3)
                end
                if script then
                    if not secure and obj:IsProtected() and protectedScripts[method] then
                        error(format(""Cannot hook secure script %q; Use SecureHookScript(obj, method, [handler]) instead."", method), 3)
                    end
                    if not obj or not obj.GetScript or not obj:HasScript(method) then
                        error(format(""%s: You can only hook a script on a frame object"", usage), 3)
                    end
                else
                    local issecure 
                    if obj then 
                        issecure = onceSecure[obj] and onceSecure[obj][method] or issecurevariable(obj, method)
                    else
                        issecure = onceSecure[method] or issecurevariable(method)
                    end
                    if issecure then
                        if forceSecure then
                            if obj then
                                onceSecure[obj] = onceSecure[obj] or {}
                                onceSecure[obj][method] = true
                            else
                                onceSecure[method] = true
                            end
                        elseif not secure then
                            error(format(""%s: Attempt to hook secure function %s. Use `SecureHook' or add `true' to the argument list to override."", usage, method), 3)
                        end
                    end
                end
            
                local uid
                if obj then
                    uid = registry[self][obj] and registry[self][obj][method]
                else
                    uid = registry[self][method]
                end
            
                if uid then
                    if actives[uid] then
                        -- Only two sane choices exist here.  We either a) error 100% of the time or b) always unhook and then hook
                        -- choice b would likely lead to odd debuging conditions or other mysteries so we're going with a.
                        error(format(""Attempting to rehook already active hook %s."", method))
                    end
                
                    if handlers[uid] == handler then -- turn on a decative hook, note enclosures break this ability, small memory leak
                        actives[uid] = true
                        return
                    elseif obj then -- is there any reason not to call unhook instead of doing the following several lines?
                        if self.hooks and self.hooks[obj] then
                            self.hooks[obj][method] = nil
                        end
                        registry[self][obj][method] = nil
                    else
                        if self.hooks then
                            self.hooks[method] = nil
                        end
                        registry[self][method] = nil
                    end
                    handlers[uid], actives[uid], scripts[uid] = nil, nil, nil
                    uid = nil
                end
            
                local orig
                if script then
                    orig = obj:GetScript(method) or donothing
                elseif obj then
                    orig = obj[method]
                else
                    orig = _G[method]
                end
            
                if not orig then
                    error(format(""%s: Attempting to hook a non existing target"", usage), 3)
                end
            
                uid = createHook(self, handler, orig, secure, not (raw or secure))
            
                if obj then
                    self.hooks[obj] = self.hooks[obj] or {}
                    registry[self][obj] = registry[self][obj] or {}
                    registry[self][obj][method] = uid

                    if not secure then
                        self.hooks[obj][method] = orig
                    end
                
                    if script then
                        if not secure or orig == donothing then
                            obj:SetScript(method, uid)
                        elseif secure then
                            obj:HookScript(method, uid)
                        end
                    else
                        if not secure then
                            obj[method] = uid
                        else
                            hooksecurefunc(obj, method, uid)
                        end
                    end
                else
                    registry[self][method] = uid
                
                    if not secure then
                        _G[method] = uid
                        self.hooks[method] = orig
                    else
                        hooksecurefunc(method, uid)
                    end
                end
            
                actives[uid], handlers[uid], scripts[uid] = true, handler, script and true or nil	
            end

            function AceHook:Hook(object, method, handler, hookSecure)
                if type(object) == ""string"" then
                    method, handler, hookSecure, object = object, method, handler, nil
                end
            
                if handler == true then
                    handler, hookSecure = nil, true
                end

                hook(self, object, method, handler, false, false, false, hookSecure or false, ""Usage: Hook([object], method, [handler], [hookSecure])"")	
            end

            function AceHook:RawHook(object, method, handler, hookSecure)
                if type(object) == ""string"" then
                    method, handler, hookSecure, object = object, method, handler, nil
                end
            
                if handler == true then
                    handler, hookSecure = nil, true
                end
            
                hook(self, object, method, handler, false, false, true, hookSecure or false,  ""Usage: RawHook([object], method, [handler], [hookSecure])"")
            end

            function AceHook:SecureHook(object, method, handler)
                if type(object) == ""string"" then
                    method, handler, object = object, method, nil
                end
            
                hook(self, object, method, handler, false, true, false, false,  ""Usage: SecureHook([object], method, [handler])"")
            end

            function AceHook:HookScript(frame, script, handler)
                hook(self, frame, script, handler, true, false, false, false,  ""Usage: HookScript(object, method, [handler])"")
            end

            function AceHook:RawHookScript(frame, script, handler)
                hook(self, frame, script, handler, true, false, true, false, ""Usage: RawHookScript(object, method, [handler])"")
            end

            function AceHook:SecureHookScript(frame, script, handler)
                hook(self, frame, script, handler, true, true, false, false, ""Usage: SecureHookScript(object, method, [handler])"")
            end

            function AceHook:Unhook(obj, method)
                local usage = ""Usage: Unhook([obj], method)""
                if type(obj) == ""string"" then
                    method, obj = obj, nil
                end
                
                if obj and type(obj) ~= ""table"" then
                    error(format(""%s: 'obj' - expecting nil or table got %s"", usage, type(obj)), 2)
                end
                if type(method) ~= ""string"" then
                    error(format(""%s: 'method' - expeting string got %s"", usage, type(method)), 2)
                end
            
                local uid
                if obj then
                    uid = registry[self][obj] and registry[self][obj][method]
                else
                    uid = registry[self][method]
                end
            
                if not uid or not actives[uid] then
                    return false
                end
            
                actives[uid], handlers[uid] = nil, nil
            
                if obj then
                    registry[self][obj][method] = nil
                    registry[self][obj] = next(registry[self][obj]) and registry[self][obj] or nil
                
                    if not self.hooks[obj] or not self.hooks[obj][method] then return true end
                
                    if scripts[uid] and obj:GetScript(method) == uid then  -- unhooks scripts
                        obj:SetScript(method, self.hooks[obj][method] ~= donothing and self.hooks[obj][method] or nil)	
                        scripts[uid] = nil
                    elseif obj and self.hooks[obj] and self.hooks[obj][method] and obj[method] == uid then -- unhooks methods
                        obj[method] = self.hooks[obj][method]
                    end
                
                    self.hooks[obj][method] = nil
                    self.hooks[obj] = next(self.hooks[obj]) and self.hooks[obj] or nil
                else
                    registry[self][method] = nil
                
                    if not self.hooks[method] then return true end
                
                    if self.hooks[method] and _G[method] == uid then -- unhooks functions
                        _G[method] = self.hooks[method]
                    end
                
                    self.hooks[method] = nil
                end
                return true
            end

            function AceHook:UnhookAll()
                for key, value in pairs(registry[self]) do
                    if type(key) == ""table"" then
                        for method in pairs(value) do
                            self:Unhook(key, method)
                        end
                    else
                        self:Unhook(key)
                    end
                end
            end

            function AceHook:IsHooked(obj, method)
                if type(obj) == ""string"" then
                    if registry[self][obj] and actives[registry[self][obj]] then
                        return true, handlers[registry[self][obj]]
                    end
                else
                    if registry[self][obj] and registry[self][obj][method] and actives[registry[self][obj][method]] then
                        return true, handlers[registry[self][obj][method]]
                    end
                end
            
                return false, nil
            end

            for target, v in pairs( AceHook.embeded ) do
                AceHook:Embed( target )
            end

            local MAJOR,MINOR = ""AceLocale-3.0"", 2

            local AceLocale, oldminor = LibStub:NewLibrary(MAJOR, MINOR)

            if not AceLocale then return end -- no upgrade needed

            local assert, tostring, error = assert, tostring, error
            local setmetatable, rawset, rawget = setmetatable, rawset, rawget

            local gameLocale = GetLocale()
            if gameLocale == ""enGB"" then
                gameLocale = ""enUS""
            end

            AceLocale.apps = AceLocale.apps or {}  
            AceLocale.appnames = AceLocale.appnames or {}  

            local readmeta = {
                __index = function(self, key) -- requesting totally unknown entries: fire off a nonbreaking error and return key
                    rawset(self, key, key)      -- only need to see the warning once, really
                    geterrorhandler()(MAJOR.."": ""..tostring(AceLocale.appnames[self]).."": Missing entry for '""..tostring(key)..""'"")
                    return key
                end
            }

            local readmetasilent = {
                __index = function(self, key) -- requesting totally unknown entries: return key
                    rawset(self, key, key)      -- only need to invoke this function once
                    return key
                end
            }

            local registering

            local assertfalse = function() assert(false) end

            local writeproxy = setmetatable({}, {
                __newindex = function(self, key, value)
                    rawset(registering, key, value == true and key or value) -- assigning values: replace 'true' with key string
                end,
                __index = assertfalse
            })

            local writedefaultproxy = setmetatable({}, {
                __newindex = function(self, key, value)
                    if not rawget(registering, key) then
                        rawset(registering, key, value == true and key or value)
                    end
                end,
                __index = assertfalse
            })

            function AceLocale:NewLocale(application, locale, isDefault, silent)
            
                if silent and not isDefault then
                    error(""Usage: NewLocale(application, locale[, isDefault[, silent]]): 'silent' can only be specified for the default locale"", 2)
                end
            
                local gameLocale = GAME_LOCALE or gameLocale

                if locale ~= gameLocale and not isDefault then
                    return -- nop, we don't need these translations
                end
            
                local app = AceLocale.apps[application]
            
                if not app then
                    app = setmetatable({}, silent and readmetasilent or readmeta)
                    AceLocale.apps[application] = app
                    AceLocale.appnames[app] = application
                end

                registering = app -- remember globally for writeproxy and writedefaultproxy
            
                if isDefault then
                    return writedefaultproxy
                end

                return writeproxy
            end

            function AceLocale:GetLocale(application, silent)
                if not silent and not AceLocale.apps[application] then
                    error(""Usage: GetLocale(application[, silent]): 'application' - No locales registered for '""..tostring(application)..""'"", 2)
                end
                return AceLocale.apps[application]
            end

            local Postal = LibStub(""AceAddon-3.0""):NewAddon(""Postal"", ""AceEvent-3.0"", ""AceHook-3.0"")

            _G[""Postal""] = Postal
            local TOC = select(4, GetBuildInfo())

            local defaults = {
                profile = {
                    ModuleEnabledState = {
                        [""*""] = true
                    },
                    OpenSpeed = 0.30,
                    Select = {
                        SpamChat = true,
                        KeepFreeSpace = 1,
                    },
                    OpenAll = {
                        AHCancelled = true,
                        AHExpired = true,
                        AHOutbid = true,
                        AHSuccess = true,
                        AHWon = true,
                        NeutralAHCancelled = true,
                        NeutralAHExpired = true,
                        NeutralAHOutbid = true,
                        NeutralAHSuccess = true,
                        NeutralAHWon = true,
                        Attachments = true,
                        SpamChat = true,
                        KeepFreeSpace = 1,
                    },
                    Express = {
                        EnableAltClick = true,
                        AutoSend = true,
                        MouseWheel = true,
                        MultiItemTooltip = true,
                    },
                    BlackBook = {
                        AutoFill = true,
                        contacts = {},
                        recent = {},
                        AutoCompleteAlts = true,
                        AutoCompleteRecent = true,
                        AutoCompleteContacts = true,
                        AutoCompleteRealIDFriends = true,
                        AutoCompleteFriends = true,
                        AutoCompleteGuild = true,
                        ExcludeRandoms = true,
                        DisableBlizzardAutoComplete = false,
                        UseAutoComplete = true,
                    },
                },
                global = {
                    BlackBook = {
                        alts = {},
                        realID = {},
                    },
                },
            }
            local _G = getfenv(0)
            local t = {}
            Postal.keepFreeOptions = {0, 1, 2, 3, 5, 10, 15, 20, 25, 30}

            local Postal_DropDownMenu = CreateFrame(""Frame"", ""Postal_DropDownMenu"")
            Postal_DropDownMenu.displayMode = ""MENU""
            Postal_DropDownMenu.info = {}
            Postal_DropDownMenu.levelAdjust = 0
            Postal_DropDownMenu.UncheckHack = function(dropdownbutton)
                _G[dropdownbutton:GetName()..""Check""]:Hide()
                if TOC >= 40000 then
                    _G[dropdownbutton:GetName()..""UnCheck""]:Hide()
                end
            end
            Postal_DropDownMenu.HideMenu = function()
                if UIDROPDOWNMENU_OPEN_MENU == Postal_DropDownMenu then
                    CloseDropDownMenus()
                end
            end

            local function subjectHoverIn(self)
                local s = _G[""MailItem""..self:GetID()..""Subject""]
                if s:GetStringWidth() + 25 > s:GetWidth() then
                    GameTooltip:SetOwner(self, ""ANCHOR_RIGHT"")
                    GameTooltip:SetText(s:GetText())
                    GameTooltip:Show()
                end
            end
            local function subjectHoverOut(self)
                GameTooltip:Hide()
            end


            ---------------------------
            -- Postal Core Functions --
            ---------------------------

            function Postal:OnInitialize()
                -- Version number
                if not self.version then self.version = GetAddOnMetadata(""Postal"", ""Version"") end

                -- Initialize database
                self.db = LibStub(""AceDB-3.0""):New(""Postal3DB"", defaults)
                self.db.RegisterCallback(self, ""OnProfileChanged"", ""OnProfileChanged"")
                self.db.RegisterCallback(self, ""OnProfileCopied"", ""OnProfileChanged"")
                self.db.RegisterCallback(self, ""OnProfileReset"", ""OnProfileChanged"")

                -- Enable/disable modules based on saved settings
                for name, module in self:IterateModules() do 
                    module:SetEnabledState(self.db.profile.ModuleEnabledState[name] or false)
                    if module.OnEnable then
                        hooksecurefunc(module, ""OnEnable"", self.OnModuleEnable_Common) -- Posthook
                    end
                end

                -- Register events
                self:RegisterEvent(""MAIL_CLOSED"")

                -- Create the Menu Button
                local Postal_ModuleMenuButton = CreateFrame(""Button"", ""Postal_ModuleMenuButton"", MailFrame)
                Postal_ModuleMenuButton:SetWidth(25)
                Postal_ModuleMenuButton:SetHeight(25)
                Postal_ModuleMenuButton:SetPoint(""TOPRIGHT"", -53, -12)
                Postal_ModuleMenuButton:SetNormalTexture(""Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Up"")
                Postal_ModuleMenuButton:SetHighlightTexture(""Interface\\Buttons\\ButtonHilight-Round"")
                Postal_ModuleMenuButton:SetDisabledTexture(""Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Disabled"")
                Postal_ModuleMenuButton:SetPushedTexture(""Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Down"")
                Postal_ModuleMenuButton:SetScript(""OnClick"", function(self, button, down)
                    if Postal_DropDownMenu.initialize ~= Postal.Menu then
                        CloseDropDownMenus()
                        Postal_DropDownMenu.initialize = Postal.Menu
                    end
                    ToggleDropDownMenu(1, nil, Postal_DropDownMenu, self:GetName(), 0, 0)
                end)
                Postal_ModuleMenuButton:SetScript(""OnHide"", Postal_DropDownMenu.HideMenu)

                -- Create 7 buttons for mouseover on long subject lines
                for i = 1, 7 do
                    local b = CreateFrame(""Button"", ""PostalSubjectHover""..i, _G[""MailItem""..i])
                    b:SetID(i)
                    b:SetAllPoints(_G[""MailItem""..i..""Subject""])
                    b:SetScript(""OnEnter"", subjectHoverIn)
                    b:SetScript(""OnLeave"", subjectHoverOut)
                end

                -- To fix Blizzard's bug caused by the new ""self:SetFrameLevel(2);""
                if TOC < 40000 and not IsAddOnLoaded(""!BlizzBugsSuck"") then
                    hooksecurefunc(""UIDropDownMenu_CreateFrames"", Postal.FixMenuFrameLevels)
                end

                self.OnInitialize = nil
            end

            function Postal:OnProfileChanged(event, database, newProfileKey)
                for name, module in self:IterateModules() do 
                    if self.db.profile.ModuleEnabledState[name] then
                        module:Enable()
                    else
                        module:Disable()
                    end
                end
            end

            function Postal:OnModuleEnable_Common()
                -- If the module is enabled with the MailFrame open (at mailbox)
                -- run the MAIL_SHOW() event function
                if self.MAIL_SHOW and MailFrame:IsVisible() then
                    self:MAIL_SHOW()
                end
            end

            -- Hides the minimap unread mail button if there are no unread mail on closing the mailbox.
            -- Does not scan past the first 50 items since only the first 50 are viewable.
            function Postal:MAIL_CLOSED()
                for i = 1, GetInboxNumItems() do
                    if not select(9, GetInboxHeaderInfo(i)) then return end
                end
                MiniMapMailFrame:Hide()
            end

            function Postal:Print(...)
                local text = ""|cff33ff99Postal|r:""
                for i = 1, select(""#"", ...) do
                    text = text.."" ""..tostring(select(i, ...))
                end
                print(text)
            end

            function Postal.SaveOption(dropdownbutton, arg1, arg2, checked)
                Postal.db.profile[arg1][arg2] = checked
            end

            function Postal.ToggleModule(dropdownbutton, arg1, arg2, checked)
                Postal.db.profile.ModuleEnabledState[arg1] = checked
                if checked then arg2:Enable() else arg2:Disable() end
            end

            function Postal.SetOpenSpeed(dropdownbutton, arg1, arg2, checked)
                Postal.db.profile.OpenSpeed = arg1
            end

            function Postal.ProfileFunc(dropdownbutton, arg1, arg2, checked)
                if arg1 == ""NewProfile"" then
                    StaticPopup_Show(""POSTAL_NEW_PROFILE"")
                else
                    Postal.db[arg1](Postal.db, arg2)
                end
                CloseDropDownMenus()
            end

            StaticPopupDialogs[""POSTAL_NEW_PROFILE""] = {
                text = ""New Profile Name:"",
                button1 = ACCEPT,
                button2 = CANCEL,
                hasEditBox = 1,
                maxLetters = 128,
                hasWideEditBox = 1,  -- Not needed in Cata
                editBoxWidth = 350,  -- Needed in Cata
                OnAccept = function(self)
                    if TOC < 40000 then
                        Postal.db:SetProfile(strtrim(self.wideEditBox:GetText()))
                    else
                        Postal.db:SetProfile(strtrim(self.editBox:GetText()))
                    end
                end,
                OnShow = function(self)
                    if TOC < 40000 then
                        self.wideEditBox:SetText(Postal.db:GetCurrentProfile())
                        self.wideEditBox:SetFocus()
                    else
                        self.editBox:SetText(Postal.db:GetCurrentProfile())
                        self.editBox:SetFocus()
                    end
                end,
                OnHide = StaticPopupDialogs[TOC < 40000 and ""SET_GUILDMOTD"" or ""SET_GUILDPLAYERNOTE""].OnHide,
                EditBoxOnEnterPressed = function(self)
                    local parent = self:GetParent()
                    if TOC < 40000 then
                        Postal.db:SetProfile(strtrim(parent.wideEditBox:GetText()))
                    else
                        Postal.db:SetProfile(strtrim(parent.editBox:GetText()))
                    end
                    parent:Hide()
                end,
                EditBoxOnEscapePressed = StaticPopupDialogs[TOC < 40000 and ""SET_GUILDMOTD"" or ""SET_GUILDPLAYERNOTE""].EditBoxOnEscapePressed,
                timeout = 0,
                exclusive = 1,
                whileDead = 1,
                hideOnEscape = 1
            }

            function Postal.Menu(self, level)
                if not level then return end
                local info = self.info
                wipe(info)
                if level == 1 then
                    info.isTitle = 1
                    info.text = ""Postal""
                    info.notCheckable = 1
                    UIDropDownMenu_AddButton(info, level)

                    info.disabled = nil
                    info.isTitle = nil
                    info.notCheckable = nil

                    info.keepShownOnClick = 1
                    info.isNotRadio = 1
                    for name, module in Postal:IterateModules() do 
                        info.text = name
                        info.func = Postal.ToggleModule
                        info.arg1 = name
                        info.arg2 = module
                        info.checked = module:IsEnabled()
                        info.hasArrow = module.ModuleMenu ~= nil
                        info.value = module
                        UIDropDownMenu_AddButton(info, level)
                    end

                    wipe(info)
                    info.disabled = 1
                    UIDropDownMenu_AddButton(info, level)
                    info.disabled = nil

                    info.text = ""Opening Speed""
                    info.func = self.UncheckHack
                    info.notCheckable = 1
                    info.keepShownOnClick = 1
                    info.hasArrow = 1
                    info.value = ""OpenSpeed""
                    UIDropDownMenu_AddButton(info, level)

                    info.text = ""Profile""
                    info.func = self.UncheckHack
                    info.value = ""Profile""
                    UIDropDownMenu_AddButton(info, level)

                    wipe(info)
                    info.notCheckable = 1
                    info.text = ""Help""
                    info.func = Postal.About
                    UIDropDownMenu_AddButton(info, level)

                    info.disabled = 1
                    info.text = nil
                    info.func = nil
                    UIDropDownMenu_AddButton(info, level)

                    info.disabled = nil
                    info.text = CLOSE
                    info.func = self.HideMenu
                    info.tooltipTitle = CLOSE
                    UIDropDownMenu_AddButton(info, level)

                elseif level == 2 then
                    if UIDROPDOWNMENU_MENU_VALUE == ""OpenSpeed"" then
                        local speed = Postal.db.profile.OpenSpeed
                        for i = 0, 13 do
                            local s = 0.3 + i*0.05
                            info.text = format(""%0.2f"", s)
                            info.func = Postal.SetOpenSpeed
                            info.checked = s == speed
                            info.arg1 = s
                            UIDropDownMenu_AddButton(info, level)
                        end
                        for i = 0, 8 do
                            local s = 1 + i*0.5
                            info.text = format(""%0.2f"", s)
                            info.func = Postal.SetOpenSpeed
                            info.checked = s == speed
                            info.arg1 = s
                            UIDropDownMenu_AddButton(info, level)
                        end

                    elseif UIDROPDOWNMENU_MENU_VALUE == ""Profile"" then
                        -- Profile stuff
                        info.hasArrow = 1
                        info.keepShownOnClick = 1
                        info.func = self.UncheckHack
                        info.notCheckable = 1

                        info.text = ""Choose""
                        info.value = ""SetProfile""
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Copy From""
                        info.value = ""CopyProfile""
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Delete""
                        info.value = ""DeleteProfile""
                        UIDropDownMenu_AddButton(info, level)

                        info.hasArrow = nil
                        info.keepShownOnClick = nil
                        info.func = Postal.ProfileFunc
                        info.arg1 = ""NewProfile""
                        info.text = ""New Profile""
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Reset Profile""
                        info.func = Postal.ProfileFunc
                        info.arg1 = ""ResetProfile""
                        info.arg2 = nil
                        UIDropDownMenu_AddButton(info, level)
                    
                    elseif type(UIDROPDOWNMENU_MENU_VALUE) == ""table"" and UIDROPDOWNMENU_MENU_VALUE.ModuleMenu then
                        -- Submenus for modules
                        self.levelAdjust = 1
                        UIDROPDOWNMENU_MENU_VALUE.ModuleMenu(self, level)
                        self.levelAdjust = 0
                        self.module = UIDROPDOWNMENU_MENU_VALUE
                    end

                elseif level == 3 then
                    if UIDROPDOWNMENU_MENU_VALUE == ""SetProfile"" then
                        local cur = Postal.db:GetCurrentProfile()
                        Postal.db:GetProfiles(t)
                        table.sort(t)
                        info.func = Postal.ProfileFunc
                        info.arg1 = ""SetProfile""
                        for i = 1, #t do
                            local s = t[i]
                            info.text = s
                            info.arg2 = s
                            info.checked = cur == s
                            UIDropDownMenu_AddButton(info, level)
                        end

                    elseif UIDROPDOWNMENU_MENU_VALUE == ""CopyProfile"" or UIDROPDOWNMENU_MENU_VALUE == ""DeleteProfile"" then
                        local cur = Postal.db:GetCurrentProfile()
                        Postal.db:GetProfiles(t)
                        table.sort(t)
                        info.func = Postal.ProfileFunc
                        info.arg1 = UIDROPDOWNMENU_MENU_VALUE
                        info.notCheckable = 1
                        for i = 1, #t do
                            local s = t[i]
                            if s ~= cur then
                                info.text = s
                                info.arg2 = s
                                UIDropDownMenu_AddButton(info, level)
                            end
                        end

                    elseif self.module and self.module.ModuleMenu then
                        self.levelAdjust = 1
                        self.module.ModuleMenu(self, level)
                        self.levelAdjust = 0
                    end

                elseif level > 3 then
                    if self.module and self.module.ModuleMenu then
                        self.levelAdjust = 1
                        self.module.ModuleMenu(self, level)
                        self.levelAdjust = 0
                    end

                end
            end

            function Postal:CreateAboutFrame()
                local aboutFrame = Postal.aboutFrame
                if not aboutFrame and Chatter and ChatterCopyFrame then
                    aboutFrame = ChatterCopyFrame
                    aboutFrame.editBox = Chatter:GetModule(""Chat Copy"").editBox
                end
                if not aboutFrame or not aboutFrame.editBox then
                    aboutFrame = CreateFrame(""Frame"", ""PostalAboutFrame"", UIParent)
                    tinsert(UISpecialFrames, ""PostalAboutFrame"")
                    aboutFrame:SetBackdrop({
                        bgFile = [[Interface\DialogFrame\UI-DialogBox-Background]],
                        edgeFile = [[Interface\DialogFrame\UI-DialogBox-Border]],
                        tile = true, tileSize = 16, edgeSize = 16,
                        insets = { left = 3, right = 3, top = 5, bottom = 3 }
                    })
                    aboutFrame:SetBackdropColor(0,0,0,1)
                    aboutFrame:SetWidth(500)
                    aboutFrame:SetHeight(400)
                    aboutFrame:SetPoint(""CENTER"", UIParent, ""CENTER"")
                    aboutFrame:Hide()
                    aboutFrame:SetFrameStrata(""DIALOG"")
                    aboutFrame:SetToplevel(true)

                    local scrollArea = CreateFrame(""ScrollFrame"", ""PostalAboutScroll"", aboutFrame, ""UIPanelScrollFrameTemplate"")
                    scrollArea:SetPoint(""TOPLEFT"", aboutFrame, ""TOPLEFT"", 8, -30)
                    scrollArea:SetPoint(""BOTTOMRIGHT"", aboutFrame, ""BOTTOMRIGHT"", -30, 8)

                    local editBox = CreateFrame(""EditBox"", nil, aboutFrame)
                    editBox:SetMultiLine(true)
                    editBox:SetMaxLetters(99999)
                    editBox:EnableMouse(true)
                    editBox:SetAutoFocus(false)
                    editBox:SetFontObject(ChatFontNormal)
                    editBox:SetWidth(400)
                    editBox:SetHeight(270)
                    editBox:SetScript(""OnEscapePressed"", function() aboutFrame:Hide() end)
                    aboutFrame.editBox = editBox

                    scrollArea:SetScrollChild(editBox)

                    local close = CreateFrame(""Button"", nil, aboutFrame, ""UIPanelCloseButton"")
                    close:SetPoint(""TOPRIGHT"", aboutFrame, ""TOPRIGHT"")
                end
                Postal.aboutFrame = aboutFrame
                Postal.CreateAboutFrame = nil -- Kill ourselves
            end

            function Postal.About()
                if Postal.CreateAboutFrame then Postal:CreateAboutFrame() end
                local version = GetAddOnMetadata(""Postal"", ""Version"")
                wipe(t)
                tinsert(t, ""|cFFFFCC00""..GetAddOnMetadata(""Postal"", ""Title"").."" v""..version..""|r"")
                tinsert(t, ""-----"")
                tinsert(t, """")
                for name, module in Postal:IterateModules() do
                    tinsert(t, ""|cffffcc00""..name..""|r"")
                    if module.description then
                        tinsert(t, module.description)
                    end
                    if module.description2 then
                        tinsert(t, """")
                        tinsert(t, module.description2)
                    end
                    tinsert(t, """")
                end
                tinsert(t, ""-----"")
                tinsert(t, ""Please post bugs or suggestions at the wowace forums thread at |cFF00FFFFhttp://forums.wowace.com/showthread.php?t=3909|r. When posting bugs, indicate your locale and Postal's version number v%s."")
                tinsert(t, """")
                tinsert(t, ""- Xinhuan (Blackrock US Alliance)"")
                tinsert(t, """")
                Postal.aboutFrame.editBox:SetText(table.concat(t, ""\n""))
                Postal.aboutFrame:Show()
                wipe(t) -- For garbage collection
            end

            if TOC < 40000 and not IsAddOnLoaded(""!BlizzBugsSuck"") then
                -- To fix Blizzard's bug caused by the new ""self:SetFrameLevel(2);""
                local function FixFrameLevel(level, ...)
                    for i = 1, select(""#"", ...) do
                        local button = select(i, ...)
                        button:SetFrameLevel(level)
                    end
                end
                function Postal.FixMenuFrameLevels()
                    -- Postal only uses up to 4 levels of menus
                    for i = 1, 4 do
                        local f = _G[""DropDownList""..i]
                        if f then
                            FixFrameLevel(f:GetFrameLevel() + 2, f:GetChildren())
                        end
                    end
                end
            end

            ---------------------------
            -- Common Mail Functions --
            ---------------------------

            -- Disable Inbox Clicks
            local function noop() end
            function Postal:DisableInbox(disable)
                if disable then
                    if not self:IsHooked(""InboxFrame_OnClick"") then
                        self:RawHook(""InboxFrame_OnClick"", noop, true)
                        for i = 1, 7 do
                            _G[""MailItem"" .. i .. ""ButtonIcon""]:SetDesaturated(1)
                        end
                    end
                else
                    if self:IsHooked(""InboxFrame_OnClick"") then
                        self:Unhook(""InboxFrame_OnClick"")
                        for i = 1, 7 do
                            _G[""MailItem"" .. i .. ""ButtonIcon""]:SetDesaturated(nil)
                        end
                    end
                end
            end

            -- Return the type of mail a message subject is
            local SubjectPatterns = {
                AHCancelled = gsub(AUCTION_REMOVED_MAIL_SUBJECT, ""%%s"", "".*""),
                AHExpired = gsub(AUCTION_EXPIRED_MAIL_SUBJECT, ""%%s"", "".*""),
                AHOutbid = gsub(AUCTION_OUTBID_MAIL_SUBJECT, ""%%s"", "".*""),
                AHSuccess = gsub(AUCTION_SOLD_MAIL_SUBJECT, ""%%s"", "".*""),
                AHWon = gsub(AUCTION_WON_MAIL_SUBJECT, ""%%s"", "".*""),
            }
            function Postal:GetMailType(msgSubject)
                if msgSubject then
                    for k, v in pairs(SubjectPatterns) do
                        if msgSubject:find(v) then return k end
                    end
                end
                return ""NonAHMail""
            end

            function Postal:GetMoneyString(money)
                local gold = floor(money / 10000)
                local silver = floor((money - gold * 10000) / 100)
                local copper = mod(money, 100)
                if gold > 0 then
                    return format(GOLD_AMOUNT_TEXTURE.."" ""..SILVER_AMOUNT_TEXTURE.."" ""..COPPER_AMOUNT_TEXTURE, gold, 0, 0, silver, 0, 0, copper, 0, 0)
                elseif silver > 0 then
                    return format(SILVER_AMOUNT_TEXTURE.."" ""..COPPER_AMOUNT_TEXTURE, silver, 0, 0, copper, 0, 0)
                else
                    return format(COPPER_AMOUNT_TEXTURE, copper, 0, 0)
                end
            end

            function Postal:GetMoneyStringPlain(money)
                local gold = floor(money / 10000)
                local silver = floor((money - gold * 10000) / 100)
                local copper = mod(money, 100)
                if gold > 0 then
                    return gold..GOLD_AMOUNT_SYMBOL.."" ""..silver..SILVER_AMOUNT_SYMBOL.."" ""..copper..COPPER_AMOUNT_SYMBOL
                elseif silver > 0 then
                    return silver..SILVER_AMOUNT_SYMBOL.."" ""..copper..COPPER_AMOUNT_SYMBOL
                else
                    return copper..COPPER_AMOUNT_SYMBOL
                end
            end

            function Postal:CountItemsAndMoney()
                local numAttach = 0
                local numGold = 0
                for i = 1, GetInboxNumItems() do
                    local msgMoney, _, _, msgItem = select(5, GetInboxHeaderInfo(i))
                    numAttach = numAttach + (msgItem or 0)
                    numGold = numGold + msgMoney
                end
                return numAttach, numGold
            end


            --openall123

            local Postal = LibStub(""AceAddon-3.0""):GetAddon(""Postal"")
            local Postal_OpenAll = Postal:NewModule(""OpenAll"", ""AceEvent-3.0"")
            Postal_OpenAll.description = ""A button that collects all attachments and coins from mail.""
            Postal_OpenAll.description2 =  [[|cFFFFCC00*|r Simple filters are available for various mail types.
            |cFFFFCC00*|r Shift-Click the Open All button to override the filters and take ALL mail.
            |cFFFFCC00*|r OpenAll will never delete any mail (mail without text is auto-deleted by the game when all attached items and gold are taken).
            |cFFFFCC00*|r OpenAll will skip CoD mails and mails from Blizzard.
            |cFFFFCC00*|r Disable the Verbose option to stop the chat spam while opening mail.]] 

            local mailIndex, attachIndex
            local origNumItems, origTotalItems
            local lastItem, lastNumAttach, lastNumGold
            local wait
            local button
            local Postal_OpenAllMenuButton
            local skipFlag
            local invFull
            local openAllOverride

            -- Frame to process opening mail
            local updateFrame = CreateFrame(""Frame"")
            updateFrame:Hide()
            updateFrame:SetScript(""OnShow"", function(self)
                self.time = Postal.db.profile.OpenSpeed
            end)
            updateFrame:SetScript(""OnUpdate"", function(self, elapsed)
                self.time = self.time - elapsed
                if self.time <= 0 then
                    self:Hide()
                    Postal_OpenAll:ProcessNext()
                end
            end)

            -- Frame to refresh the Inbox
            -- I'm cheap so instead of trying to track 60 or so seconds since the
            -- last CheckInbox(), I just call CheckInbox() every 2 seconds
            local refreshFrame = CreateFrame(""Frame"", nil, MailFrame)
            refreshFrame:Hide()
            refreshFrame:SetScript(""OnShow"", function(self)
                self.time = 2
            end)
            refreshFrame:SetScript(""OnUpdate"", function(self, elapsed)
                self.time = self.time - elapsed
                if self.time <= 0 then
                    self.time = 2
                    Postal:Print(""Refreshing mailbox..."")
                    CheckInbox()
                    local current, total = GetInboxNumItems()
                    if current == 50 or current == total then
                        -- If we're here, then mailbox contains a full fresh 50 or
                        -- we're showing all the mail we have, so continue open all
                        self:Hide()
                        Postal_OpenAll:OpenAll(true)
                    end
                end
            end)

            function Postal_OpenAll:OnEnable()
                if not button then
                    button = CreateFrame(""Button"", ""PostalOpenAllButton"", InboxFrame, ""UIPanelButtonTemplate"")
                    button:SetWidth(120)
                    button:SetHeight(25)
                    if GetLocale() == ""frFR"" then
                        button:SetPoint(""CENTER"", InboxFrame, ""TOP"", -32, -410)
                    else
                        button:SetPoint(""CENTER"", InboxFrame, ""TOP"", -22, -410)
                    end
                    button:SetText(""Open All"")
                    button:SetScript(""OnClick"", function() Postal_OpenAll:OpenAll() end)
                    button:SetFrameLevel(button:GetFrameLevel() + 1)
                end
                if not Postal_OpenAllMenuButton then
                    -- Create the Menu Button
                    Postal_OpenAllMenuButton = CreateFrame(""Button"", ""Postal_OpenAllMenuButton"", InboxFrame);
                    Postal_OpenAllMenuButton:SetWidth(30);
                    Postal_OpenAllMenuButton:SetHeight(30);
                    Postal_OpenAllMenuButton:SetPoint(""LEFT"", button, ""RIGHT"", -2, 0);
                    Postal_OpenAllMenuButton:SetNormalTexture(""Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Up"");
                    Postal_OpenAllMenuButton:SetHighlightTexture(""Interface\\Buttons\\ButtonHilight-Round"");
                    Postal_OpenAllMenuButton:SetDisabledTexture(""Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Disabled"");
                    Postal_OpenAllMenuButton:SetPushedTexture(""Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Down"");
                    Postal_OpenAllMenuButton:SetScript(""OnClick"", function(self, button, down)
                        if Postal_DropDownMenu.initialize ~= Postal_OpenAll.ModuleMenu then
                            CloseDropDownMenus()
                            Postal_DropDownMenu.initialize = Postal_OpenAll.ModuleMenu
                        end
                        ToggleDropDownMenu(1, nil, Postal_DropDownMenu, self:GetName(), 0, 0)
                    end)
                    Postal_OpenAllMenuButton:SetFrameLevel(Postal_OpenAllMenuButton:GetFrameLevel() + 1)
                end

                self:RegisterEvent(""MAIL_SHOW"")
                -- For enabling after a disable
                button:Show()
                Postal_OpenAllMenuButton:SetScript(""OnHide"", Postal_DropDownMenu.HideMenu)
                Postal_OpenAllMenuButton:Show()
            end

            function Postal_OpenAll:OnDisable()
                self:Reset()
                button:Hide()
                Postal_OpenAllMenuButton:SetScript(""OnHide"", nil)
                Postal_OpenAllMenuButton:Hide()
            end

            function Postal_OpenAll:MAIL_SHOW()
                self:RegisterEvent(""MAIL_CLOSED"", ""Reset"")
                self:RegisterEvent(""PLAYER_LEAVING_WORLD"", ""Reset"")
            end

            function Postal_OpenAll:OpenAll(isRecursive)
                refreshFrame:Hide()
                -- Get mail counts
                origNumItems, origTotalItems = GetInboxNumItems()
                mailIndex = origNumItems
                attachIndex = ATTACHMENTS_MAX_RECEIVE
                invFull = nil
                skipFlag = false
                lastItem = false
                lastNumAttach = nil
                lastNumGold = nil
                wait = false
                if not isRecursive then openAllOverride = IsShiftKeyDown() end
                if mailIndex == 0 then
                    return
                end

                Postal:DisableInbox(1)
                button:SetText(""In Progress"")

                self:RegisterEvent(""UI_ERROR_MESSAGE"")
                self:ProcessNext()
            end

            function Postal_OpenAll:ProcessNext()
                if mailIndex > 0 then
                    -- Check if we need to wait for the mailbox to change
                    if wait then
                        local attachCount, goldCount = Postal:CountItemsAndMoney()
                        if lastNumGold ~= goldCount then
                            -- Process next mail, gold has been taken
                            wait = false
                            mailIndex = mailIndex - 1
                            attachIndex = ATTACHMENTS_MAX_RECEIVE
                            return self:ProcessNext() -- tail call
                        elseif lastNumAttach ~= attachCount then
                            -- Process next item, an attachment has been taken
                            wait = false
                            attachIndex = attachIndex - 1
                            if lastItem then
                                -- The item taken was the last item, process next mail
                                lastItem = false
                                mailIndex = mailIndex - 1
                                attachIndex = ATTACHMENTS_MAX_RECEIVE
                                return self:ProcessNext() -- tail call
                            end
                        else
                            -- Wait longer until something in the mailbox changes
                            updateFrame:Show()
                            return
                        end
                    end

                    local sender, msgSubject, msgMoney, msgCOD, _, msgItem, _, _, msgText, _, isGM = select(3, GetInboxHeaderInfo(mailIndex))

                    -- Skip mail if it contains a CoD or if its from a GM
                    if (msgCOD and msgCOD > 0) or (isGM) then
                        skipFlag = true
                        mailIndex = mailIndex - 1
                        attachIndex = ATTACHMENTS_MAX_RECEIVE
                        return self:ProcessNext() -- tail call
                    end

                    -- Filter by mail type
                    local mailType = Postal:GetMailType(msgSubject)
                    if mailType == ""NonAHMail"" then
                        -- Skip player sent mail with attachments according to user options
                        if not (openAllOverride or Postal.db.profile.OpenAll.Attachments) and msgItem then
                            mailIndex = mailIndex - 1
                            attachIndex = ATTACHMENTS_MAX_RECEIVE
                            return self:ProcessNext() -- tail call
                        end
                    else
                        -- AH mail, check if its from faction or neutral AH
                        local factionEnglish, factionLocale = UnitFactionGroup(""player"")
                        if not strfind(sender, factionLocale) then
                            mailType = ""Neutral""..mailType
                        end
                        -- Skip AH mail types according to user options
                        if not (openAllOverride or Postal.db.profile.OpenAll[mailType]) then
                            mailIndex = mailIndex - 1
                            attachIndex = ATTACHMENTS_MAX_RECEIVE
                            return self:ProcessNext() -- tail call
                        end
                    end

                    -- Print message on next mail
                    if Postal.db.profile.OpenAll.SpamChat and attachIndex == ATTACHMENTS_MAX_RECEIVE then
                        if not invFull or msgMoney > 0 then
                            local moneyString = msgMoney > 0 and "" [""..Postal:GetMoneyString(msgMoney)..""]"" or """"
                            Postal:Print(format(""%s %d: %s%s"", ""Processing Message"", mailIndex, msgSubject or """", moneyString))
                        end
                    end

                    -- Find next attachment index backwards
                    while not GetInboxItemLink(mailIndex, attachIndex) and attachIndex > 0 do
                        attachIndex = attachIndex - 1
                    end

                    -- Check for free bag space
                    if attachIndex > 0 and not invFull and Postal.db.profile.OpenAll.KeepFreeSpace>0 then
                        local free=0
                        for bag=0,NUM_BAG_SLOTS do
                            local bagFree,bagFam = GetContainerNumFreeSlots(bag)
                            if bagFam==0 then
                                free = free + bagFree
                            end
                        end
                        if free <= Postal.db.profile.OpenAll.KeepFreeSpace then
                            invFull = true
                            Postal:Print(format(""Not taking more items as there are now only %d regular bagslots free."", free))
                        end
                    end

                    if attachIndex > 0 and not invFull then
                        -- If there's attachments, take the item
                        --Postal:Print(""Getting Item from Message ""..mailIndex.."", ""..attachIndex)
                        TakeInboxItem(mailIndex, attachIndex)

                        lastNumAttach, lastNumGold = Postal:CountItemsAndMoney()
                        wait = true
                        -- Find next attachment index backwards
                        local attachIndex2 = attachIndex - 1
                        while not GetInboxItemLink(mailIndex, attachIndex2) and attachIndex2 > 0 do
                            attachIndex2 = attachIndex2 - 1
                        end
                        if attachIndex2 == 0 and msgMoney == 0 then lastItem = true end

                        updateFrame:Show()
                    elseif msgMoney > 0 then
                        -- No attachments, but there is money
                        --Postal:Print(""Getting Gold from Message ""..mailIndex)
                        TakeInboxMoney(mailIndex)

                        lastNumAttach, lastNumGold = Postal:CountItemsAndMoney()
                        wait = true

                        updateFrame:Show()
                    else
                        -- Mail has no item or money, go to next mail
                        mailIndex = mailIndex - 1
                        attachIndex = ATTACHMENTS_MAX_RECEIVE
                        return self:ProcessNext() -- tail call
                    end

                else
                    -- Reached the end of opening all selected mail

                    -- If the numbers are different from previously
                    local numItems, totalItems = GetInboxNumItems()
                    if origNumItems ~= numItems or origTotalItems ~= totalItems then
                        -- We only want to refresh if there's more items to show
                        if (totalItems > numItems and numItems < 50) or (origTotalItems > origNumItems) then
                            Postal:Print(""Not all messages are shown, refreshing mailbox soon to continue Open All..."")
                            refreshFrame:Show()
                            return
                        end
                    end

                    if IsAddOnLoaded(""MrPlow"") then
                        if MrPlow.DoStuff then
                            MrPlow:DoStuff(""stack"")
                        elseif MrPlow.ParseInventory then -- Backwards compat
                            MrPlow:ParseInventory()
                        end
                    end
                    if skipFlag then Postal:Print(""Some Messages May Have Been Skipped."") end
                    self:Reset()
                end
            end

            function Postal_OpenAll:Reset(event)
                refreshFrame:Hide()
                updateFrame:Hide()
                self:UnregisterEvent(""UI_ERROR_MESSAGE"")
                button:SetText(""Open All"")
                Postal:DisableInbox()
                InboxFrame_Update()
                if event == ""MAIL_CLOSED"" or event == ""PLAYER_LEAVING_WORLD"" then
                    self:UnregisterEvent(""MAIL_CLOSED"")
                    self:UnregisterEvent(""PLAYER_LEAVING_WORLD"")
                end
            end

            function Postal_OpenAll:UI_ERROR_MESSAGE(event, error_message)
                if error_message == ERR_INV_FULL then
                    invFull = true
                    wait = false
                elseif error_message == ERR_ITEM_MAX_COUNT then
                    attachIndex = attachIndex - 1
                    wait = false
                end
            end

            function Postal_OpenAll.SetKeepFreeSpace(dropdownbutton, arg1)
                Postal.db.profile.OpenAll.KeepFreeSpace = arg1
            end

            function Postal_OpenAll.ModuleMenu(self, level)
                if not level then return end
                local info = self.info
                wipe(info)
                info.isNotRadio = 1
                local db = Postal.db.profile.OpenAll
            
                if level == 1 + self.levelAdjust then
                    info.hasArrow = 1
                    info.keepShownOnClick = 1
                    info.func = self.UncheckHack
                    info.notCheckable = 1

                    info.text = FACTION.."" ""..""AH-related mail""
                    info.value = ""AHMail""
                    UIDropDownMenu_AddButton(info, level)

                    info.text = FACTION_STANDING_LABEL4.."" ""..""AH-related mail""
                    info.value = ""NeutralAHMail""
                    UIDropDownMenu_AddButton(info, level)

                    info.text = ""Non-AH related mail""
                    info.value = ""NonAHMail""
                    UIDropDownMenu_AddButton(info, level)

                    info.text = ""Other options""
                    info.value = ""OtherOptions""
                    UIDropDownMenu_AddButton(info, level)

                elseif level == 2 + self.levelAdjust then

                    info.keepShownOnClick = 1
                    info.func = Postal.SaveOption
                    info.arg1 = ""OpenAll""

                    if UIDROPDOWNMENU_MENU_VALUE == ""AHMail"" then
                        info.text = ""Open all Auction cancelled mail""
                        info.arg2 = ""AHCancelled""
                        info.checked = db.AHCancelled
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Auction expired mail""
                        info.arg2 = ""AHExpired""
                        info.checked = db.AHExpired
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Outbid on mail""
                        info.arg2 = ""AHOutbid""
                        info.checked = db.AHOutbid
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Auction successful mail""
                        info.arg2 = ""AHSuccess""
                        info.checked = db.AHSuccess
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Auction won mail""
                        info.arg2 = ""AHWon""
                        info.checked = db.AHWon
                        UIDropDownMenu_AddButton(info, level)

                    elseif UIDROPDOWNMENU_MENU_VALUE == ""NeutralAHMail"" then
                        info.text = ""Open all Auction cancelled mail""
                        info.arg2 = ""NeutralAHCancelled""
                        info.checked = db.NeutralAHCancelled
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Auction expired mail""
                        info.arg2 = ""NeutralAHExpired""
                        info.checked = db.NeutralAHExpired
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Outbid on mail""
                        info.arg2 = ""NeutralAHOutbid""
                        info.checked = db.NeutralAHOutbid
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Auction successful mail""
                        info.arg2 = ""NeutralAHSuccess""
                        info.checked = db.NeutralAHSuccess
                        UIDropDownMenu_AddButton(info, level)

                        info.text = ""Open all Auction won mail""
                        info.arg2 = ""NeutralAHWon""
                        info.checked = db.NeutralAHWon
                        UIDropDownMenu_AddButton(info, level)

                    elseif UIDROPDOWNMENU_MENU_VALUE == ""NonAHMail"" then
                        info.text = ""Open all mail with attachments""
                        info.arg2 = ""Attachments""
                        info.checked = db.Attachments
                        UIDropDownMenu_AddButton(info, level)

                    elseif UIDROPDOWNMENU_MENU_VALUE == ""OtherOptions"" then
                        info.text = ""Keep free space""
                        info.hasArrow = 1
                        info.value = ""KeepFreeSpace""
                        info.func = self.UncheckHack
                        UIDropDownMenu_AddButton(info, level)
                        local listFrame = _G[""DropDownList""..level]
                        self.UncheckHack(_G[listFrame:GetName()..""Button""..listFrame.numButtons])

                        info.text = ""Verbose mode""
                        info.hasArrow = nil
                        info.value = nil
                        info.func = Postal.SaveOption
                        info.arg2 = ""SpamChat""
                        info.checked = db.SpamChat
                        UIDropDownMenu_AddButton(info, level)
                    end

                elseif level == 3 + self.levelAdjust then
                    if UIDROPDOWNMENU_MENU_VALUE == ""KeepFreeSpace"" then
                        local keepFree = db.KeepFreeSpace
                        info.func = Postal_OpenAll.SetKeepFreeSpace
                        info.isNotRadio = nil
                        for _, v in ipairs(Postal.keepFreeOptions) do
                            info.text = v
                            info.checked = v == keepFree
                            info.arg1 = v
                            UIDropDownMenu_AddButton(info, level)
                        end
                    end
                end
            end
		
            ScriptErrorsFrameClose:Show()
		
            end

            ");

        Lua.LuaDoString("if ScriptErrorsFrameClose:IsShown() then ScriptErrorsFrameClose:Click() end");
    }


    private void NameChangeScripts()
    {
        MyRealName = Lua.LuaDoString<string>(@"

        local PN = GetUnitName('player') -- original player name
        local NN = 'Unknown' -- custom player name
        local NPN = 'Unknown' -- custom pet name

        if not NCS then
				   
            local NSC = CreateFrame('FRAME','NCS')
            DEFAULT_CHAT_FRAME:AddMessage('[UP log]: Name change scripts loaded', 0.0, 1.0, 0.7)
					   
            -- info/stats menu
            CharacterFrame:SetScript('OnShow',function()
            CharacterNameText:SetText(NN)
            SetPortraitTexture(CharacterFramePortrait, 'player')
            --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: character frame name change')
            end)
					   
            -- player
            local PFNC = CreateFrame('Frame','PlayerFrameNameChange')
            local function ChangePlayerName(self)
            if PlayerFrame.name:GetText() == PN then
                PlayerFrame.name:SetText(NN)
                --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: PlayerFrame.name:SetText(NN)')
                end
            end
            PFNC:SetScript('OnUpdate',ChangePlayerName)
					   
            -- target
            local TFNC = CreateFrame('Frame','TargetFrameNameChange')
            local function ChangeTargetName(self)
                if TargetFrame.name:GetText() == PN then
                    TargetFrame.name:SetText(NN)
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: TargetFrame.name:SetText(NN)')
                end
            end
            TFNC:SetScript('OnUpdate',ChangeTargetName)
					   
            -- target of target
            local TFTNC = CreateFrame('Frame','TargetFrameTargetNameChange')
            local function ChangeTargetofTargetName(self)
                if TargetFrameToT.name:GetText() == PN then
                    TargetFrameToT.name:SetText(NN)
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: TargetFrameToT.name:SetText(NN)')
                end
            end
            TFTNC:SetScript('OnUpdate',ChangeTargetofTargetName)
					   
            -- focus
            local FFNC = CreateFrame('Frame','FocusFrameNameChange')
            local function ChangeFocusName(self)
                if FocusFrame.name:GetText() == PN then
                    FocusFrame.name:SetText(NN)
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: FocusFrame.name:SetText(NN)')
                end
            end
            FFNC:SetScript('OnUpdate',ChangeFocusName)
					   
            -- focus target
            local FFTNC = CreateFrame('Frame','FocusFrameTargetNameChange')
            local function ChangeFocusTargetName(self)
                if FocusFrameToT.name:GetText() == PN then
                    FocusFrameToT.name:SetText(NN)
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: FocusFrameToT.name:SetText(NN)')
                end
            end
            FFTNC:SetScript('OnUpdate',ChangeFocusTargetName)
					   
            -- tooltip
            local TLTP = CreateFrame('Frame','TooltipFrameChange')
            local function ChangeToolip(self)
                if (GameTooltipTextLeft1:IsShown() and string.find(GameTooltipTextLeft1:GetText(),''..PN..'')) then 
                    GameTooltipTextLeft1:SetText(NN)
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: GameTooltipTextLeft1 SetFormattedText NN')
                end
                if GameTooltipTextLeft1:GetText() == GetUnitName('pet') then GameTooltipTextLeft1:SetText(NPN) end
                if (GameTooltipTextLeft2:IsShown() and string.find(GameTooltipTextLeft2:GetText(),''..PN..'')) then
                    if string.find(GameTooltipTextLeft2:GetText(),'Construct') then GameTooltipTextLeft2:SetText('<'..NN..'-s Construct>') end
                    if string.find(GameTooltipTextLeft2:GetText(),'Minion') then GameTooltipTextLeft2:SetText('<'..NN..'-s Minion>') end
                    if string.find(GameTooltipTextLeft2:GetText(),'Totem') then GameTooltipTextLeft2:SetText('<'..NN..'-s Totem>') end
                    if string.find(GameTooltipTextLeft2:GetText(),'Companion') then GameTooltipTextLeft2:SetText('<'..NN..'-s Companion>') end
                    if string.find(GameTooltipTextLeft2:GetText(),'Guardian') then GameTooltipTextLeft2:SetText('<'..NN..'-s Guardian>') end
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: GameTooltipTextLeft2 SetFormattedText NPN')
                end
            end
            TLTP:SetScript('OnUpdate',ChangeToolip)
					   
            -- bg/arena score (иногда зависает/фризит при показе статистики - нужна доработка)
            local GBS=GetBattlefieldScore
            GetBattlefieldScore = function(i)
                local name, killingBlows, honorableKills, deaths, honorGained, MyFaction, race, class, classToken, damageDone, healingDone, bgRating, ratingChange, preMatchMMR, mmrChange, talentSpec = GBS(i)
                if name == PN then
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: GetBattlefieldScore name change')
                    return NN, killingBlows, honorableKills, deaths, honorGained, MyFaction, race, class, classToken, damageDone, healingDone, bgRating, ratingChange, preMatchMMR, mmrChange, talentSpec
                else
                    return GBS(i)
                end
            end
					   
            -- guild
            local GGRI=GetGuildRosterInfo
            GetGuildRosterInfo = function(i)
                local name, rank, ranki, level, class, zone, note, officernote, online, status, classFileName = GGRI(i)
                if name == PN then
                    --DEFAULT_CHAT_FRAME:AddMessage('[NCSv2 debug]: guild name change')
                    return NN, rank, ranki, level, class, zone, note, officernote, online, status, classFileName
                else
                    return GGRI(i)
                end
            end
        end
        return NN
    ");

    }

    private void PauseButtonCheck()
    {
        if (DateTime.Now > PauseButtonCheckPulse)
        {

            //print("pause button frame check");

            PauseButtonCheckPulse = DateTime.Now.AddSeconds(2);

            CreateAllFrames();
            sleep(10);

            if (Lua.LuaDoString<bool>("if " + PauseButtonFrameName + " then return true end"))
            {
                // если бот не в паузе и галка вкл => вкл паузу //
                if (!Products.InPause && Lua.LuaDoString<bool>("if " + PauseButtonFrameName + " then if " + PauseButtonFrameName + ":GetChecked() == 1 then return true end end"))
                {
                    FramesUpdatePulse = DateTime.Now.AddSeconds(2);
                    runlua("" + PauseButtonFrameName + "Text:SetText('P ON')");
                    logs("[PauseButtonCheck] если не в паузе и стоит галка => вкл паузу");
                    print("[PauseButtonCheck] если не в паузе и стоит галка => вкл паузу");
                    PauseOn();
                }

                // если бот в паузе и не стоит галка => выкл паузу //
                if (Products.InPause && !Lua.LuaDoString<bool>("if " + PauseButtonFrameName + " then if " + PauseButtonFrameName + ":GetChecked() == 1 then return true end end"))
                {
                    runlua("" + PauseButtonFrameName + "Text:SetText('P OFF')");
                    logs("[PauseButtonCheck] если в паузе и не стоит галка => выкл паузу");
                    print("[PauseButtonCheck] если в паузе и не стоит галка => выкл паузу");
                    PauseOff();
                }
            }

        }
    }

    public void GreyNodeBlacklist()
    {
        ObjectManager.GetObjectWoWGameObject().ForEach(o =>
        {
            if (MiningRequirementsMax.ContainsKey(o.Name) && MiningRequirementsMax[o.Name] < CurrentMining && !Setting.BlackListHarvestByName.Contains(o.Name))
            {
                logs("[GreyNodeBlacklist] Blacklisting " + o.Name + " because required skill " + MiningRequirementsMax[o.Name] + " is lower than current skill " + CurrentMining);
                print("[GreyNodeBlacklist] Blacklisting " + o.Name + " because required skill " + MiningRequirementsMax[o.Name] + " is lower than current skill " + CurrentMining + "");
                Setting.BlackListHarvestByName.Add(o.Name);
            }

            else if (MiningRequirementsMax.ContainsKey(o.Name) && MiningRequirementsMax[o.Name] >= CurrentMining && Setting.BlackListHarvestByName.Contains(o.Name))
            {
                logs("[GreyNodeBlacklist] Removing " + o.Name + " from blacklist because required skill " + MiningRequirementsMax[o.Name] + " is higher than current skill " + CurrentMining);
                print("[GreyNodeBlacklist] Removing " + o.Name + " from blacklist because required skill " + MiningRequirementsMax[o.Name] + " is higher than current skill " + CurrentMining + "");
                Setting.BlackListHarvestByName.Remove(o.Name);
            }

            if (HerbsRequirementsMax.ContainsKey(o.Name) && HerbsRequirementsMax[o.Name] < CurrentHerbalism && !Setting.BlackListHarvestByName.Contains(o.Name))
            {
                logs("[GreyNodeBlacklist] Blacklisting " + o.Name + " because required skill " + HerbsRequirementsMax[o.Name] + " is lower than current skill " + CurrentHerbalism);
                print("[GreyNodeBlacklist] Blacklisting " + o.Name + " because required skill " + HerbsRequirementsMax[o.Name] + " is lower than current skill " + CurrentHerbalism + "");
                Setting.BlackListHarvestByName.Add(o.Name);
            }
           /* foreach(var p in wManager.wManagerSetting.CurrentSetting.BlackListHarvestByName)
            {
                Logging.Write(p);
            }*/
            else if (HerbsRequirementsMax.ContainsKey(o.Name) && HerbsRequirementsMax[o.Name] >= CurrentHerbalism && Setting.BlackListHarvestByName.Contains(o.Name))
            {
                logs("[GreyNodeBlacklist] Removing " + o.Name + " from blacklist because required skill " + HerbsRequirementsMax[o.Name] + " is higher than current skill " + CurrentHerbalism);
                print("[GreyNodeBlacklist] Removing " + o.Name + " from blacklist because required skill " + HerbsRequirementsMax[o.Name] + " is higher than current skill " + CurrentHerbalism + "");
                Setting.BlackListHarvestByName.Remove(o.Name);
            }
        });
    }

    private void SetMiningSkill()
    {
        CurrentMining = Lua.LuaDoString<int>(@"
            miningSkill = 1;
            for i = 1, GetNumSkillLines() do
		        local skillName, isHeader, isExpanded, skillRank, numTempPoints, skillModifier = GetSkillLineInfo(i)
		        if isHeader and not isExpanded then
			        ExpandSkillHeader(i);
                end
            end
	        for i = 1, GetNumSkillLines() do
		        local skillName, isHeader, isExpanded, skillRank, numTempPoints, skillModifier = GetSkillLineInfo(i)
		        if not isHeader and skillName == ""Mining"" then
			        miningSkill = skillRank
		        end
	        end
            ", "miningSkill");
    }

    private void SetHerbalismSkill()
    {
        CurrentHerbalism = Lua.LuaDoString<int>(@"
            HerbSkill = 1;
            for i = 1, GetNumSkillLines() do
		        local skillName, isHeader, isExpanded, skillRank, numTempPoints, skillModifier = GetSkillLineInfo(i)
		        if isHeader and not isExpanded then
			        ExpandSkillHeader(i);
                end
            end
	        for i = 1, GetNumSkillLines() do
		        local skillName, isHeader, isExpanded, skillRank, numTempPoints, skillModifier = GetSkillLineInfo(i)
		        if not isHeader and skillName == ""Herbalism"" then
			        HerbSkill = skillRank
		        end
	        end
            ", "HerbSkill");
    }

    // грубые эмоции на кил игрока //
    private void RandomEmoteOnHonorKill()
    {
        int emotion = rnd(1, 76);

        if (emotion == 1)
            runlua("DoEmote('rofl')");
        if (emotion == 2)
            runlua("DoEmote('guffaw')");
        if (emotion == 3)
            runlua("DoEmote('laugh')");
        if (emotion == 4)
            runlua("DoEmote('hug')");
        if (emotion == 5)
            runlua("DoEmote('pulse')");
        if (emotion == 6)
            runlua("DoEmote('cry')");
        if (emotion == 7)
            runlua("DoEmote('spit')");
        if (emotion == 8)
            runlua("DoEmote('mourn')");
        if (emotion == 9)
            runlua("DoEmote('gloat')");
        if (emotion == 10)
            runlua("DoEmote('stink')");
        if (emotion == 11)
            runlua("DoEmote('scoff')");
        if (emotion == 12)
            runlua("DoEmote('soothe')");
        if (emotion == 13)
            runlua("DoEmote('mock')");
        if (emotion == 14)
            runlua("DoEmote('flex')");
        if (emotion == 15)
            runlua("DoEmote('bye')");
        if (emotion == 16)
            runlua("DoEmote('clap')");
        if (emotion == 17)
            runlua("DoEmote('applaud')");
        if (emotion == 18)
            runlua("DoEmote('cackle')"); // Вы громко расхохотались. Вы глупо хохочете над < целью эмоции WOW>.
        if (emotion == 19)
            runlua("DoEmote('snicker')");
        if (emotion == 20)
            runlua("DoEmote('giggle')"); // Вы хихикаете. Вы хихикаете при виде < цель wow эмоции>.
        if (emotion == 21)
            runlua("DoEmote('violin')");
        if (emotion == 22)
            runlua("DoEmote('cheer')"); // Вы очень рады! Вы радуетесь успехам < цель wow эмоции>.
        if (emotion == 23)
            runlua("DoEmote('roar')");
        if (emotion == 24)
            runlua("DoEmote('sigh')");
        if (emotion == 25)
            runlua("DoEmote('puzzle')"); // быть озадаченным поведением 
        if (emotion == 26 || emotion == 71 || emotion == 72 || emotion == 73)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("5 4 Ч Я Ч 4 0 Р Ч", ChatTypeId.SAY); // ALIKI LOHI
            else if (MyFaction == "A")
                Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY); // ORDA SOSET
        }
        if (emotion == 27)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("UO UO", ChatTypeId.SAY); // HA HA
            else if (MyFaction == "A")
                Chat.SendChatMessage("D a p Ee bb", ChatTypeId.SAY); // You Lose
        }
        if (emotion == 28)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("F J F D 125 3", ChatTypeId.SAY); // ANAL KILL
            else if (MyFaction == "A")
                Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY);
        }
        if (emotion == 29)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("UO UO AGOL", ChatTypeId.SAY); // HA HA DOGG
            else if (MyFaction == "A")
                Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY);
        }
        if (emotion == 30)
            Chat.SendChatMessage("мусор", ChatTypeId.SAY);
        if (emotion == 31)
            Chat.SendChatMessage("помойка", ChatTypeId.SAY);
        if (emotion == 32)
            Chat.SendChatMessage("очередняра", ChatTypeId.SAY);
        if (emotion == 33)
            Chat.SendChatMessage("азазазаза", ChatTypeId.SAY);
        if (emotion == 34)
            Chat.SendChatMessage("как дела?", ChatTypeId.SAY);
        if (emotion == 35)
            Chat.SendChatMessage("фу бомж", ChatTypeId.SAY);
        if (emotion == 36)
            Chat.SendChatMessage("изи нуб", ChatTypeId.SAY);
        if (emotion == 37)
            Chat.SendChatMessage("мусор", ChatTypeId.SAY);
        if (emotion == 38)
            Chat.SendChatMessage("слабенький", ChatTypeId.SAY);
        if (emotion == 39)
            Chat.SendChatMessage("сосать", ChatTypeId.SAY);
        if (emotion == 40)
            Chat.SendChatMessage("лол", ChatTypeId.SAY);
        if (emotion == 41)
            Chat.SendChatMessage("ору", ChatTypeId.SAY);
        if (emotion == 42)
            Chat.SendChatMessage("изи лалка", ChatTypeId.SAY);
        if (emotion == 43)
            Chat.SendChatMessage("изи", ChatTypeId.SAY);
        if (emotion == 44)
            Chat.SendChatMessage("вынос мусора", ChatTypeId.SAY);
        if (emotion == 45)
            Chat.SendChatMessage("ахахах", ChatTypeId.SAY);
        if (emotion == 46)
            Chat.SendChatMessage("изи хонор", ChatTypeId.SAY);
        if (emotion == 47)
            Chat.SendChatMessage("лашок", ChatTypeId.SAY);
        if (emotion == 48)
            Chat.SendChatMessage("клоун", ChatTypeId.SAY);
        if (emotion == 49)
            Chat.SendChatMessage("лалита", ChatTypeId.SAY);
        if (emotion == 50)
            Chat.SendChatMessage("соска", ChatTypeId.SAY);
        if (emotion == 51)
            Chat.SendChatMessage("ку", ChatTypeId.SAY);
        if (emotion == 52)
            Chat.SendChatMessage("слабак", ChatTypeId.SAY);
        if (emotion == 53)
            Chat.SendChatMessage("хаха", ChatTypeId.SAY);
        if (emotion == 54)
            Chat.SendChatMessage("ну шо", ChatTypeId.SAY);
        if (emotion == 55)
            Chat.SendChatMessage("оч слабый", ChatTypeId.SAY);
        if (emotion == 56)
            Chat.SendChatMessage("лежать+сосать", ChatTypeId.SAY);
        if (emotion == 57)
            Chat.SendChatMessage("ИЗИ", ChatTypeId.SAY);
        if (emotion == 58)
            Chat.SendChatMessage("изейший", ChatTypeId.SAY);
        if (emotion == 59)
            Chat.SendChatMessage("в помойку", ChatTypeId.SAY);
        if (emotion == 60)
            Chat.SendChatMessage("бедолага", ChatTypeId.SAY);
        if (emotion == 61)
            Chat.SendChatMessage("чепуха", ChatTypeId.SAY);
        if (emotion == 62)
            Chat.SendChatMessage("изи чма", ChatTypeId.SAY);
        if (emotion == 63)
            Chat.SendChatMessage("изи чепуха", ChatTypeId.SAY);
        if (emotion == 64)
            Chat.SendChatMessage("оч слабенький", ChatTypeId.SAY);
        if (emotion == 65)
            Chat.SendChatMessage("изи мусор", ChatTypeId.SAY);
        if (emotion == 66)
            Chat.SendChatMessage("нищета", ChatTypeId.SAY);
        if (emotion == 67)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("7 0 7", ChatTypeId.SAY); // L O L
            else if (MyFaction == "A")
                Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY);
        }
        if (emotion == 68)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("125 3", ChatTypeId.SAY); // KILL
            else if (MyFaction == "A")
                Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY);
        }
        if (emotion == 69 || emotion == 70 || emotion == 74 || emotion == 75)
        {
            if (MyFaction == "H")
                Chat.SendChatMessage("5 4 Ч Я Ч 4 0 Р Ч", ChatTypeId.YELL); // ALIKI LOHI
            else if (MyFaction == "A")
                Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.YELL); // ORDA SOSET
        }

        print("[RandomEmoteOnHonorKill] рандом грубая эмоция/высер на кил игрока");
        logs("[RandomEmoteOnHonorKill] рандом грубая эмоция/высер на кил игрока");
    }

    // эмоции на хейтеров //
    private void RandomEmoteOnHater()
    {
        int emotion = rnd(1, 28);
        int chance = rnd(1, 3);

        if (chance == 2)
        {
            if (emotion == 1)
                runlua("DoEmote('rofl')");
            if (emotion == 2)
                runlua("DoEmote('guffaw')");
            if (emotion == 3)
                runlua("DoEmote('laugh')");
            if (emotion == 4)
                runlua("DoEmote('rude')");
            if (emotion == 6)
                runlua("DoEmote('spit')");
            if (emotion == 7)
                runlua("DoEmote('stink')");
            if (emotion == 8)
                runlua("DoEmote('scoff')"); // насмехается на вами
            if (emotion == 9)
                runlua("DoEmote('no')");
            if (emotion == 10)
                runlua("DoEmote('facepalm')");
            if (emotion == 11)
                runlua("DoEmote('roar')");
            if (emotion == 13)
                runlua("DoEmote('shoo')");
            if (emotion == 14)
                runlua("DoEmote('taunt')");
            if (emotion == 15)
                runlua("DoEmote('sigh')");
            if (emotion == 16)
                runlua("DoEmote('wait')");
            if (emotion == 17)
                runlua("DoEmote('curious')");
            if (emotion == 18)
                runlua("DoEmote('angry')"); // в гневе замахнуться кулаком 
            if (emotion == 19)
                runlua("DoEmote('chicken')");
            if (emotion == 20)
                runlua("DoEmote('sigh')");
            if (emotion == 21)
                runlua("DoEmote('threaten')"); // пророчить кару
            if (emotion == 22)
                runlua("DoEmote('ponder')"); // обдумывает ваши действия
            if (emotion == 23)
                runlua("DoEmote('snicker')");
            if (emotion == 24)
            {
                if (MyFaction == "H")
                    Chat.SendChatMessage("5 4 Ч Я Ч 4 0 Р Ч", ChatTypeId.SAY); // ALIKI LOHI
                else if (MyFaction == "A")
                    Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY); // ORDA SOSET
            }
            if (emotion == 25)
            {
                if (MyFaction == "H")
                    Chat.SendChatMessage("UO UO AGOL", ChatTypeId.SAY); // HA HA DOGG
                else if (MyFaction == "A")
                    Chat.SendChatMessage("1 Э РР Й 1 Й 2 У", ChatTypeId.SAY); // ORDA SOSET
            }
            if (emotion == 26)
                runlua("DoEmote('badfeeling')");
            if (emotion == 27)
                runlua("DoEmote('mock')");

            print("[RandomEmoteOnHater] рандом грубая эмоция на хейтера");
            logs("[RandomEmoteOnHater] рандом грубая эмоция на хейтера");
        }
    }

    private void CtmOnFlyMount()
    {
        float xvector = (me.Position.X) - (tar().Position.X);
        float yvector = (me.Position.Y) - (tar().Position.Y);
        float p = rnd(100, 500);
        float q = rnd(100, 500);

        Vector3 newpos = new Vector3()
        {
            X = me.Position.X + (float)((xvector * (p / tar().GetDistance) - xvector)),
            Y = me.Position.Y + (float)((yvector * (q / tar().GetDistance) - yvector)),
            Z = me.Position.Z
        };

        if (tar().IsValid && !TraceLine.TraceLineGo(new Vector3(newpos.X, newpos.Y, newpos.Z)))
        {
            logs("[CtmOnFlyMount]");
            print("[CtmOnFlyMount]");
            ClickToMove.CGPlayer_C__ClickToMove(newpos.X, newpos.Y, newpos.Z, 0, (int)ClickToMoveType.Move, 0.5f);
            sleep(500);

            while (me.GetMove && MeIsOnFlyMount())
            {
                if (Conditions.InGameAndConnected)
                {
                    logs("[CtmOnFlyMount] ждем в полете (нужно проверить)");
                    print("[CtmOnFlyMount] ждем в полете (нужно проверить)");
                    sleep(5000);
                }
                if (!Conditions.InGameAndConnected)
                {
                    PauseOff();
                    logs("[CtmOnFlyMount] выход из цикла, запаузился в меню");
                    break;
                }
            }

            while (NearestPlayer().IsValid || me.GetMove)
            {
                if (Conditions.InGameAndConnected)
                {
                    var rndtime = rnd(100000, 200000);
                    print("[CtmOnFlyMount] пауза вкл, ждем если враг не свалил " + rndtime + " мс");
                    logs("[CtmOnFlyMount] пауза вкл, ждем если враг не свалил " + rndtime + " мс");
                    PauseOn();
                    sleep(rndtime);
                    PauseOff();
                }

                if (!Conditions.InGameAndConnected)
                {
                    PauseOff();
                    logs("[CtmOnFlyMount] выход из цикла, запаузился в меню");
                    break;
                }
            }
        }
    }
    /*private int GetEquippedItemCooldonwn(int )
    {
        return Lua.LuaDoString<int>("if GetInventoryItemID('player', 8) ~= nil then start, duration, enable = GetItemCooldown(GetInventoryItemID('player', 8)) return duration end");
    }*/
    private void RunFromTargetClickToMove()
    {
        float xvector = (me.Position.X) - (tar().Position.X);
        float yvector = (me.Position.Y) - (tar().Position.Y);
        float p = rnd(50, 100);
        float q = rnd(50, 100);

        Vector3 newpos = new Vector3()
        {
            X = me.Position.X + (float)((xvector * (p / tar().GetDistance) - xvector)),
            Y = me.Position.Y + (float)((yvector * (q / tar().GetDistance) - yvector)),
            Z = me.Position.Z
        };

        MaximizeWowWindow();
        SendDiscordMessageDebug2("[" + Time() + "] [" + MyRealName + "]: RunFromTargetClickToMove активирован проверить");

        for (int i = 0; i < rnd(5, 20) && Conditions.InGameAndConnectedAndAliveAndProductStarted; i++)
        {
            if (me.InCombat)
            {
                if (tar().IsValid && !TraceLine.TraceLineGo(new Vector3(newpos.X, newpos.Y, newpos.Z)))
                {
                    logs("[RunFromTargetClickToMove] цикл активирован");
                    print("[RunFromTargetClickToMove] цикл активирован");
                    ClickToMove.CGPlayer_C__ClickToMove(newpos.X, newpos.Y, newpos.Z, 0, (int)ClickToMoveType.Move, 0);
                    sleep(200);
                    while (Conditions.InGameAndConnectedAndAliveAndProductStarted && me.GetMove)
                    {
                        sleep(rnd(300, 1500));
                        if (rnd(1, 5) == 4)
                        {
                            logs("[RunFromTargetClickToMove] рандом прыжок (25%)");
                            print("[RunFromTargetClickToMove] рандом прыжок (25%)");
                            if (HaveNitro && Lua.LuaDoString<int>("if GetInventoryItemID('player', 8) ~= nil then start, duration, enable = GetItemCooldown(GetInventoryItemID('player', 8)) return duration end") == 0)
                            {
                                runlua("RunMacroText('/use 8')");
                                logs("[RunFromTargetClickToMove] заюзали нитро");
                                print("[RunFromTargetClickToMove] заюзали нитро");
                                SendDiscordMessageDebug2("[" + Time() + "] [" + MyRealName + "]: заюзали нитро");
                                MaximizeWowWindow();
                            }
                            Move.JumpOrAscend();
                        }
                    }
                }

                if (tar().IsValid && TraceLine.TraceLineGo(new Vector3(newpos.X, newpos.Y, newpos.Z)))
                {
                    logs("[RunFromTargetClickToMove] убегаем, фейл, плохая линия");
                    print("[RunFromTargetClickToMove] убегаем, фейл, плохая линия");
                }

                if (!tar().IsValid)
                {
                    logs("[RunFromTargetClickToMove] убегаем, нет цели берем кого-нить в цель");
                    print("[RunFromTargetClickToMove] убегаем, нет цели берем кого-нить в цель");
                    sleep(rnd(200, 2000));
                    TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer();
                }

                if (!tar().IsValid)
                {
                    logs("[RunFromTargetClickToMove] убегаем, все равно нет цели, выход из цикла");
                    print("[RunFromTargetClickToMove] убегаем, все равно нет цели, выход из цикла");
                    break;
                }
            }

            if (!me.InCombat && tar().IsValid && tar().GetDistance >= 100)
            {
                logs("[RunFromTargetClickToMove] убегаем, не в бою и цель дальше 100, стопаем убегание, выход из цикла");
                print("[RunFromTargetClickToMove] убегаем, не в бою и цель дальше 100, стопаем убегание, выход из цикла");
                MovementManager.StopMove();
                break;
            }

            if (!me.InCombat && !tar().IsValid)
            {
                logs("[RunFromTargetClickToMove] убегаем, не в бою и нет цели, стопаем убегание, выход из цикла");
                print("[RunFromTargetClickToMove] убегаем, не в бою и нет цели, стопаем убегание, выход из цикла");
                sleep(rnd(200, 2000) + latency);
                MovementManager.StopMove();
                break;
            }

            if (!me.IsDead)
            {
                logs("[RunFromTargetClickToMove] погиб убегая - выход из цикла");
                print("[RunFromTargetClickToMove] погиб убегая - выход из цикла");
                MovementManager.StopMove();
                break;
            }

            sleep(500);
        }

        if (Setting.FlyingMountName != "" && Setting.UseFlyingMount && Usefuls.IsFlyableArea && ObjectManager.Me.IsOutdoors)
        {
            while (Conditions.InGameAndConnectedAndProductStarted)
            {
                //robotManager.Helpful.Var.SetVar("dbgOutput", );
                if (me.IsDead)
                {
                    logs("[RunFromTargetClickToMove] погиб - выход из цикла");
                    print("[RunFromTargetClickToMove] погиб - выход из цикла");
                    break;
                }

                if (me.GetMove && !me.InCombat)
                {
                    logs("[RunFromTargetClickToMove] стопмув для каста маунта");
                    print("[RunFromTargetClickToMove] стопмув для каста маунта");
                    MovementManager.StopMove();
                }

                if (!me.GetMove && !me.InCombat && !MeIsOnFlyMount() && ObjectManager.Me.IsOutdoors)
                {
                    logs("[RunFromTargetClickToMove] каст маунта (флаймаунт вкл: " + Setting.UseFlyingMount + ", название: " + Setting.FlyingMountName + ")");
                    print("[RunFromTargetClickToMove] каст маунта (флаймаунт вкл: " + Setting.UseFlyingMount + ", название: " + Setting.FlyingMountName + ")");
                    SpellManager.CastSpellByNameLUA(Setting.FlyingMountName);
                    sleep(rnd(1500, 2000) + latency);
                }

                if (!MeIsOnFlyMount() && !me.IsDead)
                {
                    logs("[RunFromTargetClickToMove] не смогли кастануть маунта, шаг назад и RunFromTargetClickToMove повтор");
                    print("[RunFromTargetClickToMove] не смогли кастануть маунта, шаг назад и RunFromTargetClickToMove повтор");
                    Move.Backward(Move.MoveAction.PressKey, rnd(300, 1500));
                    RunFromTargetClickToMove();
                }

                if (MeIsOnFlyMount() && !me.IsFlying)
                {
                    var rnd1 = rnd(1500, 3333);
                    print("[RunFromTargetClickToMove] мы на маунте, взлет " + rnd1 + "мс");
                    logs("[RunFromTargetClickToMove] мы на маунте, взлет " + rnd1 + "мс");
                    Move.JumpOrAscend(Move.MoveAction.PressKey, rnd1);
                }

                CtmOnFlyMount();

                if (me.InCombat && !MeIsOnFlyMount())
                {
                    logs("[RunFromTargetClickToMove] в бою - выход из цикла");
                    print("[RunFromTargetClickToMove] в бою - выход из цикла");
                    break;
                }

                if (!tar().IsValid)
                {
                    logs("[RunFromTargetClickToMove] нет цели - выход из цикла");
                    print("[RunFromTargetClickToMove] нет цели - выход из цикла");
                    break;
                }

                if (!Usefuls.IsFlyableArea || !ObjectManager.Me.IsOutdoors)
                {
                    logs("[RunFromTargetClickToMove] нелетная зона - выход из цикла");
                    print("[RunFromTargetClickToMove] нелетная зона - выход из цикла");
                    break;
                }

                sleep(500);
            }
        }
    }

    private void PauseOn()
    {
        while (!Products.InPause)
        {
            if (Conditions.InGameAndConnected)
            {
                CreateAllFrames();
                sleep(10);
                runlua("if " + PauseButtonFrameName + " then " + PauseButtonFrameName + ":SetChecked(true) " + PauseButtonFrameName + "Text:SetText('P ON') end if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Hide() end");
                print("PauseOn()");
            }
            logs("PauseOn()");
            Products.InPause = true;
            sleep(1000);
        }
    }

    private void PauseOff()
    {
        while (Products.InPause)
        {
            if (Conditions.InGameAndConnected)
            {
                CreateAllFrames();
                sleep(10);
                runlua("if " + PauseButtonFrameName + " then " + PauseButtonFrameName + ":SetChecked(false) " + PauseButtonFrameName + "Text:SetText('P OFF') end if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() end");
                print("PauseOff()");
            }
            logs("PauseOff()");
            Products.InPause = false;
            sleep(1000);
        }
    }

    private void JoinBG()
    {
        string textbg = Lua.LuaDoString<string>("return StaticPopup1Text:GetText()");
        if (myitemlevel >= 200 && Battleground.GetNumberActiveQueue() == 0 && !textbg.Contains("Battleground") && !Battleground.IsInBattleground() && !me.HaveBuff("Deserter") && !MeIsInCityOrNearToCityOrSanctuary())
        {
            Battleground.JointBattleGroundQueue(BattleGroundID.RandomBattleground);
            print("регистрация на бг");
            logs("регистрация на бг");
            sleep(2000);
        }
    }

    private void AcceptBG()
    {
        // accept bg //
        if (myitemlevel >= 200 && Lua.LuaDoString<bool>("if (StaticPopup1:IsShown() and string.find(StaticPopup1Text:GetText(),'You are now eligible to enter Random Battleground')) or (StaticPopup2:IsShown() and string.find(StaticPopup2Text:GetText(),'You are now eligible to enter Random Battleground')) then return true end") && !Battleground.IsInBattleground())
        {
            SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: жмем вход на бг; инфо: [" + ProfileName() + "] [" + RealmShortName + "] " + Mapzone() + ", " + Subzone() + ", " + Continent() + "");

            sleep(100);

            if (Fight.InFight && me.InCombat && tar().IsAttackable)
            {
                print("стопаем атаку паузой и пета для входа на бг");
                logs(" стопаем атаку паузой и пета для входа на бг");
                if (ObjectManager.Pet.IsAlive && ObjectManager.Pet.IsValid)
                    runlua("PetPassiveMode()");
                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "]: стопаем атаку паузой и пета для входа на бг");
                PauseOn();
                sleep(1000);
                me.Target = me.Guid;
                sleep(1000);
            }

            //runlua("if StaticPopup1:IsShown() then StaticPopup1Button1:Click() end if StaticPopup2:IsShown() then StaticPopup2Button1:Click() end"); // lug bg reg
            Battleground.AcceptBattlefieldPortAll();
            print("оф паузы, в бою, уже нажали вход на бг");
            logs("оф паузы, в бою, уже нажали вход на бг");
            PauseOff();
            sleep(5000);
            if (ObjectManager.Pet.IsAlive && ObjectManager.Pet.IsValid)
                runlua("PetDefensiveMode()");

            if (Battleground.IsInBattleground())
            {
                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] мы на бг, успешно спаслись от хейтеров; инфо: [" + ProfileName() + "] [" + RealmShortName + "] " + Mapzone() + ", " + Subzone() + ", " + Continent() + "");
                logs("pause on: мы на бг, стоим 2 минуты в паузе");
                print("pause on: мы на бг, стоим 2 минуты в паузе");
                PauseOn();
                sleep(120000);
                PauseOff();
                logs("pause off: мы на бг, стоим 2 минуты в паузе");
                print("pause off: мы на бг, стоим 2 минуты в паузе");
            }
        }
    }

    private void TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer()
    {
        logs("[TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer] Target last target or nearest enemy player or nearest player");
        print("[TargetNearestEnemyPlayerIfNotEnemyPlayerNearTargetFriendlyPlayer] Target last target or nearest enemy player or nearest player");
        if (!tar().IsValid)
        {
            sleep(100);
            runlua("TargetLastTarget()");
        }
        sleep(100);
        if (!tar().IsValid)
        {
            sleep(100);
            runlua("TargetNearestEnemyPlayer()");
        }
        sleep(100);
        if (!tar().IsValid)
        {
            sleep(100);
            runlua("TargetNearestEnemy()");
        }
        sleep(100);
        if (!tar().IsValid)
        {
            sleep(100);
            runlua("TargetNearestFriendPlayer()");
        }
        sleep(100);
        if (!tar().IsValid && GetPlayerThatTargetMe().IsValid && GetPlayerThatTargetMe().GetDistance < 30 && !TraceLine.TraceLineGo(GetPlayerThatTargetMe().Position))
        {
            sleep(100);
            runlua("RunMacroText('/target " + GetPlayerThatTargetMe().Name + "')");
        }
    }

    private WoWUnit tar()
    {
        return ObjectManager.Target;
    }

    private int Step()
    {
        return Quest.QuesterCurrentContext.CurrentStep;
    }

    private string Mapzone()
    {
        return Usefuls.MapZoneName;
    }

    private string Subzone()
    {
        return Usefuls.SubMapZoneName.Replace("'", "");
    }

    private string Continent()
    {
        return Usefuls.ContinentNameMpq;
    }

    private string ProfileName()
    {
        return wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;
    }

    private string MyPosXYZ()
    {
        string MyPosXYZ = "" + (int)me.Position.X + ", " + (int)me.Position.Y + ", " + (int)me.Position.Z + "";
        return MyPosXYZ;
    }

    private bool IsMiningHerbalismUpProfileName()
    {
        return (Products.ProductName == "Quester" && (ProfileName() == "gatherer_ali.xml" || ProfileName() == "gatherer_horde.xml"));
    }

    private bool IsHonorFarmProfileName()
    {
        return (Products.ProductName == "Quester" && (ProfileName() == "AllianceHonorFarmWestfalButcher.xml" || ProfileName() == "AllianceHonorFarmWestfalMeat.xml"));
    }

    private bool TargetIsMeleeClass()
    {
        return ((tar().WowClass == WoWClass.Warrior || tar().WowClass == WoWClass.Paladin || tar().WowClass == WoWClass.DeathKnight || (tar().WowClass == WoWClass.Shaman && tar().BuffCastedByAll("Unleashed Rage").Contains(tar().Guid)) || tar().WowClass == WoWClass.Rogue || (tar().WowClass == WoWClass.Druid && tar().BuffCastedByAll("Leader of the Pack").Contains(tar().Guid))));
    }

    private bool TargetIsRangeClass()
    {
        return ((tar().WowClass == WoWClass.Mage || tar().WowClass == WoWClass.Warlock || tar().WowClass == WoWClass.Priest || (tar().WowClass == WoWClass.Shaman && tar().BuffCastedByAll("Elemental Oath").Contains(tar().Guid)) || tar().WowClass == WoWClass.Hunter || (tar().WowClass == WoWClass.Druid && tar().BuffCastedByAll("Moonkin Aura").Contains(tar().Guid))));
    }

    private bool IsDungeonProfile()
    {
        return (Products.ProductName == "Quester" && (ProfileName().Contains("Uzilishe.xml") || ProfileName().Contains("Steamvault.xml") || ProfileName().Contains("Ramparts.xml") || ProfileName().Contains("Mechanar.xml") || ProfileName().Contains("blood_furnace.xml") || ProfileName().Contains("shattered_halls.xml") || ProfileName().Contains("mana.xml") || ProfileName().Contains("setek.xml") || ProfileName().Contains("botanika.xml") || ProfileName().Contains("Auk.xml") || ProfileName().Contains("Dungeon_profile_distributor.xml") || ProfileName().Contains("STRAT.xml") || ProfileName().Contains("ZulGurub.xml") || ProfileName().Contains("empty.xml") || ProfileName().Contains("Shadow_Labirinth.xml") || ProfileName().Contains("setek_loop.xml") || ProfileName().Contains("shattered_halls_loop.xml") || ProfileName().Contains("Ankahet.xml") || ProfileName().Contains("Utgarde_keep.xml") || ProfileName().Contains("Nexus.xml") || ProfileName().Contains("Gundrak.xml") || ProfileName().Contains("Draktharon_keep.xml") || ProfileName().Contains("BlackRock_Depths") || ProfileName().Contains("Magisters_Terrace.xml")));
    }
    private bool IsNordDungeonProfile()
    {
        return (Products.ProductName == "Quester" && (ProfileName().Contains("Ankahet.xml") || ProfileName().Contains("Utgarde_keep.xml") || ProfileName().Contains("Nexus.xml") || ProfileName().Contains("Gundrak.xml") || ProfileName().Contains("keep.xml")));
    }

    private bool IsFpsExclusionProfile()
    {
        return (ProfileName() == "icecap.xml" || ProfileName() == "icecap-mountainsilversage-heartofthewild.xml" || ProfileName() == "heartofthewild-ungoro.xml" || ProfileName() == "heartofthewild-ungoro2.xml" || ProfileName() == "DK_START_AREA.xml");
    }
    private bool InLoginScreen()
    {
        return wManager.Wow.Memory.WowMemory.Memory.ReadStringUTF8(0xB6A9E0) == "login";
    }
    private bool MeIsInDungeon()
    {
        return (Continent() != "Azeroth" && Continent() != "Kalimdor" && Continent() != "Expansion01" && Continent() != "Northrend" && !Battleground.IsInBattleground());
    }

    private bool MeIsInCityOrNearToCityOrSanctuary()
    {
        if (GetLocale == "ruRU")
        {
            return ((MyFaction == "A" && (Mapzone() == "Штормград" || Mapzone() == "Элвиннский лес" || Mapzone() == "Дарнас" || Mapzone() == "Тельдрассил" || Mapzone() == "Темные берега" || Mapzone() == "Остров Лазурной Дымки" || Mapzone() == "Экзодар" || Mapzone() == "Остров Кровавой Дымки" || Mapzone() == "Стальгорн" || Mapzone() == "Дун Морог" || Mapzone() == "Западный Край" || Mapzone() == "Лок Модан")) || ((Mapzone() == "Оргриммар" || Mapzone() == "Дуротар" || Mapzone() == "Подгород" || Mapzone() == "Тирисфальские леса" || Mapzone() == "Луносвет" || Mapzone() == "Громовой Утес" || Mapzone() == "Мулгор" || Mapzone() == "Степи" || Mapzone() == "Серебряный бор" || Mapzone() == "Призрачные земли" || Mapzone() == "Леса Вечной Песни")) || Mapzone() == "Даларан" || Mapzone() == "Шаттрат" || Subzone() == "Ступени Судьбы");
        }
        else
        {
            return ((MyFaction == "A" && (Mapzone() == "Stormwind City" || Mapzone() == "Elwynn Forest" || Mapzone() == "Darnassus" || Mapzone() == "Westfall" || Mapzone() == "Teldrassil" || Mapzone() == "Darkshore" || Mapzone() == "Azuremyst Isle" || Mapzone() == "The Exodar" || Mapzone() == "Bloodmyst Isle" || Mapzone() == "City of Ironforge" || Mapzone() == "Dun Morogh" || Mapzone() == "Loch Modan")) || (MyFaction == "H" && (Mapzone() == "Orgrimmar" || Mapzone() == "Durotar" || Mapzone() == "Undercity" || Mapzone() == "Tirisfal Glades" || Mapzone() == "Silvermoon City" || Mapzone() == "Thunder Bluff" || Mapzone() == "Mulgore" || Mapzone() == "The Barrens" || Mapzone() == "Silverpine Forest" || Mapzone() == "Ghostlands" || Mapzone() == "Eversong Woods")) || Mapzone() == "Dalaran" || Mapzone() == "Shattrath City" || Subzone() == "The Stair of Destiny");
        }
    }

    private bool MeIsInMyFactionCityOrNearToCityNotInSanctuary()
    {
        if (GetLocale == "ruRU")
        {
            return ((MyFaction == "A" && (Mapzone() == "Штормград" || Mapzone() == "Элвиннский лес" || Mapzone() == "Дарнас" || Mapzone() == "Тельдрассил" || Mapzone() == "Темные берега" || Mapzone() == "Остров Лазурной Дымки" || Mapzone() == "Экзодар" || Mapzone() == "Остров Кровавой Дымки" || Mapzone() == "Стальгорн" || Mapzone() == "Дун Морог" || Mapzone() == "Западный Край" || Mapzone() == "Лок Модан")) || (MyFaction == "H" && (Mapzone() == "Оргриммар" || Mapzone() == "Дуротар" || Mapzone() == "Подгород" || Mapzone() == "Тирисфальские леса" || Mapzone() == "Луносвет" || Mapzone() == "Громовой Утес" || Mapzone() == "Мулгор" || Mapzone() == "Степи" || Mapzone() == "Серебряный бор" || Mapzone() == "Призрачные земли" || Mapzone() == "Леса Вечной Песни")));
        }
        else
        {
            return ((MyFaction == "A" && (Mapzone() == "Stormwind City" || Mapzone() == "Elwynn Forest" || Mapzone() == "Darnassus" || Mapzone() == "Westfall" || Mapzone() == "Teldrassil" || Mapzone() == "Darkshore" || Mapzone() == "Azuremyst Isle" || Mapzone() == "The Exodar" || Mapzone() == "Bloodmyst Isle" || Mapzone() == "City of Ironforge" || Mapzone() == "Dun Morogh" || Mapzone() == "Loch Modan")) || (MyFaction == "H" && (Mapzone() == "Orgrimmar" || Mapzone() == "Durotar" || Mapzone() == "Undercity" || Mapzone() == "Tirisfal Glades" || Mapzone() == "Silvermoon City" || Mapzone() == "Thunder Bluff" || Mapzone() == "Mulgore" || Mapzone() == "The Barrens" || Mapzone() == "Silverpine Forest" || Mapzone() == "Ghostlands" || Mapzone() == "Eversong Woods")));
        }
    }

    private bool MeIsInCityOrSanctuary()
    {
        if (GetLocale == "ruRU")
        {
            return ((MyFaction == "A" && (Mapzone() == "Штормград" || Mapzone() == "Дарнас" || Mapzone() == "Экзодар" || Mapzone() == "Стальгорн" || Mapzone() == "Экзодар")) || (MyFaction == "H" && (Mapzone() == "Оргриммар" || Mapzone() == "Подгород" || Mapzone() == "Громовой Утес" || Mapzone() == "Луносвет")) || Mapzone() == "Даларан" || Mapzone() == "Шаттрат" || Subzone() == "Ступени Судьбы");
        }
        else
        {
            return ((MyFaction == "A" && (Mapzone() == "Stormwind City" || Mapzone() == "Darnassus" || Mapzone() == "The Exodar" || Mapzone() == "City of Ironforge" || Mapzone() == "Exodar")) || (MyFaction == "H" && (Mapzone() == "Orgrimmar" || Mapzone() == "Undercity" || Mapzone() == "Thunder Bluff" || Mapzone() == "Silvermoon City")) || Mapzone() == "Dalaran" || Mapzone() == "Shattrath City" || Subzone() == "The Stair of Destiny");
        }
    }

    private bool IsFishingProfileName()
    {
        return (Products.ProductName == "Quester" && (ProfileName() == "westfall_blackmouth_fishing.xml" || ProfileName() == "loch_modan_blackmouth_fishing.xml" || ProfileName() == "barrens_blackmouth_fishing.xml" || ProfileName() == "silverpine_blackmouth_fishing.xml" || ProfileName() == "darkshore_blackmouth_fishing.xml"));
    }

    private void sleep(int Int)
    {
        Thread.Sleep(Int);
    }

    private void MaximizeWowWindow()
    {
        //EnableRenderTexture();

        if (MaximizeTime < DateTime.Now)
        {
            MaximizeTime = DateTime.Now.AddSeconds(15);
            RestoreDownWowWindowPreTimer = DateTime.Now.AddSeconds(100);
            //Display.ShowWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle);
            //ShowWowWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle);
            if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) < 600)
            {
                print("MaximizeWowWindow");
                logs("MaximizeWowWindow");
                sleep(10);
                robotManager.Helpful.Win32.Native.ShowWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle, 3);
                robotManager.Helpful.Win32.Native.SetForegroundWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle);
                //robotManager.Helpful.Display.ShowWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle);
                //sleep(100);
                //robotManager.Helpful.Win32.Native.ShowWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle, 3);
                sleep(100);
                for (int l = 0; l < 100; l++)
                {
                    if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) < 600 || !Conditions.InGameAndConnected)
                        sleep(100);
                    if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600)
                        break;
                }
            }
        }
    }

    private void RestoreDownWowWindow()
    {
        //DisableRenderTexture();

        if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600 && !Lua.LuaDoString<bool>("if " + DontRestoreDownWowButtonFrameName + " then if " + DontRestoreDownWowButtonFrameName + ":GetChecked() == 1 then return true end end"))
        {
            print("RestoreDownWowWindow");
            logs("RestoreDownWowWindow");
            sleep(10);
            Native.ShowWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle, 4);
            sleep(100);
            for (int l = 0; l < 100; l++)
            {
                if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600 || !Conditions.InGameAndConnected)
                    sleep(100);
                if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) < 600)
                    break;
            }
        }
    }

    private void ScreenshotServerInfo(string msg)
    {
        Lua.LuaDoString("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Hide() end if " + ButtonsFrameName + " then " + ButtonsFrameName + ":Hide() end BasicScriptErrors:Hide() ChatFrame1:Clear() RunMacroText('/g .server info')");
        sleep(500);
        if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600)
        {
            runlua("Screenshot()");
            var image = new System.Drawing.Bitmap(System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width, System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height);
            var filename = "" + msg + "_" + DateTime.Now.ToString("yyyy-MM-dd_hh-mm-ss") + "_" + MyRealName + "_" + RealmShortName + "";
            var x = System.Drawing.Graphics.FromImage(image);
            x.CopyFromScreen(0, 0, 0, 0, System.Windows.Forms.Screen.PrimaryScreen.Bounds.Size);
            image.Save("Logs/" + filename + ".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
            sleep(100);
            runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() end if " + ButtonsFrameName + " then " + ButtonsFrameName + ":Show() end");
            print("Screenshot w/ sinfo saved");
            logs("Screenshot w/ sinfo saved");
            RestoreDownWowWindow();
        }
    }

    private void Screenshot(string msg)
    {
        MaximizeWowWindow();
        Lua.LuaDoString("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Hide() end if " + ButtonsFrameName + " then " + ButtonsFrameName + ":Hide() end BasicScriptErrors:Hide()");
        sleep(100);
        //robotManager.Helpful.Win32.Native.ShowWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle, 4); // развернуть окно робота
        //robotManager.Helpful.Win32.Native.SetForegroundWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle); // сделать окно робота поверх
        //Thread.sleep(100);
        //wManager.Wow.Memory.WowMemory.Memory.SetForegroundWindowInt32((int)wManager.Wow.Memory.WowMemory.Memory.WindowHandle); // окно wow поверх
        if (Display.GetWindowHeight(wManager.Wow.Memory.WowMemory.Memory.WindowHandle) >= 600)
        {
            var image = new System.Drawing.Bitmap(System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width, System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height);
            var filename = "" + msg + "_" + DateTime.Now.ToString("yyyy-MM-dd_hh-mm-ss") + "_" + MyRealName + "_" + RealmShortName + "";
            var x = System.Drawing.Graphics.FromImage(image);
            x.CopyFromScreen(0, 0, 0, 0, System.Windows.Forms.Screen.PrimaryScreen.Bounds.Size);
            image.Save("Logs/" + filename + ".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
            //robotManager.Helpful.Display.ScreenshotWindow(wManager.Wow.Memory.WowMemory.Memory.WindowHandle, "Logs/" + filename + "TEST.jpg", System.Drawing.Imaging.ImageFormat.Jpeg, -1, -1);
            sleep(100);
            runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() end if " + ButtonsFrameName + " then " + ButtonsFrameName + ":Show() end");
            print("Screenshot saved");
            logs("Screenshot saved");
            RestoreDownWowWindow();
            //robotManager.Helpful.Win32.Native.ShowWindow(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle, 6); // свернуть окно робота
        }
    }

    private void ScreenAlertVisualUber(string msg)
    {
        CreateAllFrames();
        sleep(10);
        runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() " + CenterTextFrameName + ".text:SetText('|cffFF0000" + msg + "') end");
        runlua(@"" + CenterTextFrameName + ":SetBackdropColor(0.9, 0.2, 0.2, 0.5) LowHealthFrame: SetFrameStrata('TOOLTIP') UIFrameFlash(LowHealthFrame, 0.5, 0.5, 60, false, 0.1, 0.1)");
    }

    private void ScreenAlertVisualMedium(string msg)
    {
        CreateAllFrames();
        sleep(10);
        runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() " + CenterTextFrameName + ":SetBackdropColor(0.9, 0.4, 0.2, 0.35) " + CenterTextFrameName + ".text:SetText('|cffFFAA00" + msg + "') end LowHealthFrame:SetFrameStrata('TOOLTIP') UIFrameFlash(LowHealthFrame, 0.5, 0.5, 30, false, 0.1, 0.1)");
        //runlua("if OkBtn then OkBtn:Show() end");
    }

    private void ScreenAlertVisualTextOnly(string msg)
    {
        CreateAllFrames();
        sleep(10);
        runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() " + CenterTextFrameName + ".text:SetText('|cffFFFF00" + msg + "') end");
    }

    private void ScreenAlertVisualSoft(string msg)
    {
        CreateAllFrames();
        sleep(10);
        runlua("if " + CenterTextFrameName + " then " + CenterTextFrameName + ":Show() " + CenterTextFrameName + ":SetBackdropColor(0.9, 0.2, 0.2, 0.2) " + CenterTextFrameName + ".text:SetText('|cffFFFF00" + msg + "') end");
    }

    private void runlua(string msg)
    {
        Lua.LuaDoString(msg);
    }

    private void logs(string msg)
    {
        Logging.Write("[UP] [" + MyRealName + ", " + me.Level + " лвл]: " + msg + "", Logging.LogType.Error, System.Drawing.Color.DarkCyan);
    }

    private void print(string msg)
    {
        if (ShowLogsInWowChat2 && ShowLogsInWowChat)
            runlua(FormatLua(@"DEFAULT_CHAT_FRAME:AddMessage(""{0}"")", "|cff777777[" + Time() + "] |cff777777[i]: |cff00ffaa" + msg + ""));
    }

    private int rnd(int min, int max)
    {
        System.Security.Cryptography.RNGCryptoServiceProvider rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
        byte[] buffer = new byte[4];

        rng.GetBytes(buffer);
        int result = BitConverter.ToInt32(buffer, 0);

        return new Random(result).Next(min, max);
    }

    private string Time()
    {
        return DateTime.Now.ToString("HH:mm:ss");
    }

    private void SendDiscordMessageOnKilledPlayer(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742062400202866699/glQl6sEaPH_hDU4NCGXvV20bUwXxgElfE_lYqRwX5oBM9lc3OLcDYhbHRKzWpIjF0uF8";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }
    private void SendDiscordMessageHearthstone(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/845223123725058048/oX9IvkY45BVPTwLh7EZjz_xn17nukPItE97W1pL7KJp8PVpR3ptq0JwIdWV4HqHkQGl4";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }
    private void SendDiscordMessageDebug1(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/695135430617727098/Ix9FlxQZ8mf2zgHLhVrIdLX_lpAozNgk3whC9HPeHeFBKdLGYWO8zop-QAD2Oli7qEdQ";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageDebug2(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/778206924050661409/QrwPXV5DD4esYZOLuU7Spkp33Mp-aVQRUZ_yH7smN5tZB2toL5QnBTIlv7uDlymrJey2";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageRequests(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742346111657967706/RiinBl9fbHXlnWFnZYCVrSNt67i3MIh8LFRUqyMxfnOFUBCj7VhxnRhBEzU-RwIJvV9I";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageDangerPlaces(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/773759361742536705/ng_DufLuJSKjaLrn1V4nc8lo8OWKFt31BaNFDpUegQGjqc-nt03_Rw2LNjsNJfYbEuKg";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageDeathPlacesLowLvl(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742358749481664643/p7TlKC-yoI6XDbNrZcZR9nm65ZJmVEdbzKDYnc2m3NVbSDP5Oe7S7rZmotyJbdknJ9Ty";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageDeathPlaces80(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/773757993102737409/FbXNuqU-DzIjonjAAa8ioIEx33EthHBteah5aL_C1evrzTrYlBzE41gDpUBo1k8YSryH";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageBugs(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742359195978039336/l9Q65f-vO7hPK6OB5DHkFWER0hNs0wNQaZHNMP8bYzLQtSvX_hAzZZvUY1hpV2ZnZbtC";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageAllyTargetMe(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742416411095203840/npc8wkYwpiRGqB_kuIDaB892COQVJ4nt-pU97EbHI0RfjPzVNdGUBya_M4L4tDe3U9N-";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageEnemyTargetMeImportant(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/747461833832661063/yJA6SwnpBFv7yK2NbwpeC7L_U2qIkKOy1AlIr4wHlTs8Zgy4haPxEqOo227JPirUA6PL";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageEnemyHater(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742427581097443461/-AwGkinkM8WatobKZwOIn_zAEeMunDKIfjvbK22cnuTRBMRfgd9ftydao1uWxSTKqfou";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageFriendlyHater(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/747761311332696154/DXDLPeteDtU2wn6y90E7ckPt4TthCWD2i2qeu8-d80xwPjVKs28W4F-FoaN5O9HNUmpO";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageGMDebuff(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/897413307869310978/TK3GLsIZ3CwNg6T_CvxIyW35cwQbsV61eCkgtjrcWQ8xd6Pjo9gwpoCYsgiYn3Q0z_9T";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageBigSpeed(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742531316133920788/7OLPLWeDtjxfx-OZbIKm7189hMxZRXnKfAFDyp3EbGIsWLIke9uy4CldeDy2lPc0BMkb";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageBigScale(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742531700109869087/SvpEN1M-2qkz7DbCSCBL_E8UzH87q-rJAZxOWnmiRapvl0mbzToXXECJ9Vaox_V1m66b";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageGank(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742532304005496894/WupuXxi0WjzXmWg0lJKDI6FvHzLVk7OPNSaK1lr0cV51L3eLS4lD2p7r06e-wxZ6Ag-S";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageSpiritHealer(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742538592802308149/gyKRvlRs1xpdxkdH2r9hZCnTAMrz42zLRdhG4JUHZcZcmUiyMsnAeLSDRC5F1qLyi9JV";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageBigPing(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/774330620931211264/1_xXgrT-wxvtLsukVSfdKa-s6fWxEO_v66LZRNWW0ZNSvzqjpvUB5MNxGqN5NBpWAiC_";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageFlyBait(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742547663161131049/TbEzZ92YSZ6GkyMRJFQGUcH66pSK6arODS_oqXipakRPvz5GXAkKvY5peFgU9cGJg9Xj";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageStucks(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/742560160006012929/-VN438BQl1DzrjlEkXs2GUeghyGAJAZwggcTIm3iXxYnUcZbLjv7VJOVRPh3KT0aWowC";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageFightWithPlayers(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/743469968305160320/a_ZG_yABIPQzezNuBv4NUAAZGO57MEk-mRFMdTT7DZ1TPLAkhlDlJ0IWYF8at29b9syQ";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageWhisper(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/746310333186048101/76PsQZjdPDYoi7tED2zsDjQuYFQLPJfB46qjE37xJGu01gy281BgfrLsd0Bw8pIvhizL";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageArchiveAlerts(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/774904992371834900/d6c7XPj7U1_viOSF5Fb4PDSO_tFr1GXwbn-cMq7GDJ6v5-bAtjRRb997_8rQlkcwoEal";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageWhoSayBot(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/747643855142387844/LrpRtyr4INN0vpKMxGxQelzKFGr7EdMx4gip0vcWqU_rMAjcqMhciWTWqJVUsno23BdJ";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageWhisperSend(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/749661386145267733/8oR9GsgVEzuZucVnrXlPwJDHmPKBNbPDku4LH3_40CpG9O1sImA3dFN0nzY8pgcYbKl0";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageSAYAll(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/749665193776119899/501JxQYJAbQckhY1fYnVj12xPmBE7izLNkj6nRJ3l8S89BdwUmEDf4TJ7Wb_vEUVdLS4";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageSAYImportant(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/749665657313820763/niVqU122v4qWqrZ3whT1QOLTTxxzWKgD2P9y6EXxFXm0NnSR6GFJcB9WSPP6CBTUMx1v";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageMySAYImportant(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/749665913539788811/ZXq3r3acbHgKeg_O59MdU59t1YOJKewTrmvntkLjTnSZb11THOIMjN0X-Eq5deW2BJ73";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageEnemyTargetMeALL(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/749959765140045846/G4Z7XGOrV7Dp1ECgCd2iCbe8qlko8Tk43Sm7qeeo_KaNiz7mALbaqsfXYQM-Q9W5gBhM";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageFriendsComeOnline(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761679411363184690/Ei82TvGeHVHKXfp4QZ9h0hAXb-Akolii_sbJGHjWJ-WfUs0NbOJjWXT7CHkMLIWNXY9G";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageFriendsGoneOffline(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761679916516507658/KsF7nGa2qDPPMESFoXmyEjvWwxpWs9rd7ZizNfttPSZrc67mSk9a4Ee4lqVNMjf2Ljsp";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageAuctionBuys(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761680213250801685/RRP0i80eFGVSEmmaIpuSm9hCoTrGcthBDqyQIYFOYPKKLk_EbARh8lF7b_UqBlXfUv4I";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageGmOnline(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761680592072605746/FsHzXVChkT4XkKlOdqfF2RuvWbcTomIVhAkLNtCgcRN8z2C80bJHQjGrPDo-etk1tNiH";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageHonorableKills(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761681169535205419/qpGVJikH5ooLr_0YAgP_5n9JJxuQfgzORxBKfnI1iidf5p9780Hps5DaqzYKtsodUn3m";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageLoot(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761684197521752094/FbA_GKzZDpaYe5z_7abT4IJ8gKKnuIw_jEO8SWLqxGq2qolxzoPScgMFtDFQ4PAGuDxZ";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageLootCobalt(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761685270360752200/LZGD5xRciE9rCH1wrlbIuc2BYdwOyPkwdaznp6-B_dr43mjyFzNAEIh0Ez5obgU7CBMu";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private void SendDiscordMessageLootSaroniteTitanLichbloom(String contentBody)
    {
        try
        {
            var discordWebhookURL = "https://discord.com/api/webhooks/761685624976834580/fmBANK4CZj8owTa4vKwx3PDtjMYNU-vlQOHJfgMSh9lbyBMlvc4UPJeTxMpqPHWnYe9M";
            var webReq = WebRequest.Create(discordWebhookURL) as HttpWebRequest;
            webReq.ContentType = "application/json";
            webReq.Method = "POST";
            using (var streamWriter = new StreamWriter(webReq.GetRequestStream()))
            {
                string json = "{\"content\":\"" + contentBody + "\"}";
                streamWriter.Write(json);
                streamWriter.Flush();
                streamWriter.Close();
            }
            var httpResponse = (HttpWebResponse)webReq.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }
        catch (Exception) { }
    }

    private WoWPlayer KilledEnemyPlayerOLD()
    {
        return ObjectManager.GetObjectWoWPlayer().FirstOrDefault(u => u.GetDistance <= 40 && u.GetDistanceZ <= 4 && u.IsDead && u.PlayerFaction != me.PlayerFaction);
    }

    private WoWPlayer KilledEnemyPlayer()
    {
        return ObjectManager.GetObjectWoWPlayer().FirstOrDefault(u => u.GetDistance <= 40 && u.IsDead && u.PlayerFaction != me.PlayerFaction);
    }

    private WoWPlayer NearestPlayer()
    {
        return ObjectManager.GetNearestWoWPlayer(ObjectManager.GetObjectWoWPlayer());
    }

    private WoWPlayer NearestEnemyPlayerTEST()
    {
        return ObjectManager.GetNearestWoWPlayer(ObjectManager.GetObjectWoWPlayer().FindAll(p => p.IsAttackable));
    }

    private List<WoWPlayer> GetHatersNearMe()
    {
        List<WoWPlayer> EnemiesNearMe = ObjectManager.GetObjectWoWPlayer().FindAll(p => (HatersGuidsList.Contains(p.Guid) || HatersNamesList.Contains(p.Name)));
        return EnemiesNearMe;
    }

    private WoWPlayer EnemyPlayer()
    {
        return ObjectManager.GetObjectWoWPlayer().FirstOrDefault(g => g.IsAttackable && g.GetDistance < 200);
    }

    private WoWPlayer NearestFriendlyPlayer()
    {
        return ObjectManager.GetObjectWoWPlayer().OrderBy(g => g.GetDistance).FirstOrDefault(g => !g.IsAttackable);
    }

    private WoWPlayer EnemyPlayerThatAttackingMeAndAlive()
    {
        return ObjectManager.GetObjectWoWPlayer().FirstOrDefault(g => g.IsAttackable && g.GetDistance < 40 && g.InCombat && g.IsTargetingMe && g.IsAlive);
    }

    private WoWPlayer EnemyPlayerIn40Yards()
    {
        return ObjectManager.GetObjectWoWPlayer().FirstOrDefault(g => g.IsAttackable && g.GetDistance < 40);
    }

    private WoWPlayer GetPlayerThatTargetMe()
    {
        return ObjectManager.GetNearestWoWPlayer(ObjectManager.GetObjectWoWPlayerTargetMe());
    }

    public string StepName()
    {
        string currentstep = null;
        var p = Quest.QuesterCurrentContext.Profile as QuesterProfile;
        if (p != null)
        {
            if (p.QuestsSorted[Quest.QuesterCurrentContext.CurrentStep].Action == QuestAction.Pulse && p.QuestsSorted[Quest.QuesterCurrentContext.CurrentStep].NameClass != null)
            {
                currentstep = p.QuestsSorted[Quest.QuesterCurrentContext.CurrentStep].NameClass;
            }
        }
        else
        {
            currentstep = null;
        }
        return currentstep;
    }

    private string MyMoneyLua()
    {
        return Lua.LuaDoString<string>(@"copper = GetMoney() return ('%dk'):format(copper / 100 / 100 / 1000, (copper / 100) % 100, copper % 100)");
    }

    private string MyMoney()
    {
        return "" + (int)me.GetMoneyCopper / 10000000 + "k";
    }

    private bool MeIsOnDungeonRespawn()
    {
        return Continent() == "Expansion01" && IsDungeonProfile()
            &&
            (me.Position.DistanceTo(new Vector3(-812.5724f, 2709.79f, 108.9507f)) < 50
            ||
            me.Position.DistanceTo(new Vector3(160.484f, 2566.968f, 77.54929f)) < 30
            ||
            me.Position.DistanceTo(new Vector3(242.4461, 7083.388, 36.98052)) < 30
            ||
            me.Position.DistanceTo(new Vector3(-3560.172f, 4668.146f, -21.9423f)) < 30
            ||
            me.Position.DistanceTo(new Vector3(2980.393f, 1869.196f, 143.3099f)) < 30);
    }

    private void Dismount()
    {
        if (me.IsMounted)
        {
            logs("дизмаунт Dismount()");
            print("дизмаунт Dismount()");
            runlua("Dismount()");
        }

        if (ImDruid)
        {
            if (me.HaveBuff("Flight Form"))
                SpellManager.CastSpellByNameLUA("Flight Form");
            if (me.HaveBuff("Swift Flight Form"))
                SpellManager.CastSpellByNameLUA("Swift Flight Form");
            logs("доп дизмаунт формы у друида");
            print("доп дизмаунт формы у друида");
        }
    }

    private void Unstuck()
    {
        if (RealmShortName.Contains("Circle"))
            runlua("RunMacroText('/g .start')");
        else
            runlua("Stuck()");
    }

    private void FastEscapeFromDungeonRespawns()
    {

        if (Var.GetVar<int>("MeIsOnDungeonRespawn") == 1)
        {
            if (!Fight.InFight && !me.InCombat && !me.IsDead && Setting.UseFlyingMount && Setting.FlyingMountName != "" && MeIsOnDungeonRespawn())
            {

                var randommove = rnd(1, 7);

                if (randommove == 5)
                {
                    logs("[FastEscapeFromDungeonRespawns] рандом Forward");
                    print("[FastEscapeFromDungeonRespawns] рандом Forward");
                    Move.Forward(Move.MoveAction.PressKey, rnd(200, 500));
                }

                if (randommove == 6)
                {
                    logs("[FastEscapeFromDungeonRespawns] рандом Backward");
                    print("[FastEscapeFromDungeonRespawns] рандом Backward");
                    Move.Backward(Move.MoveAction.PressKey, rnd(200, 500));
                }


                if (!MeIsOnFlyMount() && !Fight.InFight && !me.InCombat)
                {
                    logs("[FastEscapeFromDungeonRespawns] каст маунта");
                    print("[FastEscapeFromDungeonRespawns] каст маунта");
                    MountTask.MountingFlyingMount();
                    Usefuls.WaitIsCasting();
                    sleep(rnd(100, 500));
                }

                if (MeIsOnFlyMount() && !me.GetMove)
                {
                    if (!me.IsFlying)
                        jumpedonmount = false;
                    else
                        jumpedonmount = true;

                    if (!me.IsFlying && rnd(1, 3) == 2 && !me.GetMove && !jumpedonmount)
                    {
                        wManager.Wow.Helpers.Keybindings.PressKeybindings(wManager.Wow.Enums.Keybindings.JUMP, rnd(300, 1500));
                        logs("[FastEscapeFromDungeonRespawns] пробел");
                        print("[FastEscapeFromDungeonRespawns] пробел");
                        if (me.IsFlying)
                            jumpedonmount = true;
                    }

                    if (me.IsFlying && rnd(1, 3) == 2 && !me.GetMove)
                    {
                        sleep(rnd(100, 2000));
                        logs("[FastEscapeFromDungeonRespawns] литл пауза перед улетом");
                        print("[FastEscapeFromDungeonRespawns] литл пауза перед улетом");
                    }

                    if (me.Position.DistanceTo(new Vector3(-812.5724f, 2709.79f, 108.9507f)) < 50 && !me.GetMove)
                    {
                        logs("[FastEscapeFromDungeonRespawns] улетаем из респа хонор холда");
                        print("[FastEscapeFromDungeonRespawns] улетаем из респа хонор холда");
                        GoToTask.ToPosition(new Vector3(rnd(-1200, -900), rnd(2300, 2700), rnd(140, 200), "Flying"));
                    }

                    if (me.Position.DistanceTo(new Vector3(160.484f, 2566.968f, 77.54929f)) < 50 && !me.GetMove)
                    {
                        logs("[FastEscapeFromDungeonRespawns] улетаем из респа тралмара");
                        print("[FastEscapeFromDungeonRespawns] улетаем из хонор тралмара");
                        GoToTask.ToPosition(new Vector3(rnd(-100, 400), rnd(2100, 2600), rnd(180, 250), "Flying"));
                    }

                    if (me.Position.DistanceTo(new Vector3(242.4461, 7083.388, 36.98052)) < 50 && !me.GetMove)
                    {
                        Vector3 point = robotManager.Helpful.Math.GetRandomPointInCircle(new Vector3(150.7439, 7077.792, (me.Position.Z + rnd(130, 200))), rnd(200, 500));
                        point.SetFlying();
                        logs("[FastEscapeFromDungeonRespawns] улетаем из респа коилфанга");
                        print("[FastEscapeFromDungeonRespawns] улетаем из респа коилфанга");
                        GoToTask.ToPosition(point);
                    }

                    if (me.Position.DistanceTo(new Vector3(-3560.172f, 4668.146f, -21.9423f)) < 50 && !me.GetMove)
                    {
                        logs("[FastEscapeFromDungeonRespawns] улетаем из респа аукидона");
                        print("[FastEscapeFromDungeonRespawns] улетаем из респа аукидона");
                        GoToTask.ToPosition(new Vector3(rnd(-3600, -3200), rnd(4200, 4500), rnd(50, 100), "Flying"));
                    }

                    if (me.Position.DistanceTo2D(new Vector3(2980.393f, 1869.196f, 143.3099f)) < 30 && !me.GetMove)
                    {
                        logs("[FastEscapeFromDungeonRespawns] улетаем из респа космовренча");
                        print("[FastEscapeFromDungeonRespawns] улетаем из респа космовренча");
                        GoToTask.ToPosition(new Vector3(rnd(3050, 3200), rnd(1950, 2000), rnd(250, 350), "Flying"));
                    }

                }
            }

            if (Var.GetVar<int>("MeIsOnDungeonRespawn") == 1 && !MeIsOnDungeonRespawn())
            {
                Var.SetVar("MeIsOnDungeonRespawn", 0);
                logs("[FastEscapeFromDungeonRespawns] мы не на инстовом респе, переменная обнулена если была задана");
                logs("[FastEscapeFromDungeonRespawns] мы не на инстовом респе, переменная обнулена если была задана");
            }
        }
    }

    // if me in water //
    private void MeInWaterActions()
    {
        if (MeInWaterCheck < DateTime.Now && me.IsSwimming && !Fight.InFight && !IsDungeonProfile())
        {
            MeInWaterCheck = DateTime.Now.AddSeconds(rnd(5, 15));

            // Path of Frost //
            if (ImDK && !(Subzone() == "Valorwind Lake") && SpellManager.KnowSpell(3714) && SpellManager.SpellUsableLUA("Path of Frost") && !me.HaveBuff("Path of Frost") && !IsHonorFarmProfileName() && !(ProfileName() == "kaluak_quests.xml") && Mapzone() != "Stormwind City" && Mapzone() != "Stormwind City" && Subzone() != "Coilfang Reservoir" && Mapzone() != "Coilfang Reservoir" && Mapzone() != "Gundrak")
            {
                SpellManager.CastSpellByNameLUA("Path of Frost");
                logs("[MeInWaterActions] Path of Frost");
            }

            // noggenfogger elixir for underwater breath //
            if (ItemsManager.GetItemCountById(8529) > 0 && !me.HaveBuff(16591) && Bag.GetContainerItemCooldown(8529) == 0 && me.BreathActive)
            {
                ItemsManager.UseItem(8529);
                logs("[MeInWaterActions] юз гоголя в воде для дыхалки");
            }

            // jump when using path of frost //
            if (ImDK && me.HaveBuff("Path of Frost") && me.IsSwimming)
            {
                Move.JumpOrAscend(Move.MoveAction.PressKey, 2000);
                logs("[MeInWaterActions] прыжок из воды под льдистым путем");
            }

            /*
            // jump on surface when breath < 60 sec //
            if (me.BreathActive && me.BreathTimerLeft < 60000 && me.BreathTimerLeft > 0)
            {
                Move.JumpOrAscend(Move.MoveAction.PressKey, 5000);
                logs("трай прыжка на поверхность если breath < 60 сек");
            }
            */
        }
    }

    // fishing checks //
    private void FishingChecks()
    {
        if (MammothBaitCheckPulse < DateTime.Now && IsFishingProfileName())
        {
            MammothBaitCheckPulse = DateTime.Now.AddSeconds(1);

            var bobber = ObjectManager.GetObjectWoWGameObject().Find(o => o.Entry == 35591 && o.CreatedBy == me.Guid);
            var HaterOnMammoth = ObjectManager.GetObjectWoWPlayer().FirstOrDefault(u => u.IsValid && u.IsAlive && u.GetDistance2D < 25 && (u.HaveBuff("Traveler's Tundra Mammoth") || u.HaveBuff("Grand Black War Mammoth") || u.HaveBuff("Black War Mammoth") || u.HaveBuff("Ice Mammoth") || u.HaveBuff("Wooly Mammoth") || u.HaveBuff("Wooly Mammoth")));
            var SomePlayerNearMe = ObjectManager.GetObjectWoWPlayer().FirstOrDefault(u => u.IsValid && u.IsAlive && u.GetDistance2D < 15);
            var HaterOnMammothPosition = HaterOnMammoth.Position;
            // mammoth bait on bobber //
            if (FishingTask.IsLaunched && bobber.IsValid && HaterOnMammoth.IsValid && bobber.Position.DistanceTo(HaterOnMammothPosition) < 5)
            {
                logs("[FishingChecks] player on mammoth near the bobber detected (fishing), logout for 10-15 min");
                me.Target = HaterOnMammoth.Guid;
                sleep(rnd(2000, 15000));
                PauseAndLogout();
                sleep(rnd(500000, 1000000));
                EnterWorldAndOffPause();
            }
        }
    }

    public Dictionary<string, int> MiningRequirementsMax = new Dictionary<string, int>
    {
        {"Copper Vein", 100 },
        {"Incendicite Mineral Vein", 165 },
        {"Tin Vein", 165 },
        {"Lesser Bloodstone Deposit", 175 },
        {"Silver Vein", 175 },
        {"Iron Deposit", 225 },
        {"Gold Vein", 255 },
        {"Mithril Deposit", 275 },
        {"Truesilver Deposit", 280 },
        {"Dark Iron Deposit", 280 },
        {"Small Thorium Vein", 280},
        {"Rich Thorium Vein", 280 },
        {"Fel Iron Deposit", 375 },
        {"Adamantite Deposit", 375 },
        {"Rich Adamantite Deposit", 375 },
        {"Nethercite Deposit", 375 },
        {"Khorium Vein", 375 },
        {"Медная жила", 100 },
        {"Ароматитовая жила", 165 },
        {"Оловянная жила", 165 },
        {"Малое месторождение кровавого камня", 175 },
        {"Серебряная жила", 175 },
        {"Залежи железа", 225 },
        {"Золотая жила", 255 },
        {"Мифриловые залежи", 275 },
        {"Залежи истинного серебра", 280 },
        {"Залежи черного железа", 280 },
        {"Малая ториевая жила", 280},
        {"Богатая ториевая жила", 280 },
        {"Месторождение оскверненного железа", 375 },
        {"Залежи адамантита", 375 },
        {"Богатые залежи адамантита", 375 },
        {"Месторождение хаотита", 375 },
        {"Кориевая жила", 375 },
    };

    public Dictionary<string, int> HerbsRequirementsMax = new Dictionary<string, int>
    {
        {"Silverleaf", 100 },
        {"Peacebloom", 100 },
        {"Earthroot", 115 },
        {"Mageroyal", 150 },
        {"Briarthorn", 170 },
        {"Grave Moss", 215 },
        {"Bruiseweed", 200 },
        {"Kingsblood", 225 },
        {"Goldthorn", 270 },
        {"Wild Steelbloom", 215 },
        {"Khadgar's Whisker", 280 },
        {"Sungrass", 280 },
        {"Golden Sansam", 355 },
        {"Fadeleaf", 260 },
        {"Felweed", 375 },
        {"Dreamfoil", 355 },
        {"Mountain Silversage", 375 },
        {"Nightmare Vine", 375 },
        {"Terocone", 375 },
        {"Plaguebloom", 280 },
        {"Black Lotus", 280 },
        {"Arthas' Tears", 280 },
        {"Dreaming Glory", 375 },
        {"Goldclover", 445 },
        {"Сребролист", 100 },
        {"Мироцвет", 100 },
        {"Земляной корень", 115 },
        {"Магороза", 150 },
        {"Остротерн", 170 },
        {"Могильный мох", 215 },
        {"Синячник", 200 },
        {"Королевская кровь", 225 },
        {"Златошип", 270 },
        {"Дикий сталецвет", 215 },
        {"Кадгаров ус", 280 },
        {"Солнечник", 280 },
        {"Золотой сансам", 355 },
        {"Бледнолист", 260 },
        {"Сквернопля", 375 },
        {"Снолист", 355 },
        {"Горный серебряный шалфей", 375 },
        {"Ползучий кошмарник", 375 },
        {"Терошишка", 375 },
        {"Чумоцвет", 280 },
        {"Черный лотос", 280 },
        {"Слезы Артаса", 280 },
        {"Сияние грез", 375 },
        {"Золотой клевер", 445 },
    };

    // super fast fly: Big Love Rocket, Celestial Steed, Invincible, X-53 Touring Rocket, Onyxian Drake, Bloodbathed Frostbrood Vanquisher, Rusted Proto-Drake
    // fast fly: Red Drake, Bronze Drake, Blue Drake, Cenarion War Hippogryph, Twilight Drake, Albino Drake, Azure Netherwing Drake, Cobalt Netherwing Drake, Onyx Netherwing Drake, Purple Netherwing Drake, Red Proto-Drake, Veridian Netherwing Drake, Violet Netherwing Drake, Swift Red Wind Rider, Swift Green Wind Rider, Swift Yellow Wind Rider, Swift Purple Wind Rider, Armored Blue Wind Rider, Swift Red Gryphon, Swift Blue Gryphon, Swift Purple Gryphon, Swift Green Gryphon, Armored Snowy Gryphon, Winged Steed of the Ebon Blade
    // slow fly: Tawny Wind Rider, Blue Wind Rider, Green Wind Rider, Snowy Gryphon, Ebon Gryphon, Golden Gryphon
    // fast ground: 
    // slow ground: 

    private readonly List<string> SuperFastFlyMountList = new List<string>()
    {
        "Big Love Rocket",
        "Celestial Steed",
        "Invincible",
        "X-53 Touring Rocket",
        "Onyxian Drake",
        "Rusted Proto-Drake",
        "Ashes of Al'ar",
        "Violet Proto-Drake",
        "Blazing Hippogryph",
        "Black Proto-Drake",
        "Deadly Gladiator's Frost Wyrm",
        "Furious Gladiator's Frost Wyrm",
        "Relentless Gladiator's Frost Wyrm",
        "Wrathful Gladiator's Frost Wyrm",
        "Icebound Frostbrood Vanquisher",
        "Bloodbathed Frostbrood Vanquisher",
        "Plagued Proto-Drake",
        "Ironbound Proto-Drake",
        "Merciless Nether Drake",
        "Nether Drake",
        "Brutal Nether Drake",
        "Swift Nether Drake",
        "Vengeful Nether Drake",
        "Mimiron's Head",

        "Большая ракета любви",
        "Небесный скакун",
        "Непобедимый",
        "Прогулочная ракета X-53",
        "Дракон Ониксии",
        "Ржавый протодракон",
        "Пепел Ал'ара",
        "Аметистовый протодракон",
        "Пламенеющий гиппогриф",
        "Черный протодракон",
        "Ледяной змей гневного гладиатора",
        "Ледяной змей неумолимого гладиатора",
        "Ледяной змей разгневанного гладиатора",
        "Ледяной змей смертоносного гладиатора",
        "Неуклонный ледяной покоритель",
        "Обагренный ледяной покоритель",
        "Чумной протодракон",
        "Протодракон в железной броне",
        "Безжалостный дракон Пустоты",
        "Мстительный дракон Пустоты",
        "Стремительный дракон Пустоты",
        "Дракон Пустоты",
        "Жестокий дракон Пустоты",
        "Голова Мимирона",
    };

    private readonly List<string> FastFlyMountList = new List<string>()
    {
        "Cobalt Netherwing Drake",
        "Armored Snowy Gryphon",
        "Winged Steed of the Ebon Blade",
        "Swift Flight Form",
        "Albino Drake",
        "Argent Hippogryph",
        "Armored Blue Wind Rider",
        "Azure Drake",
        "Azure Netherwing Drake",
        "Black Dragonhawk Mount",
        "Black Drake",
        "Blue Dragonhawk",
        "Blue Drake",
        "Blue Proto-Drake",
        "Blue Riding Nether Ray",
        "Bronze Drake",
        "Cenarion War Hippogryph",
        "Green Proto-Drake",
        "Green Riding Nether Ray",
        "Onyx Netherwing Drake",
        "Purple Netherwing Drake",
        "Purple Riding Nether Ray",
        "Red Dragonhawk",
        "Red Drake",
        "Red Proto-Drake",
        "Red Riding Nether Ray",
        "Silver Covenant Hippogryph",
        "Silver Riding Nether Ray",
        "Sunreaver Dragonhawk",
        "Swift Blue Gryphon",
        "Swift Green Gryphon",
        "Swift Green Wind Rider",
        "Swift Purple Gryphon",
        "Swift Purple Wind Rider",
        "Swift Red Gryphon",
        "Swift Red Wind Rider",
        "Swift Yellow Wind Rider",
        "Time-Lost Proto-Drake",
        "Twilight Drake",
        "Veridian Netherwing Drake",
        "Violet Netherwing Drake",
        "X-51 Nether-Rocket X-TREME",

        "Красный дракон",
        "Бронзовый дракон",
        "Синий дракон",
        "Кенарийский боевой гиппогриф",
        "Дракон-альбинос",
        "Лазурный дракон Крыльев Пустоты",
        "Кобальтовый дракон Крыльев Пустоты",
        "Ониксовый дракон Крыльев Пустоты",
        "Лиловый дракон Крыльев Пустоты",
        "Красный протодракон",
        "Зеленый дракон Крыльев Пустоты",
        "Фиолетовый дракон Крыльев Пустоты",
        "Стремительный красный ветрокрыл",
        "Стремительный зеленый ветрокрыл",
        "Стремительный желтый ветрокрыл",
        "Стремительный лиловый ветрокрыл",
        "Бронированный синий ветрокрыл",
        "Стремительный красный грифон",
        "Стремительный синий грифон",
        "Стремительный сиреневый грифон",
        "Бронированный синий ветрокрыл",
        "Стремительный красный грифон",
        "Стремительный синий грифон",
        "Стремительный красный грифон",
        "Стремительный сиреневый грифон",
        "Стремительный зеленый грифон",
        "Бронированный белоснежный грифон",
        "Крылатый скакун Черного Клинка",
        "Облик стремительной птицы",
        "Гиппогриф Серебряного Авангарда",
        "Гиппогриф Серебряного союза",
        "Дракондор Похитителей Солнца",
        "Затерянный во времени протодракон",
        "Зеленый верховой скат Пустоты",
        "ИКС-ключительная ракета Пустоты X-51",
        "Красный верховой скат Пустоты",
        "Красный дракондор",
        "Красный протодракон",
        "Лиловый верховой скат Пустоты",
        "Серебряный верховой скат Пустоты",
        "Синий верховой скат Пустоты",
        "Синий дракондор",
        "Синий протодракон",
        "Турбоветролет",
        "Черный верховой дракондор",
    };

    private readonly List<string> SlowFlyMountList = new List<string>()
    {
        "Tawny Wind Rider",
        "Blue Wind Rider",
        "Green Wind Rider",
        "Snowy Gryphon",
        "Ebon Gryphon",
        "Golden Gryphon",
        "Flight Form",
        "X-51 Nether-Rocket",
        "Big Love Rocket",

        "Рыжий ветрокрыл",
        "Синий ветрокрыл",
        "Зеленый ветрокрыл",
        "Белоснежный грифон",
        "Вороной грифон",
        "Золотистый грифон",
        "Облик птицы",
        "Ракета Пустоты X-51",
    };

    private readonly List<string> FastGroundMountList = new List<string>()
    {
        "Acherus Deathcharger",
        "Amani War Bear",
        "Ancient Frostsaber",
        "Argent Charger",
        "Argent Warhorse",
        "Armored Brown Bear",
        "Big Battle Bear",
        "Black Battlestrider",
        "Black Nightsaber",
        "Black Polar Bear",
        "Black Qiraji Battle Tank",
        "Black Ram",
        "Black War Bear",
        "Black War Elekk",
        "Black War Kodo",
        //"Black War Mammoth",
        //"Black War Mammoth",
        "Black War Ram",
        "Black War Raptor",
        "Black War Steed",
        "Black War Tiger",
        "Black War Wolf",
        "Blue Skeletal Warhorse",
        "Brown Polar Bear",
        "Charger",
        "Cobalt Riding Talbuk",
        "Cobalt War Talbuk",
        "Crimson Deathcharger",
        "Crusader's Black Warhorse",
        "Crusader's White Warhorse",
        "Dark Riding Talbuk",
        "Dark War Talbuk",
        "Darkspear Raptor",
        "Darnassian Nightsaber",
        "Dreadsteed",
        "Exodar Elekk",
        "Fiery Warhorse",
        "Forsaken Warhorse",
        "Frost Ram",
        "Frostwolf Howler",
        "Gnomeregan Mechanostrider",
        //"Grand Black War Mammoth",
        //"Grand Ice Mammoth",
        //"Grand Caravan Mammoth",
        "Great Blue Elekk",
        "Great Brewfest Kodo",
        "Great Brown Kodo",
        "Great Elite Elekk",
        "Great Golden Kodo",
        "Great Gray Kodo",
        "Great Green Elekk",
        "Great Purple Elekk",
        "Great Red Elekk",
        "Great White Kodo",
        "Green Kodo",
        "Green Skeletal Warhorse",
        //"Ice Mammoth",
        "Ironforge Ram",
        "Ivory Raptor",
        "Magic Rooster",
        "Mechano-hog",
        "Mekgineer's Chopper",
        "Mottled Red Raptor",
        "Naxxramas Deathcharger",
        "Ochre Skeletal Warhorse",
        "Orgrimmar Wolf",
        "Purple Skeletal Warhorse",
        "Quel'dorei Steed",
        "Raven Lord",
        "Red Skeletal Warhorse",
        "Red Wolf",
        "Rivendare's Deathcharger",
        "Silver Riding Talbuk",
        "Silver War Talbuk",
        "Silvermoon Hawkstrider",
        "Stormpike Battle Charger",
        "Stormwind Steed",
        "Summon Charger",
        "Sunreaver Hawkstrider",
        "Swift Alliance Steed",
        "Swift Blue Raptor",
        "Swift Brewfest Ram",
        "Swift Brown Ram",
        "Swift Brown Steed",
        "Swift Brown Wolf",
        "Swift Burgundy Wolf",
        "Swift Dawnsaber",
        "Swift Frostsaber",
        "Swift Gray Ram",
        "Swift Gray Steed",
        "Swift Gray Wolf",
        "Swift Green Hawkstrider",
        "Swift Green Mechanostrider",
        "Swift Horde Wolf",
        "Swift Mistsaber",
        "Swift Moonsaber",
        "Swift Olive Raptor",
        "Swift Orange Raptor",
        "Swift Palomino",
        "Swift Pink Hawkstrider",
        "Swift Purple Hawkstrider",
        "Swift Purple Raptor",
        "Swift Razzashi Raptor",
        "Swift Red Hawkstrider",
        "Swift Spectral Tiger",
        "Swift Stormsaber",
        "Swift Timber Wolf",
        "Swift Violet Ram",
        "Swift War Elekk",
        "Swift Warstrider",
        "Swift White Hawkstrider",
        "Swift White Mechanostrider",
        "Swift White Ram",
        "Swift White Steed",
        "Swift Yellow Mechanostrider",
        "Swift Zhevra",
        "Swift Zulian Tiger",
        "Tan Riding Talbuk",
        "Tan War Talbuk",
        "Teal Kodo",
        "Thunder Bluff Kodo",
        //"Traveler's Tundra Mammoth",
        "Turbostrider",
        "Venomhide Ravasaur",
        "White Polar Bear",
        "White Riding Talbuk",
        "White Skeletal Warhorse",
        "White Stallion",
        "White War Talbuk",
        "Winter Wolf",
        "Winterspring Frostsaber",
        //"Wooly Mammoth",
        "Wooly White Rhino",

        "Призыв скакуна",
        "Скакун",
        "Поводья бронированного бурого медведя",
        "Конь смерти Акеруса",
        "Непобедимый",
        "Небесный скакун",
        "Аманийский боевой медведь",
        "Большая ракета любви",
        "Анжинерский чоппер",
        "Механоцикл",
        "Багровый конь смерти",
        "Белый баран",
        "Белый боевой конь крестоносца",
        "Белый боевой конь-скелет",
        "Белый боевой талбук",
        "Белый верховой талбук",
        "Белый жеребец",
        "Огненный боевой конь",
        "Белый северный медведь",
        "Белый шерстистый носорог",
        "Бирюзовый кодо",
        "Боевой конь Отрекшихся",
        "Боевой скакун Грозовой Вершины",
        "Большой боевой медведь",
        "Большой зеленый элекк",
        "Большой золотистый кодо",
        //"Большой караванный мамонт",
        "Большой кодо Хмельного фестиваля",
        "Большой красный элекк",
        //"Большой ледяной мамонт",
        "Большой лиловый элекк",
        "Большой синий элекк",
        //"Большой черный боевой мамонт",
        "Большой элитный элекк",
        "Верховой ядошкурый равазавр",
        "Владыка Воронов",
        "Вой Северного Волка",
        "Волшебный петух",
        "Вороной боевой конь крестоносца",
        "Вороной боевой скакун",
        "Гномреганский механодолгоног",
        "Дарнасский ночной саблезуб",
        "Древний ледопард",
        "Зеленый боевой конь-скелет",
        "Зеленый кодо",
        "Игреневый конь",
        "Кель'дорайский скакун",
        "Кобальтовый боевой талбук",
        "Кобальтовый верховой талбук",
        "Кодо Громового Утеса",
        "Конь смерти Ривендера",
        "Коричневый боевой конь-скелет",
        "Красный боевой конь-скелет",
        "Красный крапчатый ящер",
        "Крылобег Луносвета",
        "Крылобег Похитителей Солнца",
        "Ледопард Зимних Ключей",
        //"Ледяной мамонт",
        "Лиловый боевой конь-скелет",
        "Ночной саблезуб",
        "Огромный белый кодо",
        "Огромный серый кодо",
        "Оргриммарский волк",
        "Палевый ящер",
        "Призыв коня погибели",
        "Резвый боевой элекк",
        "Рыжий боевой талбук",
        "Рыжий верховой талбук",
        "Рыжий волк",
        "Серебристый боевой талбук",
        "Серебристый верховой талбук",
        "Синий боевой конь-скелет",
        "Снежный баран",
        "Снежный волк",
        "Стальгорнский баран",
        "Стремительная жевра",
        "Стремительный баран Хмельного фестиваля",
        "Стремительный белый баран",
        "Стремительный белый крылобег",
        "Стремительный белый механодолгоног",
        "Стремительный боевой крылобег",
        "Стремительный бурый баран",
        "Стремительный бурый волк",
        "Стремительный гнедой рысак",
        "Стремительный грозовой саблезуб",
        "Стремительный желтый механодолгоног",
        "Стремительный зеленый крылобег",
        "Стремительный зеленый механодолгоног",
        "Стремительный зулианский тигр",
        "Стремительный игреневый конь",
        "Стремительный красный крылобег",
        "Стремительный ледопард",
        "Стремительный лесной волк",
        "Стремительный лиловый баран",
        "Стремительный лиловый крылобег",
        "Стремительный лиловый ящер",
        "Стремительный лунопард",
        "Стремительный мышастый конь",
        "Стремительный оливковый ящер",
        "Стремительный оранжевый ящер",
        "Стремительный ордынский волк",
        "Стремительный призрачный верховой тигр",
        "Стремительный пурпурный волк",
        "Стремительный рассветный саблезуб",
        "Стремительный розовый крылобег",
        "Стремительный серый баран",
        "Стремительный серый волк",
        "Стремительный синий ящер",
        "Стремительный скакун Альянса",
        "Стремительный туманный саблезуб",
        "Стремительный ящер Раззаши",
        //"Тундровый мамонт путешественника",
        "Турбодолгоног",
        "Черный баран",
        "Черный боевой баран",
        "Черный боевой волк",
        "Черный боевой кодо",
        //"Черный боевой мамонт",
        "Черный боевой медведь",
        "Черный боевой механодолгоног",
        "Черный боевой талбук",
        "Черный боевой тигр",
        "Черный боевой элекк",
        "Черный боевой ящер",
        "Черный верховой талбук",
        "Черный киражский боевой танк",
        //"Шерстистый мамонт",
        "Штормградский скакун",
        "Экзодарский элекк",
        "Ящер Черного Копья",
    };

    private readonly List<string> SlowGroundMountList = new List<string>()
    {
        "Warhorse",
        "Summon Warhorse",
        "Travel Form",
        "Argent Warhorse",
        "Black Hawkstrider",
        "Black Ram",
        "Black Skeletal Horse",
        "Black Stallion",
        "Black Wolf",
        "Blue Hawkstrider",
        "Blue Mechanostrider",
        "Blue Ram",
        "Blue Skeletal Horse",
        "Brewfest Kodo",
        "Brewfest Ram",
        "Brewfest Riding Kodo",
        "Brown Elekk",
        "Brown Horse",
        "Brown Kodo",
        "Brown Ram",
        "Brown Skeletal Horse",
        "Brown Wolf",
        "Chestnut Mare",
        "Dire Wolf",
        "Emerald Raptor",
        "Felsteed",
        "Fluorescent Green Mechanostrider",
        "Golden Sabercat",
        "Gray Elekk",
        "Gray Kodo",
        "Gray Ram",
        "Gray Wolf",
        "Green Mechanostrider",
        "Ivory Raptor",
        "Obsidian Raptor",
        "Palamino",
        "Pinto",
        "Primal Leopard",
        "Purple Elekk",
        "Purple Hawkstrider",
        "Purple Mechanostrider",
        "Red and Blue Mechanostrider",
        "Red Hawkstrider",
        "Red Mechanostrider",
        "Red Skeletal Horse",
        "Riding Kodo",
        "Skeletal Horse",
        "Spectral Tiger",
        "Spotted Frostsaber",
        "Steel Mechanostrider",
        "Striped Dawnsaber",
        "Striped Frostsaber",
        "Striped Nightsaber",
        "Tawny Sabercat",
        "Timber Wolf",
        "Turquoise Raptor",
        "Unpainted Mechanostrider",
        "Violet Raptor",
        "White Kodo",
        "White Ram",
        "White Stallion",
        "Winter Wolf",

        "Боевой конь",
        "Призыв боевого коня",
        "Походный облик",
        "Баран Хмельного фестиваля",
        "Боевой конь Серебряного Авангарда",
        "Белый жеребец",
        "Белый кодо",
        "Бирюзовый ящер",
        "Верховой кодо",
        "Вороной жеребец",
        "Гнедая кобыла",
        "Гнедой конь",
        "Гнедой конь-скелет",
        "Зеленый механодолгоног",
        "Зеленый механодолгоног",
        "Золотистый саблезуб",
        "Игреневый жеребец",
        "Изначальный леопард",
        "Изумрудный ящер",
        "Кодо Хмельного фестиваля",
        "Конь-скелет",
        "Коричневый волк",
        "Красно-синий механодолгоног",
        "Красный конь-скелет",
        "Красный крылобег",
        "Красный механодолгоног",
        "Лиловый крылобег",
        "Лиловый механодолгоног",
        "Лиловый элекк",
        "Лютый волк",
        "Некрашеный механодолгоног",
        "Обсидиановый ящер",
        "Палевый ящер",
        "Пегий конь",
        "Полосатый ледопард",
        "Полосатый рассветный саблезуб",
        "Полосатый саблезуб",
        "Призрачный верховой тигр",
        "Призывание коня Скверны",
        "Пятнистый полярный ледопард",
        "Рыжий саблезуб",
        "Серый баран",
        "Серый кодо",
        "Серый элекк",
        "Синий баран",
        "Синий конь-скелет",
        "Синий крылобег",
        "Синий механодолгоног",
        "Синий механодолгоног",
        "Снежный волк",
        "Стальной механодолгоног",
        "Фиолетовый ящер",
        "Флюоресцирующий зеленый механодолгоног",
        "Черный баран",
        "Черный волк",
        "Черный конь-скелет",
        "Черный крылобег",
    };

    private List<string> RandomWordsNatural = new List<string>()
{
"innate","victorious","shiny","numerous","sophisticated","pumped","private","ambiguous","inquisitive","dependent","dangerous","blue","venomous","loose","irate","responsible","violet","fanatical","windy","pricey","upset","limping","observant","gaping","daffy","trashy","glib","strange","cultural","dark","torpid","scintillating","bumpy","immense","acrid","truculent","abounding","wretched","legal","small","spurious","wasteful","special","safe","wealthy","energetic","courageous","tawdry","tender","several","lewd","shrill","fumbling","physical","future","fallacious","sloppy","creepy","sordid","uptight","mammoth","profuse","daffy","moaning","invincible","vigorous","imaginary","various","jittery","quirky","macabre","colossal","languid","oval","fat","subsequent","terrific","gleaming","murky","absent","nebulous","angry","juvenile","splendid","hard","reasonable","rigid","squealing","chivalrous","delicate","needless","guiltless","pretty","lucky","assorted","broad","miscreant","redundant","neighborly","open","maniacal","glamorous","heavy","informal","unfair","numerous","efficient","previous","warm","warlike","zany","relieved","full","unruly","illfated","bent","deafening","cultured","nonstop","spooky","nervous","kind","parched","evasive","thick","wealthy","wideeyed","abounding","gorgeous","nosy","premium","stupendous","special","federal","hospitable","hungry","colorful","rustic","overconfident","detailed","grey","misty","actually","thinkable","macabre","attractive","unarmed","certain","energetic","windy","conform","check","build","perceive","brush","forget","invest","enjoy","thank","return","tremble","function","inform","cause","target","extract","interpret","become","age","disappear","assign","mix","trust","position","stop","market","listen","stick","burn","rise","tear","tax","explain","aim","decline","ring","pray","transport","save","fund","seize","back","preserve","pull","contain","comply","undergo","continue","spoil","lend","guess","dance","fire","leave","penetrate","comply","commission","draft","test","fade","realize","wear","train","write","arrive","form","stimulate","repeat","appeal","depict","suppress","confess","appreciate","hire","educate","trade","bother","stem","handle","cause","sigh","assist","trap","kiss","correct","feature","head","tax","scream","exert","address","spring","last","close","compensate","race","roll","improve","obey","entertain","cutting","creed","neck","describe","fault","motivation","defend","absolute","detective","decide","generate","muggy","abandon","hard","week","forward","lecture","reserve","recover","bother","marine","creep","breeze","heavy","money","concern","global","door","extension","grow","sip","hover","ostracize","brake","snow","lover","disaster","low","reject","mercy","ball","will","deport","blind","patient","opponent","scrape","architecture","decay","recognize","knock","number","encourage","neck","enhance","teach","relationship","doubt","oil","gravel","continental","elite","burn","reason","pepper","valid","want","pick","absolute","superior","fixture","throw","global","infect","dive","column","elbow","criticism","mistreat","marine","stadium","deadly","forest","miner","directory","computing","publicity","limit","first","breed","touch","publisher","building","daughter","float","kill","fisherman","hemisphere","flag","harbor","ignore","mind","freshman","adjust","fiction","reporter","crackpot","physics","nose","bloody","recommend","goal","safety","wine","wash","equation","sheep","nervous","cattle","look","agent","freight","thesis","captivate","shorts","paragraph","photography","suspicion","bend","voucher","dealer","fever","constitution","just","bang","heavy","dressing","period","try","mathematics","spontaneous","change","entertain","thank","looting","misplace","interrupt","depressed","steam","posture","surround","stool","monster","art","bomb","reasonable","bake","chop","auction","profession","oh","lip","calorie","rebel","fly","cabin","texture","labour","mosque","jurisdiction","deprive","agency","sympathetic","routine","eaux","loyalty","pull","irony","gas","girl","relieve","pat","monk","limit","reactor","source","harmful","wheel","rain","precedent","kick","frozen","hole","compensation","management","match","benefit","convulsion","driver","liberal","choose","insight","develop","ordinary","tactic","notebook","expose","abnormal","block","agile","arrogant","retirement","lineage","vegetation","rough","nationalist","breeze","ant","grief","remember","temple","skeleton","pool","chair","hole","elephant","deviation","law","ambition","carpet","art","basic","grain","pier","blade","fear","thrust","automatic","aviation","product","spider","strength","past","substitute","fibre","charismatic","pride","network","beam","drill","culture","eye","spill","licence","racism","favour","blind","eliminate","vain","housewife","school","sodium","divorce","cheek","rank","promote","sting","executrix","drift","solution","opposite","flower","flourish","instrument","kidnap","valley","compose","resign","sweat","worker","impulse","gain","opinion","thigh","oral","set","subway","auction","tissue","correction","summary","walk","pursuit","suitcase","jacket","length","provide","clothes","lost","dog","reaction","bow","reputation","modernize","metal","boom","gain","output","baseball","count","article","shine","right","ignore","mother","clock","rehabilitation","escape","east","trade","river","meat","depressed","presence","sample","tragedy","dose","lost","movie","disclose","smoke","test","pound","master","habitat","raw","choice","unanimous","bishop","ensure","formation","culture","immune","row","medium","inappropriate","jump","AIDS","critical","hurt","reward","grind","salon","stand","lesson","code","exposure","professional","text","ash","substitute","animal","award","impound","admiration","scratch","reduce","choice","posture","interest","prince","garage","hip","compact","place","rung","deal","pole","repeat","east","slant","colleague","federation","unlikely","dream","loop","cycle","perfect","pour","performer","hostility","pain","linear","photocopy","biscuit","charter","bitter","shelf","decrease","shelter","shelf","drum","manual","retired","divide","vein","radiation","series","jury","mirror","command","forecast","advance","prison","cope","biscuit","Koran","choice","sniff","confine","complete","colorful","calm","virgin","coincide","element","pepper","fixture","seize","night","pardon","pest","homosexual","manner","table","workshop","attachment","shoulder","hesitate","qualified","mutual","place","berry","root","execution","sector","jaw","sacrifice","topple","doubt","random","carry","deadly","train","gloom","advertise","president","constituency","offspring","bare","composer","marine","wife","discipline","carve","outfit","contribution","variant","lover","congress","complication","freshman","minimize","palm","read","sink","cash","dominate","necklace","girlfriend","carrot","yard","structure","word","history","teacher","arrangement","crusade","paralyzed","banana","facade","us","stun","disk","mutter","mistreat","fragment","age","apathy","climate","polish","corpse","highlight","knowledge","reconcile","value","decay","homosexual","hospitality","rich","consider","foundation","inhabitant","mud","entry","lineage","reputation","convict","example","kitchen","refund","knock","deserve","obstacle","development","rock","dry","emphasis","mist","captain","full","chapter","youth","decade","shop","sweater","plaintiff","black","escape","wander","tent","shower","fold","leg","owe","trench","boy","maid","mosque","east","conviction","medieval","despair","red","warning","silk","bang","memorandum","system","able","contemporary","examination","trust","lot","put","chalk","menu","fling","decline","sheep","rotten","accompany","bake","quantity","reserve","peanut","load","law","chance","interactive","corruption","column","vigorous","dairy","heel","triangle","constraint","clean","lose","loss","choose","motif","halt","wire","embarrassment","will","speculate","dictate","grandmother","retired","calm","dominate","spring","jacket","flatware","spit","grave","fun","perception","miner","peasant","biscuit","program","like","heel","telephone","reconcile","stay","runner","brush","demand","detector","representative","index","pedestrian","highway","imagine","intensify","remember","knowledge","abortion","bank","spy","consumer","principle","welfare","biology","mention","colleague","retailer","fist","liver","grip","dribble","crouch","dish","insure","hunting","deprivation","heart","equip","follow","panic","answer","sequence","mass","habitat","frog","burn","champion","privacy","lick","feedback","dominant","faith","disclose","medal","chest","pipe","freighter","pie","censorship","monstrous","expertise","cherry","forget","laser","photography","hierarchy","urine","blame","adventure","radio","drop","seize","analysis","deny","articulate","shell","nationalism","eternal","pier","creed","tragedy","false","wash","brag","emotion","clothes","ministry","circumstance","stage","night","rifle","roll","reproduction","volcano","damn","tap","cream","attic","witness","portrait","liver","rainbow","shelter","round","embark","emotion","inflate","generation","foreigner","artist","suit","turn","incapable","rib","survival","blind","assignment","demonstration","policeman","raid","fashion","trace","golf","distant","provision","fare","incentive","deficiency","trait","bald","timber","yard","please","conspiracy","dominate","monkey","flexitime","trilafon","recast","trinacrian","rnzn","centrical","accusatory","aubrietia","salambria","zoospore","holiness","circumcising","stairlike","manak","antiegotist","nonhistrionic","nonconspiratorial","shii","targums","bullpout","archeologist","grahame","retroserrulate","crunchingness","hypesthesia","unprideful","lucarne","motherliness","coxcomb","bravado","loxodont","dunkard","delimitated","undertwig","timeously","genesis","fenrir","outbanned","hub","panetire","daubigny","anchiale","overwetly","berhymed","pseudospiritual","thundershower","prologuizing","antimonic","brumal","distillable","restinging","precure","persuadableness","plagiaristic","hypericum","psykter","feverously","yokosuka","agape","strapless","lopatnikov","reobserve","exocrine","strongroom","antisensitivity","yodle","changeling","duper","conventional","interdigitate","carel","intonating","marlite","postsurgical","uncitizenlike","preindulge","nonsensible","gooseneck","parqueted","phyma","esconson","unmobilised","unvisionary","calvinistic","cosmo","spurrite","vasopressin","almug","predisputation","rhenium","backspaced","vaguio","rgt","puddly","predictory","auto","inclosing","resolvableness","kaapstad","sweepiest","animalising","cicatrised","gish","thereupon","napoleon","supremo","backache","designatory","salubriousness","thundering","fibrin","unreduced","inadmissible","blacksburg","farcetta","shema","muscovite","carbide","optional","nonassonance","subgovernorship","douschka","undo","antiradical","banshie","monocled","value","quoin","spirillum","dottiest","noncorroborative","conversazioni","haberdasher","pablo","outstealing","nonbanishment","educationist","unseized","coincident","radiation","uranian","boatwright","defrayable","dermographic","refractory","continuatively","marinetti","predetrimental","coeliac","boarishly","halacha","filigreed","pewee","reseizure","flattest","multilobe","scythian","epilithic","hindooism","acidotic","cocomat","materializer","contra","carper","rhene","giglot","nicknaming","powan","queasier","dispiteousness","madtom","scoldingly","glassware","deficiency","betweenness","telia","nonevincible","where''er","unrecallable","nyanza","bless","direfully","objectivism","unintroverted","unbestowed","brouhaha","hardin","purchase","triangled","dori","outguess","panay","submanager","eurus","inspiringly","apologising","unmannered","undispensable","intentness","vespertide","vow","bialystok","vicarial","diet","alene","noninflammableness","neuropsychiatrist","paleogene","fledgy","restock","taillessly","fortepiano","philosophized","wastepaper","envisagement","bondmaid","biblicist","phonologist","unequability","inimicality","arcesius","fatimid","upthrew","untruthfulness","dzyubin","recompiling","predevour","undermediator","unforgone","jejune","lagash","athenaeum","tug","vedda","outate","intolerantly","invasive","nonaccent","sofiya","nonacceptation","forgetive","ramayana","pignut","prologuize","montage","malacophilous","plaza","bisectrix","libellously","grinningly","blazing","nonpromiscuous","subrogated","jongleur","interprotoplasmic","cyphellate","shammas","subpermanent","dankly","polyembryony","whigmaleery","unlengthened","intermix","aerosphere","christening","comtesse","hussar","paratroops","renitency","goulash","shadelessness","nonlabeling","noncorporate","prefraternal","sarkis","nonfruition","bellona","burke","overagitation","rosiny","lawrenceville","noncoperative","frivolously","raja","dtl","importable","marsupialising","lobber","unromanticised","dopiest","vernier","preexception","spacesuit","exopoditic","britzska","beneficiate","overtiring","aloysius","fundament","distress","bolar","misshipment","bearable","misfire","nemathelminth","unionise","septivalent","punchiest","odelsting","nonradiant","gonadotrope","globulin","uni","wrack","interposal","gtingen","outtravelling","echidna","reconvict","pressurise","freddy","nonproblematical","volitive","unhinderable","censor","malanga","barbarossa","anthropomorphised","apsidiole","unadducible","nonrecourse","osteal","synchronoscope","gibran","stichomythia","flanch","namesake","plushness","tankship","tenebrious","embracement","tetradymite","multistage","oaf","eurylochus","renewer","greenbottle","misspeaking","commendable","clavicytherium","mutineer","fallalishly","dependency","caulicolous","hasmonean","wadna","logo","diethylaminoethanol","pauperiser","lustfulness","polysulfonate","godlike","abaca","waterfront","astringency","inconsonance","justifyingly","cervix","undebilitating","stenographist","cardplayer","allonymous","couching","lincolnton","transshipping","unredacted","insignificantly","formably","undismissed","gravely","persuasive","floating","konev","puntillero","justiceless","pipping","sacrosanctity","gastrocnemii","regorge","triglyph","trengganu","tabouret","masterdom","rha","marvelously","catholic","comitial","headset","unmalleability","autobahnen","dudgeon","congratulant","menomini","interfraternal","ethics","catheterizing","nutmeg","nonkosher","traveler","motorboat","carousing","sarabande","nobel","aguish","alpine","access","unspeakableness","synchronoscope","snowbound","accipitral","nonevaporative","reheat","devoir","amount","endometria","tubulating","hymner","chousing","formatted","transchannel","garage","snoopiest","folic","hopelessly","creaky","outsin","caesuric","hippomedon","personified","nongerminating","cavilled","acidity","nondeclivitous","writhing","thermidor","apotropaic","muggins","admonish","overgracious","unsubmersible","augustales","amalthea","phlebothrombosis","unimporting","shrewishly","antisiccative","underseated","refrain","trioecious","imperativeness","trimolecular","maryjo","syllabizing","magaziny","hydrator","fermentable","adat","lambasting","dryas","forestial","haggle","viaduct","catlin","kempy","uncurved","attain","kramatorsk","windle","fatima","unwily","deckpipe","carotin","exilable","archelaus","literaliser","technicolor","folliculate","faintheartedly","bubo","fortunateness","atomistically","anteportico","dominicale","rammohun","pongee","argeiphontes","desaminase","preternaturally","cognation","xanthippe","woolstapling","glycaemic","subballast","equestrian","underlier","aparri","gonadal","escondido","aerobic","unprudential","abscising","nondescribable","kimberly","unmoving","imputable","jaculate","preintimating","telega","billy","triphibian","kalisz","polypoid","tetrahedral","washaway","klagenfurt","everlasting","predelegating","nephological","septifragally","neurasthenically","ludlow","unfunny","diffraction","pish","expiree","kerguelen","allotropical","canceller","holbein","hydrotherapist","depicter","baptistery","landowner","religiose","empanelling","abhorring","cuticula","monad","astigmatometer","septivalent","trumpetwood","synagogue","untame","pewage","reinstallment","glary","juxtaposition","administratrices","bryophytic","extensibility","unattainable","reornament","pennilessly","retelegraph","trevette","overburdensome","likeable","sabbatarian","recercel","unweave","bajada","depilated","tularemic","indagative","valuer","preinaugurate","edemata","descalate","tributaries","commie","foresaw","rehearsable","panelling","nonsynchronical","argonaut","flimsiness","fagoting","orthographise","jeepers","callant","unstrengthening","keratotomy","barkantine","viviparism","lancaster","declutch","diphonia","quaggiest","devadasi","forejudged","justified","overhaughtily","imprecated","sludgiest","emmer","mahomet","stagyrite","outpitied","adorno","tasajillo","elaboration","fenrir","platelayer","descendibility","astragal","dmitri","angara","spearman","herisau","netaji","philanthropize","enregister","preceremony","falsification","quokka","allow","anility","initiating","taisho","nondiplomacy","sanctitude","tropaeolum","kktp","wilhelmshaven","magmatism","kenyan","escalate","intellect","teratology","weeda","reluct","aquiver","formulated","unbribable","protandrously","predemand","frenchification","commode","reprography","meerschaum","contralto","feignedness","unendangered","marabout","megacephalic","lakin","containerization","churchwomen","consequently","cathodoluminescent","picaresque","judaea","titrating","nonburnable","squashiness","fogy","hormisdas","modiolar","overcull","atomize","nga","skouth","adelina","preintimate","cosmologist","ventriloquism","uncharged","winch","awestricken","sacramentalism","nonveracity","colitis","subinfluent","allocate","brumby","cidney","overliberalizing","stitch","deciduae","foshan","permanganate","microlecithal","primaeval","maggiore","bioelectricity","derivational","discourteous","freddy","nonjuridic","resymbolizing","snooker","bough","jocularly","nonincarnate","recuperative","apologizer","auditoria","foveolar","savor","regularization","godhood","batteries","unpapal","nondistillable","annfwn","requiem","submicroscopical","bandore","tintinnabulary","agrmens","cringle","legalistic","uncleaned","marcellinus","dogbodies","aphacia","puddling","nonconstruable","tapaculo","eudemonism","cytopathologically","rackety","wouk","toeshoe","rememorized","garring","describer","regilding","putridly","sasebo","abolitionised","farmerette","learchus","ungrooved","demotion","jenkintown","resensitize","periling","pacificism","fidgety","overtrust","interpolative","reliberating","myxomas","depressed","skunk","unice","aepyornis","lustrum","nonaccidental","parametric","forensic","overpowerful","gilguy","unbelied","cantharidal","versine","sulfatize","banter","hyperspeculative","bestow","giulietta","estopping","quadruped","restimulating","digestibleness","aggeus","lollardism","puparia","subpharyngeal","pseudolabium","scorekeeping","untuning","overdone","ralline","coigning","proslaver","democratically","demount","nonruinable","tanistry","retractibility","unenslaved","replace","ironhandedness","sisterly","grazier","avlona","accommodation","clytaemnesra","pilate","surrey","progressivist","hydraulic","flippantness","carvacrol","indomitably","megaron","gautama","anticly","alboin","tetraplegia","biquadrate","farewell","subdeaconate","evaporometer","ethlyn","bassist","aalii","hobble","sandalwood","semipastoral","goetz","unmedaled","tortuous","spiralling","saragat","nucleoplasmatic","overchildish","plumbable","pharmacopoeial","noneconomical","compete","demagogy","academical","uncarolled","nuaaw","arithmetic","unraveller","stagnating","marburg","venerer","rowdyishly","diamine","facially","chrysaor","sidelines","cascara","emily","lamebrain","mesophilic","tahsildar","ibagu","luxuriousness","pruitt","polack","lapboard","refracturing","irgun","hooves","manes","extemporarily","abenezra","lifter","prerecited","menacer","only","theocratically","coaldale","cartridge","saare","tetrazzini","stephanie","microbicidal","frunze","congregational","hexadecane","atticist","consolute","hedgeless","lightlessness","lowbrow","fragrancy","proprivilege","dispensible","tehillim","sluttishness","houseroom","hamelin","betaken","infanticidal","noninclusive","exposer","uncapitalised","isbn","unhabitual","halolike","indecipherable","dolphinfish","scripless","jet","intubation","elgan","ribaldly","seoras","azoted","matthyas","inflorescent","siltstone","reacknowledgment","pretransportation","sidewheel","balch","mealies","edgingly","nonretractile","gruyre","enforceability","billman","caracal","financed","rasa","catechumenical","subdelegate","biennial","peduncle","mopboard","nonblockaded","installant","stumpiest","gastroenteric","adversative","laying","somberly","autochthonism","lethally","fluoride","flax","fallibilism","noritic","woolliness","immaterializing","cleostratus","decern","anna","charcoaly","adios","cooley","sin","undeformed","bootlegged","unparticularizing","zilch","improvised","ghent","beachie","embody","subcavity","taxon","unliked","shammas","semichemical","maxillaries","congeneric","unsordid","graphalloy","brasov","spt","outdared","astrogator","cactuses","dissuasiveness","stylizer","minority","tetramerism","rejective","munsif","creepy","commender","tetrahedral","yobbo","kop","thermometry","singingly","reunite","nutmeat","phonier","tawpy","unsaturate","suffocating","erysipelas","compatriotism","quadricyclist","harmonist","occasionalism","undomestically","mezereon","semigod","lipaemic","subdepressed","branch","yell","sister","guitar","zipper","question","lean","moaning","impartial","trains","furtive","nervous","workable","promise","miscreant","bath","nasty","cast","ultra","vacuous","fill","respect","door","stomach","detail","tasteful","general","maddening","injure","side","greet","brown","leather","noxious","refuse","smart","sense","lyrical","blot","fetch","sniff","gullible","bushes","expect","forgetful","humor","scatter","queue","incompetent","structure","five","argue","understood","corn","early","jazzy","chief","satisfying","addicted","relieved","bike","cent","flippant","shrug","connect","electric","piquant","unfasten","subsequent","horn","spot","fine","cautious","alike","store","parallel","flimsy","extrasmall","cynical","lowly","typical","clip","desire","nimble","ban","ordinary","describe","fair","color","spade","avoid","exuberant","trade","basket","government","smelly","numberless","ruthless","entertain","elite","remove","scarce","hospital","basketball","yummy","bubble","chunky","wobble","cellar","year","reminiscent","cold","perform","flood","lazy","expansion","past","hope","edge","coal","ajar","live","abusive","bashful","alert","tremendous","connection","husky","trucks","royal","hook","gather","motionless","food","fasten","educated","plausible","meddle","fuel","baseball","slip","rainy","jealous","unadvised","pets","toad","serve","correct","bulb","poor","reject","office","visit","labored","peep","cactus","disarm","plant","nebulous","spiffy","plot","fierce","mint","evanescent","yawn","believe","calculating","judicious","gaudy","dolls","secondhand","grape","attempt","necessary","agreeable","comb","hallowed","homely","thankful","approval","follow","memory","mass","account","aggressive","heavenly","stingy","influence","decisive","handy","dinosaurs","impossible","irritate","zebra","try","old","punishment","wholesale","name","guess","horses","hilarious","obsequious","historical","fool","obeisant","oranges","accessible","afternoon","bells","army","empty","gaping","second","view","hulking","scattered","wide","pleasure","disagree","shivering","harm","plucky","grip","fascinated","duck","elastic","cat","trail","murky","tub","serious","wall","regret","telling","children","minister","milky","broad","amount","pizzas","escape","certain","straw","funny","writer","cows","nerve","mundane","messup","iron","wrestle","loutish","pollution","collect","expand","cap","little","stem","thinkable","cloth","button","nose","stocking","airport","rob","cherry","bounce","silver","exchange","whirl","bruise","melt","painstaking","position","gamy","possess","fertile","average","count","obsolete","disgusting","drunk","month","pretty","cart","lumpy","stream","harsh","thirsty","zesty","dam","honey","victorious","verse","deafening","sign","deeply","nonstop","assorted","obese","plain","dead","rude","zephyr","van","graceful","houses","thundering","divide","belligerent","tease","chemical","caption","boorish","trite","heady","aware","worried","glistening","maniacal","rake","unique","wistful","wellmade","representative","coordinated","extend","hurt","floor","cave","bag","mask","thin","paste","known","square","lush","peck","burly","ashamed","pump","voiceless","mice","mindless","week","fancy","subdued","disturbed","search","exotic","rail","rabbits","need","monkey","tame","tender","two","momentous","huge","pancake","redundant","kiss","literate","grateful","detailed","pause","tongue","teeny","moan","clean","worm","condition","delicious","doubtful","discovery","trace","birth","boot","destruction","own","thunder","include","hang","veil","wool","different","hour","leg","race","freezing","watery","giants","weather","hill","thread","bolt","compare","parcel","alive","knock","bear","impolite","preserve","drag","double","tranquil","listen","strip","determined","hushed","warn","unsuitable","adamant","distribution","hateful","clam","book","crib","sloppy","competition","greasy","thaw","swing","learn","toy","alarm","care","lethal","rainstorm","part","wound","cycle","coat","ten","attack","terrible","argument","chalk","bomb","acidic","trick","savory","diligent","aberrant","smile","effect","icy","income","statuesque","bury","crazy","possessive","military","roasted","nine","macho","announce","supreme","thick","brush","taboo","tenuous","spicy","wonder","scandalous","gun","rustic","discussion","suggestion","arrogant","trust","minor","space","profuse","giraffe","approve","behave","violent","glamorous","spare","meat","deadpan","ethereal","wrong","voyage","bad","omniscient","hypnotic","hideous","alcoholic","chicken","uncovered","encourage","jog","like","onerous","abrupt","befitting","soak","overjoyed","alluring","dangerous","confess","greedy","surround","birthday","goofy","big","notice","irritating","employ","limping","copy","toes","functional","muddled","hat","unusual","visitor","attend","call","ignorant","lame","pray","highfalutin","grass","amusement","foot","scold","teeth","drown","snotty","able","somber","pretend","auspicious","waste","tangy","kittens","knotty","ink","chase","pastoral","sneeze","gleaming","reproduce","porter","steer","idiotic","tomatoes","oven","upbeat","ready","plastic","nauseating","fresh","lewd","tug","rampant","egg","lettuce","brick","romantic","coil","peel","pour","report","mouth","beef","right","sudden","ablaze","fence","grab","fang","previous","damage","fear","star","prepare","governor","wrap","precious","unbiased","seemly","preach","stranger","succeed","stick","sweater","reply","taste","songs","nation","juice","interrupt","slave","tank","attraction","noise","partner","march","fish","mind","temporary","responsible","silky","snakes","fairies","worry","vein","tired","plate","ruin","breath","ball","condemned","supply","nippy","imperfect","measure","language","cute","dock","guarded","joke","filthy","inject","interesting","extralarge","sound","clammy","ripe","quarrelsome","special","brave","cloudy","prickly","squalid","dime","jeans","one","bumpy","anger","marry","trashy","jumpy","shape","concern","lying","smooth","innocent","roomy","versed","sad","acid","cowardly","incredible","striped","answer","invincible","illustrious","yak","way","sore","desert","summer","pine","attractive","skillful","plantation","wiggly","bone","plan","afford","paper","scene","combative","throat","stimulating","astonishing","number","uttermost","texture","tacit","bake","substantial","elegant","internal","cobweb","repeat","imported","aquatic","whole","level","enjoy","massive","repair","teenytiny","blink","confused","black","four","wary","head","stove","quicksand","tick","bewildered","female","godly","morning","reward","society","lamp","instrument","practice","successful","fast","separate","offer","record","feigned","mailbox","ship","longterm","cagey","frightening","interest","humorous","ossified","conscious","stiff","glossy","request","deceive","start","observation","creator","fat","sin","grouchy","uncle","carve","murder","screeching","moldy","industry","daily","annoyed","sharp","middle","business","man","buzz","boat","move","annoy","fearful","tree","tawdry","driving","pedal","surprise","paint","lovely","planes","punish","upset","wave","lively","placid","consist","unknown","first","form","push","fire","story","careless","profit","hobbies","recognise","soggy","modern","orange","repulsive","cluttered","whispering","toothbrush","aloof","pass","unbecoming","sink","float","program","pat","tendency","babies","hop","woozy","dad","wrathful","male","madly","aftermath","complex","payment","risk","bang","dull","quiver","lacking","available","toothsome","underwear","shaggy","wipe","bird","truthful","changeable","wilderness","apparatus","ahead","hard","distinct","boundless","symptomatic","station","hungry","wanting","giant","judge","water","nail","wrist","trot","yoke","faithful","squeak","lavish","marked","slimy","club","gainful","friendly","acoustic","wandering","pig","wine","guiltless","applaud","adjoining","juvenile","pies","lighten","land","material","curious","moor","sleep","bead","decay","crown","person","thing","bridge","nostalgic","billowy","writing","suspect","strong","animated","sheep","soda","ski","smell","charge","decide","transport","amused","death","quiet","potato","shallow","enter","tremble","truck","excite","cool","party","reason","measly","discover","rice","majestic","young","even","grain","stretch","tickle","quickest","lopsided","outgoing","direction","found","rare","scarf","sock","hose","prefer","industrious","flame","plough","cut","analyze","front","thrill","offbeat","watch","endurable","replace","defective","scary","deserve","title","verdant","true","crash","knowledge","cook","righteous","adventurous","zippy","ubiquitous","spectacular","silly","furniture","impress","loose","useful","snake","rub","notebook","makeshift","card","grubby","shave","overconfident","fantastic","therapeutic","carpenter","thank","needless","bouncy","realize","eminent","witty","bump","unite","enchanted","waggish","kick","arithmetic","tearful","hysterical","vest","kindly","reaction","pathetic","cow","cruel","normal","battle","scrub","loss","gentle","stare","box","angry","plug","bloody","adhoc","wait","envious","picture","hunt","amusing","sedate","railway","drop","vast","board","girl","berry","achiever","example","spiky","seat","silent","courageous","same","friends","languid","slim","joyous","fireman","charming","turkey","fade","beg","belong","fact","glue","zoo","chin","distance","jaded","group","helpful","command","married","talk","low","mine","arm","bottle","splendid","rural","pocket","boiling","safe","rapid","file","grieving","zonked","delirious","best","horrible","harmonious","harass","clap","shade","acoustics","quartz","purple","living","abounding","uppity","malicious","stuff","rest","ray","hug","tricky","reflect","untidy","gaze","jar","root","thoughtless","delightful","lock","tooth","wideeyed","lumber","woman","short","overrated","maid","mushy","debonair","advise","draconian","gigantic","legal","free","muscle","chop","base","cats","smoggy","peaceful","farm","infamous","sidewalk","fluffy","violet","earthy","sheet","knife","education","barbarous","tense","pot","nondescript","abashed","brass","sable","present","nest","offend","rough","complain","whistle","holistic","waiting","wealth","valuable","scribble","boy","jail","thumb","things","healthy","tall","scrape","dress","daughter","evasive","better","flavor","ambiguous","cattle","knowing","song","agonizing","improve","team","cause","cars","trouble","bizarre","ants","overflow","lip","bit","power","picayune","fixed","frail","rinse","puffy","puzzling","playground","claim","existence","cumbersome","relation","pen","puncture","encouraging","heal","reflective","snore","ring","dog","mature","stay","wellgroomed","scarecrow","nod","juggle","kaput","trap","bikes","friction","twig","donkey","womanly","shirt","devilish","optimal","plane","beautiful","mute","concentrate","feeble","type","spark","telephone","boring","super","treatment","save","ambitious","carriage","purring","enthusiastic","fall","cemetery","fabulous","flaky","dapper","nappy","petite","dry","mountain","warm","line","burn","wriggle","drum","magenta","accept","admit","wet","wax","waves","shocking","pack","digestion","difficult","bedroom","idea","key","knit","scared","spotless","identify","unaccountable","scintillating","want","secretive","talented","confuse","girls","crooked","hole","vessel","quirky","discreet","damaging","zinc","butter","sordid","heartbreaking","list","delight","walk","illfated","science","develop","economic","aspiring","receptive","cure","uptight","tightfisted","disastrous","help","decorous","frighten","choke","eye","damaged","agreement","jelly","blush","kettle","interfere","legs","prose","press","stage","rot","cake","tin","sick","spiteful","tip","earthquake","snow","tap","productive","neighborly","frequent","knot","pale","wash","panicky","pop","smash","motion","handsomely","adjustment","throne","strange","remarkable","experience","chivalrous","skip","wind","memorize","subtract","open","noiseless","new","bow","honorable","reign","debt","fragile","threatening","end","amuck","familiar","wild","misty","doll","psychedelic","oil","church","fluttering","tie","vase","building","tight","arrange","ladybug","cheerful","unnatural","amazing","bare","cheese","cross","unable","pear","rhythm","curl","act","stone","abrasive","domineering","chess","camp","psychotic","wing","educate","sun","curve","note","fearless","wry","sweet","insect","unhealthy","authority","mug","accidental","imminent","wakeful","creature","crime","communicate","crack","birds","sturdy","chilly","destroy","fanatical","erratic","handsome","didactic","flock","boast","lie","elbow","event","kill","abundant","pinch","unused","far","simple","squeal","absorbed","table","sincere","volatile","axiomatic","various","rock","close","temper","useless","tire","capable","left","tidy","mere","order","rule","next","deep","perfect","soap","imaginary","hum","pan","fortunate","car","grandmother","dreary","ignore","actor","stroke","late","action","instinctive","ice","pushy","long","homeless","efficient","loud","entertaining","dislike","men","dinner","manage","poison","stupid","coherent","powder","loaf","object","relax","wail","dysfunctional","pie","poke","crayon","behavior","crowded","colour","receive","rod","suspend","spring","creepy","brawny","quill","divergent","tumble","unwritten","shy","sigh","flight","degree","weak","prick","rain","town","racial","excellent","tasteless","rabid","disagreeable","foolish","arrest","delicate","test","eatable","whisper","merciful","label","salt","keen","questionable","invite","spiders","art","theory","scientific","error","badge","red","war","remain","play","sticky","rush","muddle","vulgar","gorgeous","clumsy","chew","spoil","excuse","knee","wonderful","cabbage","null","depressed","chickens","heap","market","air","wheel","thought","uneven","gusty","wood","lonely","embarrass","price","ticket","can","famous","meek","superficial","oval","brother","permit","peace","erect","dare","kindhearted","attract","paltry","increase","elfin","sea","consider","weigh","sail","ill","foregoing","stereotyped","tiger","obtainable","jump","mist","laughable","white","trees","demonic","careful","inquisitive","cultured","swim","expert","remind","absurd","marble","sparkling","outstanding","bat","scare","continue","woebegone","rabbit","giddy","illinformed","explode","eager","deranged","credit","colorful","crow","hospitable","copper","beam","borrow","signal","spy","pest","public","melodic","suffer","magical","scratch","bustling","intelligent","boundary","dramatic","mountainous","alleged","wasteful","noisy","unlock","tough","terrific","rely","blackandwhite","scent","welcome","recondite","cream","absorbing","invention","parched","quizzical","soothe","cover","clear","liquid","obscene","deserted","longing","equal","nutritious","women","groovy","cannon","yellow","cloistered","blushing","light","bucket","outrageous","callous","hesitant","laborer","equable","expensive","ceaseless","quack","bore","size","advice","oatmeal","stew","animal","purpose","jagged","sweltering","squealing","sulky","shiver","place","shop","drawer","carry","handle","rich","popcorn","yielding","tramp","religion","crook","quick","decorate","gold","brief","imagine","desk","few","painful","depend","shoes","drab","shock","elated","probable","doctor","support","selective","sleet","voracious","icicle","farflung","silk","zoom","garrulous","frog","high","committee","crate","decision","direful","ludicrous","rambunctious","selection","abhorrent","house","cheap","stop","aboard","knowledgeable","ocean","touch","mean","solid","periodic","engine","craven","word","observant","reduce","gratis","jobless","nifty","tow","futuristic","cracker","good","aunt","meeting","mark","disapprove","mighty","tempt","recess","pink","country","lucky","arrive","naughty","flashy","real","absent","tacky","protest","half","hapless","retire","faint","fail","weight","resonant","illegal","robin","sophisticated","hanging","exist","love","clever","helpless","glow","grotesque","toothpaste","awful","defeated","whimsical","earsplitting","zealous","weary","berserk","island","gray","glib","school","acceptable","abnormal","efficacious","kitty","geese","learned","guarantee","comparison","crowd","haunt","wicked","great","eight","zip","organic","fry","cough","quarter","appliance","limit","straight","hammer","macabre","wren","faded","dazzling","immense","dusty","whip","airplane","common","division","welltodo","naive","adaptable","dirty","finger","xray","appreciate","regular","resolute","ruddy","calendar","six","towering","show","snails","books","hate","insidious","pencil","road","tedious","stain","concerned","breakable","matter","mate","travel","pickle","receipt","rotten","force","wooden","warlike","penitent","humdrum","lunch","cheer","embarrassed","curtain","statement","overwrought","dependent","cushion","check","flawless","soup","remember","fit","drip","complete","run","breezy","nice","slow","beneficial","harbor","turn","shrill","route","introduce","poised","suck","panoramic","kneel","simplistic","brainy","ugliest","bait","locket","holiday","squash","bent","earn","unequal","appear","oafish","plants","please","private","deer","grumpy","last","brash","sleepy","snatch","wander","apologise","sky","wacky","tour","likeable","phobic","value","ducks","neck","staking","riddle","fold","youthful","hover","large","pet","suppose","cable","quaint","snail","canvas","volcano","day","heat","unarmed","cup","inconclusive","history","hair","spray","hands","opposite","glove","stale","baby","meal","flowery","used","fix","yard","balance","son","wretched","actually","abandoned","print","anxious","exciting","full","descriptive","compete","moon","shiny","pail","jellyfish","whine","self","swift","rescue","powerful","minute","grin","hardtofind","miniature","deliver","camera","fuzzy","ear","eggs","pipe","obnoxious","colossal","beginner","earth","curly","train","excited","precede","flower","stitch","abstracted","stir","angle","vanish","screw","daffy","mitten","wish","letter","bored","hall","addition","narrow","dispensable","jumbled","false","haircut","feeling","rat","small","energetic","switch","wink","chubby","grey","utter","obey","neat","capricious","frightened","dream","nutty","blueeyed","point","nut","apparel","paddle","snobbish","mom","wreck","bathe","hydrant","unpack","future","grease","dogs","trousers","dashing","eyes","money","apathetic","pigs","owe","tent","rhetorical","premium","smiling","cherries","stamp","produce","lackadaisical","incandescent","wiry","glass","admire","aromatic","sort","thoughtful","childlike","venomous","vague","channel","bitesized","squeamish","servant","frame","eggnog","troubled","utopian","radiate","adhesive","round","unkempt","defiant","stormy","rejoice","change","circle","observe","flash","clover","dust","field","gate","gifted","seed","swanky","unruly","soft","range","heavy","seal","spill","cheat","tan","load","toe","spotted","harmony","detect","magic","steady","tax","terrify","puny","near","tail","tested","shaky","back","string","flesh","dance","shame","exultant","curved","sugar","polish","rightful","explain","quixotic","closed","worthless","add","drain","property","sponge","sassy","intend","pin","gabby","pick","cub","protect","materialistic","furry","comfortable","ragged","permissible","bed","cuddly","hellish","library","health","uninterested","lick","prevent","sack","miss","burst","use","obtain","scream","exercise","belief","boil","puzzled","icky","milk","medical","shake","suggest","important","raise","multiply","slap","abortive","cooing","slope","dear","selfish","flat","machine","doubt","border","odd","room","fly","awesome","abject","twist","sparkle","annoying","frantic","face","meaty","substance","unit","calm","friend","night","squirrel","hurry","squeeze","oldfashioned","dirt","guide","bitter","control","overt","fruit","occur","itchy","cakes","possible","beds","design","enchanting","quince","fowl","voice","secretary","skinny","grandiose","laugh","yarn","lace","shelf","classy","scorch","vivacious","pricey","natural","window","crush","vegetable","post","torpid","abaft","match","itch","political","sprout","halting","basin","delay","mammoth","brake","fallacious","faulty","company","raspy","flowers","enormous","cry","frogs","calculator","nonchalant","jewel","strap","unequaled","wire","roll","bawdy","cooperative","letters","step","festive","loving","inexpensive","undress","exclusive","ancient","irate","vigorous","reading","testy","territory","curvy","drink","celery","flag","tray","automatic","adorable","unwieldy","steam","tangible","marvelous","spooky","groan","tasty","look","activity","wealthy","ugly","lunchroom","parsimonious","mix","rifle","treat","many","sip","secret","phone","caring","shelter","afraid","disillusioned","jolly","mixed","invent","lamentable","coach","polite","damp","home","arch","calculate","blue","linen","proud","mellow","rebel","vacation","vengeful","hollow","steadfast","join","skate","agree","slippery","hand","shut","fog","winter","suit","finicky","busy","advertisement","downtown","hissing","bleach","numerous","rings","wrench","bless","messy","ritzy","teaching","work","class","highpitched","awake","horse","acrid","tiny","hot","elderly","dark","willing","queen","easy","mysterious","growth","afterthought","gruesome","sour","license","obedient","yam","hurried","sofa","accurate","magnificent","green","quilt","nosy","lake","salty","allow","blow","steep","luxuriant","mend","shoe","perpetual","sneaky","rhyme","challenge","north","rigid","provide","punch","chance","blind","ground","grade","reach","grate","disgusted","pumped","robust","superb","park","seashore","breathe","flow","flagrant","blade","happen","melted","fumbling","dizzy","strengthen","insurance","ask","spoon","happy","film","fretful","spell","synonymous","welloff","dynamic","rate","attach","oceanic","blood","grandfather","scale","undesirable","current","mother","jam","windy","innate","habitual","settle","instruct","guard","wise","amuse","crawl","contain","umbrella","ghost","launch","foamy","bright","satisfy","vagabond","flap","physical","sisters","aboriginal","fork","sand","scissors","stupendous","broken","sticks","standing","truculent","saw","passenger","aback","tiresome","page","metal","needle","examine","share","tart","release","bite","smoke","system","spiritual","juicy","bell","ratty","glorious","abiding","skirt","volleyball","third","coast","collar","succinct","bee","spurious","unsightly","steel","river","guttural","needy","spotty","scrawny","three","toys","protective","time","pleasant","pointless","top","fax","roof","kind","pull","zany","jittery","development","disappear","mourn","skin","trip","inform","street","impulse","crabby","return","rose"
        };

    private readonly List<string> FrameNamesPart3 = new List<string>()
        {
"Frame","1","frame","2","Button","3","button","4","Btn","5","btn","FRAME","BUTTON","BTN","6","UI","ui","Ui","7","8","Addon","9","addon","10","ADDON","11","Addon","12","Interface","interface","INTERFACE",
        };

    private bool ScanMountListsForKnownLUAlaunched;
    private void ScanMountListsForKnownLUA()
    {
        System.Threading.Tasks.Task.Factory.StartNew(() =>
        {
            if (!ScanMountListsForKnownLUAlaunched)
                return;
            if (!ScanMountListsForKnownLUAlaunched)
            ScanMountListsForKnownLUAlaunched = true;
            foreach (var mount in SuperFastFlyMountList)
            {
                if (KnowMountLua(mount) && !KnownSuperFastFlyMountList.Contains(mount))
                {
                    KnownSuperFastFlyMountList.Add(mount);
                    print("" + mount + " добавлен в список KnownSuperFastFlyMountList");
                    logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownSuperFastFlyMountList");
                    sleep(10);
                }
            }

            foreach (var mount in FastFlyMountList)
            {
                if (KnowMountLua(mount) && !KnownFastFlyMountList.Contains(mount))
                {
                    KnownFastFlyMountList.Add(mount);
                    print("" + mount + " добавлен в список KnownFastFlyMountList");
                    logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownFastFlyMountList");
                    sleep(10);
                }
            }

            foreach (var mount in SlowFlyMountList)
            {
                if (KnowMountLua(mount) && !KnownSlowFlyMountList.Contains(mount))
                {
                    KnownSlowFlyMountList.Add(mount);
                    print("" + mount + " добавлен в список KnownSlowFlyMountList");
                    logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownSlowFlyMountList");
                    sleep(10);
                }
            }

            foreach (var mount in FastGroundMountList)
            {
                if (KnowMountLua(mount) && !KnownFastGroundMountList.Contains(mount))
                {
                    KnownFastGroundMountList.Add(mount);
                    print("" + mount + " добавлен в список KnownFastGroundMountList");
                    logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownFastGroundMountList");
                    sleep(10);
                }
            }

            foreach (var mount in SlowGroundMountList)
            {
                if (KnowMountLua(mount) && !KnownSlowGroundMountList.Contains(mount))
                {
                    KnownSlowGroundMountList.Add(mount);
                    print("" + mount + " добавлен в список KnownSlowGroundMountList");
                    logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownSlowGroundMountList");
                    sleep(10);
                }
            }
            ScanMountListsForKnownLUAlaunched = false;
        });
        
    }

    private void ScanMountListsForKnown()
    {
        foreach (var mount in SuperFastFlyMountList)
        {
            if (SpellManager.ExistSpellBook(mount) && !KnownSuperFastFlyMountList.Contains(mount))
            {
                KnownSuperFastFlyMountList.Add(mount);
                print("" + mount + " добавлен в список KnownSuperFastFlyMountList");
                logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownSuperFastFlyMountList");
                //sleep(10);
            }
        }

        foreach (var mount in FastFlyMountList)
        {
            if (SpellManager.ExistSpellBook(mount) && !KnownFastFlyMountList.Contains(mount))
            {
                KnownFastFlyMountList.Add(mount);
                print("" + mount + " добавлен в список KnownFastFlyMountList");
                logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownFastFlyMountList");
                //sleep(10);
            }
        }

        foreach (var mount in SlowFlyMountList)
        {
            if (SpellManager.ExistSpellBook(mount) && !KnownSlowFlyMountList.Contains(mount))
            {
                KnownSlowFlyMountList.Add(mount);
                print("" + mount + " добавлен в список KnownSlowFlyMountList");
                logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownSlowFlyMountList");
                //sleep(10);
            }
        }

        foreach (var mount in FastGroundMountList)
        {
            if (SpellManager.ExistSpellBook(mount) && !KnownFastGroundMountList.Contains(mount))
            {
                KnownFastGroundMountList.Add(mount);
                print("" + mount + " добавлен в список KnownFastGroundMountList");
                logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownFastGroundMountList");
                //sleep(10);
            }
        }

        foreach (var mount in SlowGroundMountList)
        {
            if (SpellManager.ExistSpellBook(mount) && !KnownSlowGroundMountList.Contains(mount))
            {
                KnownSlowGroundMountList.Add(mount);
                print("" + mount + " добавлен в список KnownSlowGroundMountList");
                logs("[ScanMountListsForKnown] " + mount + " добавлен в список KnownSlowGroundMountList");
                //sleep(10);
            }
        }

        if (Skill.GetValue(SkillLine.Engineering) >= 300)
        {
            if (SpellManager.ExistSpellBook("Flying Machine") || SpellManager.ExistSpellBook("Ветролет"))
            {
                if (GetLocale.Contains("en"))
                    KnownSlowFlyMountList.Add("Flying Machine");
                if (GetLocale == "ruRU")
                    KnownSlowFlyMountList.Add("Ветролет");
                logs("[ScanMountListsForKnown] Flying Machine/Ветролет добавлен в список KnownSlowGroundMountList");
            }
        }

        if (Skill.GetValue(SkillLine.Engineering) >= 375)
        {
            if (SpellManager.ExistSpellBook("Turbo-Charged Flying Machine") || SpellManager.ExistSpellBook("Турбоветролет"))
            {
                if (GetLocale.Contains("en"))
                    KnownFastFlyMountList.Add("Turbo-Charged Flying Machine");
                if (GetLocale == "ruRU")
                    KnownFastFlyMountList.Add("Турбоветролет");
                logs("[ScanMountListsForKnown] Turbo-Charged Flying Machine/Турбоветролет добавлен в список KnownSlowGroundMountList");
            }
        }

        if (Skill.GetValue(SkillLine.Tailoring) >= 300)
        {
            if (SpellManager.ExistSpellBook("Flying Carpet") || SpellManager.ExistSpellBook("Ковер-самолет"))
            {
                if (GetLocale.Contains("en"))
                    KnownSlowFlyMountList.Add("Flying Carpet");
                if (GetLocale == "ruRU")
                    KnownSlowFlyMountList.Add("Ковер-самолет");
                logs("Flying Carpet/Ковер-самолет добавлен в список KnownSlowGroundMountList");
            }
        }

        if (Skill.GetValue(SkillLine.Tailoring) >= 425)
        {
            if (SpellManager.ExistSpellBook("Frosty Flying Carpet") || SpellManager.ExistSpellBook("Заиндевевший ковер-самолет"))
            {
                if (GetLocale.Contains("en"))
                    KnownFastFlyMountList.Add("Frosty Flying Carpet");
                if (GetLocale == "ruRU")
                    KnownFastFlyMountList.Add("Заиндевевший ковер-самолет");
                logs("[ScanMountListsForKnown] Frosty Flying Carpet/Заиндевевший ковер-самолет добавлен в список KnownSlowGroundMountList");
            }

            if (SpellManager.ExistSpellBook("Magnificent Flying Carpet") || SpellManager.ExistSpellBook("Великолепный ковер-самолет"))
            {
                if (GetLocale.Contains("en"))
                    KnownFastFlyMountList.Add("Magnificent Flying Carpet");
                if (GetLocale == "ruRU")
                    KnownFastFlyMountList.Add("Великолепный ковер-самолет");
                logs("[ScanMountListsForKnown] Magnificent Flying Carpet/Великолепный ковер-самолет добавлен в список KnownSlowGroundMountList");
            }
        }
    }

    private bool KnowMountLua(string name)
    {
        return Lua.LuaDoString<bool>(FormatLua(@"for i=1,GetNumCompanions('MOUNT') do _,creatureName = GetCompanionInfo('MOUNT', i) if creatureName == ""{0}"" then print('луа: знаем маунта ""{0}""') return true end end", name));
    }

    private void GenerateFrameNames()
    {
        for (int i = 0; i <= rnd(5000, 10000); i++)
        {
            RandomWordsFromGenerator.Add(Others.GetRandomStringReadable(rnd(3, 11)));
        }

        foreach (var word in RandomWordsNatural.Distinct())
        {
            RandomWordsNaturalUpperCase.Add(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(word));
        }


        int PauseButtonFrameNamePartOrder = rnd(1, 8);

        if (PauseButtonFrameNamePartOrder == 1)
            PauseButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (PauseButtonFrameNamePartOrder == 2)
            PauseButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (PauseButtonFrameNamePartOrder == 3)
            PauseButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (PauseButtonFrameNamePartOrder == 4)
            PauseButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (PauseButtonFrameNamePartOrder == 5)
            PauseButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (PauseButtonFrameNamePartOrder == 6)
            PauseButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (PauseButtonFrameNamePartOrder == 7)
            PauseButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("PauseButtonFrameName", PauseButtonFrameName);

        sleep(200);

        int CenterTextFrameNamePartOrder = rnd(1, 8);

        if (CenterTextFrameNamePartOrder == 1)
            CenterTextFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (CenterTextFrameNamePartOrder == 2)
            CenterTextFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (CenterTextFrameNamePartOrder == 3)
            CenterTextFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (CenterTextFrameNamePartOrder == 4)
            CenterTextFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (CenterTextFrameNamePartOrder == 5)
            CenterTextFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (CenterTextFrameNamePartOrder == 6)
            CenterTextFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (CenterTextFrameNamePartOrder == 7)
            CenterTextFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("CenterTextFrameName", CenterTextFrameName);

        sleep(200);

        int ReloadButtonFrameNamePartOrder = rnd(1, 8);

        if (ReloadButtonFrameNamePartOrder == 1)
            ReloadButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (ReloadButtonFrameNamePartOrder == 2)
            ReloadButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (ReloadButtonFrameNamePartOrder == 3)
            ReloadButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (ReloadButtonFrameNamePartOrder == 4)
            ReloadButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ReloadButtonFrameNamePartOrder == 5)
            ReloadButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ReloadButtonFrameNamePartOrder == 6)
            ReloadButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ReloadButtonFrameNamePartOrder == 7)
            ReloadButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("ReloadButtonFrameName", ReloadButtonFrameName);

        sleep(200);

        int HSButtonFrameNamePartOrder = rnd(1, 8);

        if (HSButtonFrameNamePartOrder == 1)
            HSButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (HSButtonFrameNamePartOrder == 2)
            HSButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (HSButtonFrameNamePartOrder == 3)
            HSButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (HSButtonFrameNamePartOrder == 4)
            HSButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (HSButtonFrameNamePartOrder == 5)
            HSButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (HSButtonFrameNamePartOrder == 6)
            HSButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (HSButtonFrameNamePartOrder == 7)
            HSButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("HSButtonFrameName", HSButtonFrameName);

        sleep(200);

        int BigFPSButtonFrameNamePartOrder = rnd(1, 8);

        if (BigFPSButtonFrameNamePartOrder == 1)
            BigFPSButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (BigFPSButtonFrameNamePartOrder == 2)
            BigFPSButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (BigFPSButtonFrameNamePartOrder == 3)
            BigFPSButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (BigFPSButtonFrameNamePartOrder == 4)
            BigFPSButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (BigFPSButtonFrameNamePartOrder == 5)
            BigFPSButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (BigFPSButtonFrameNamePartOrder == 6)
            BigFPSButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (BigFPSButtonFrameNamePartOrder == 7)
            BigFPSButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("BigFPSButtonFrameName", BigFPSButtonFrameName);

        sleep(200);

        int LoadAddonsButtonFrameNamePartOrder = rnd(1, 8);

        if (LoadAddonsButtonFrameNamePartOrder == 1)
            LoadAddonsButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (LoadAddonsButtonFrameNamePartOrder == 2)
            LoadAddonsButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (LoadAddonsButtonFrameNamePartOrder == 3)
            LoadAddonsButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (LoadAddonsButtonFrameNamePartOrder == 4)
            LoadAddonsButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (LoadAddonsButtonFrameNamePartOrder == 5)
            LoadAddonsButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (LoadAddonsButtonFrameNamePartOrder == 6)
            LoadAddonsButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (LoadAddonsButtonFrameNamePartOrder == 7)
            LoadAddonsButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("LoadAddonsButtonFrameName", LoadAddonsButtonFrameName);

        sleep(200);

        int ShowAppButtonFrameNamePartOrder = rnd(1, 8);

        if (ShowAppButtonFrameNamePartOrder == 1)
            ShowAppButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (ShowAppButtonFrameNamePartOrder == 2)
            ShowAppButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (ShowAppButtonFrameNamePartOrder == 3)
            ShowAppButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (ShowAppButtonFrameNamePartOrder == 4)
            ShowAppButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ShowAppButtonFrameNamePartOrder == 5)
            ShowAppButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ShowAppButtonFrameNamePartOrder == 6)
            ShowAppButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ShowAppButtonFrameNamePartOrder == 7)
            ShowAppButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("ShowAppButtonFrameName", ShowAppButtonFrameName);

        sleep(200);

        int DontRestoreDownWowButtonFrameNamePartOrder = rnd(1, 8);

        if (DontRestoreDownWowButtonFrameNamePartOrder == 1)
            DontRestoreDownWowButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (DontRestoreDownWowButtonFrameNamePartOrder == 2)
            DontRestoreDownWowButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (DontRestoreDownWowButtonFrameNamePartOrder == 3)
            DontRestoreDownWowButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (DontRestoreDownWowButtonFrameNamePartOrder == 4)
            DontRestoreDownWowButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (DontRestoreDownWowButtonFrameNamePartOrder == 5)
            DontRestoreDownWowButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (DontRestoreDownWowButtonFrameNamePartOrder == 6)
            DontRestoreDownWowButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (DontRestoreDownWowButtonFrameNamePartOrder == 7)
            DontRestoreDownWowButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("DontRestoreDownWowButtonFrameName", DontRestoreDownWowButtonFrameName);

        sleep(200);

        int LogsButtonFrameNamePartOrder = rnd(1, 8);

        if (LogsButtonFrameNamePartOrder == 1)
            LogsButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (LogsButtonFrameNamePartOrder == 2)
            LogsButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (LogsButtonFrameNamePartOrder == 3)
            LogsButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (LogsButtonFrameNamePartOrder == 4)
            LogsButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (LogsButtonFrameNamePartOrder == 5)
            LogsButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (LogsButtonFrameNamePartOrder == 6)
            LogsButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (LogsButtonFrameNamePartOrder == 7)
            LogsButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("LogsButtonFrameName", LogsButtonFrameName);

        sleep(200);

        int ButtonsFrameNamePartOrder = rnd(1, 8);

        if (ButtonsFrameNamePartOrder == 1)
            ButtonsFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (ButtonsFrameNamePartOrder == 2)
            ButtonsFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (ButtonsFrameNamePartOrder == 3)
            ButtonsFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (ButtonsFrameNamePartOrder == 4)
            ButtonsFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ButtonsFrameNamePartOrder == 5)
            ButtonsFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ButtonsFrameNamePartOrder == 6)
            ButtonsFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (ButtonsFrameNamePartOrder == 7)
            ButtonsFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("ButtonsFrameName", ButtonsFrameName);

        sleep(200);

        int NickNameFrameNamePartOrder = rnd(1, 8);

        if (NickNameFrameNamePartOrder == 1)
            NameChangeScriptsFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (NickNameFrameNamePartOrder == 2)
            NameChangeScriptsFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (NickNameFrameNamePartOrder == 3)
            NameChangeScriptsFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (NickNameFrameNamePartOrder == 4)
            NameChangeScriptsFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (NickNameFrameNamePartOrder == 5)
            NameChangeScriptsFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (NickNameFrameNamePartOrder == 6)
            NameChangeScriptsFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (NickNameFrameNamePartOrder == 7)
            NameChangeScriptsFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("NameChangeScriptsFrameName", NameChangeScriptsFrameName);

        sleep(200);

        int KillAllTasksFrameNamePartOrder = rnd(1, 8);

        if (KillAllTasksFrameNamePartOrder == 1)
            KillAllTasksFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (KillAllTasksFrameNamePartOrder == 2)
            KillAllTasksFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (KillAllTasksFrameNamePartOrder == 3)
            KillAllTasksFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (KillAllTasksFrameNamePartOrder == 4)
            KillAllTasksFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (KillAllTasksFrameNamePartOrder == 5)
            KillAllTasksFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (KillAllTasksFrameNamePartOrder == 6)
            KillAllTasksFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (KillAllTasksFrameNamePartOrder == 7)
            KillAllTasksFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("KillAllTasksFrameName", KillAllTasksFrameName);

        sleep(200);
        int MailFrameNamePartOrder = rnd(1, 8);

        if (MailFrameNamePartOrder == 1)
            MailButtonFrameName = RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)];

        if (MailFrameNamePartOrder == 2)
            MailButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "";

        if (MailFrameNamePartOrder == 3)
            MailButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "";

        if (MailFrameNamePartOrder == 4)
            MailButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (MailFrameNamePartOrder == 5)
            MailButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (MailFrameNamePartOrder == 6)
            MailButtonFrameName = "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        if (MailFrameNamePartOrder == 7)
            MailButtonFrameName = "" + RandomWordsNaturalUpperCase[rnd(0, RandomWordsNaturalUpperCase.Count - 1)] + "" + RandomWordsFromGenerator[rnd(0, RandomWordsFromGenerator.Count - 1)] + "" + FrameNamesPart3[rnd(0, FrameNamesPart3.Count - 1)] + "";

        Var.SetVar("MailButtonFrameName", MailButtonFrameName);

        logs("MailButtonFrameName == " + MailButtonFrameName + "");
        logs("KillAllTasksFrameName == " + KillAllTasksFrameName + "");
        logs("NameChangeScriptsFrameName == " + NameChangeScriptsFrameName + "");
        logs("ButtonsFrameName == " + ButtonsFrameName + "");
        logs("LogsButtonFrameName == " + LogsButtonFrameName + "");
        logs("DontRestoreDownWowButtonFrameName == " + DontRestoreDownWowButtonFrameName + "");
        logs("ShowAppButtonFrameName == " + ShowAppButtonFrameName + "");
        logs("LoadAddonsButtonFrameName == " + LoadAddonsButtonFrameName + "");
        logs("BigFPSButtonFrameName == " + BigFPSButtonFrameName + "");
        logs("HSButtonFrameName == " + HSButtonFrameName + "");
        logs("ReloadButtonFrameName == " + ReloadButtonFrameName + "");
        logs("CenterTextFrameName == " + CenterTextFrameName + "");
        logs("PauseButtonFrameName == " + PauseButtonFrameName + "");

        if (KillAllTasksFrameName == "" || NameChangeScriptsFrameName == "" || ButtonsFrameName == "" || LogsButtonFrameName == "" || DontRestoreDownWowButtonFrameName == "" || ShowAppButtonFrameName == "" || LoadAddonsButtonFrameName == "" || BigFPSButtonFrameName == "" || HSButtonFrameName == "" || ReloadButtonFrameName == "" || CenterTextFrameName == "" || PauseButtonFrameName == "" || MailButtonFrameName == "")
        {
            sleep(1000);
            logs("один из фреймов без названия");
            print("один из фреймов без названия");
            SendDiscordMessageDebug2("[" + Time() + "] [" + me.Name + "] ошибка: один из фреймов без названия");
        }

        if (((KillAllTasksFrameName == NameChangeScriptsFrameName) || (KillAllTasksFrameName == ButtonsFrameName) || (KillAllTasksFrameName == LogsButtonFrameName) || (KillAllTasksFrameName == DontRestoreDownWowButtonFrameName) || (KillAllTasksFrameName == ShowAppButtonFrameName) || (KillAllTasksFrameName == LoadAddonsButtonFrameName) || (KillAllTasksFrameName == BigFPSButtonFrameName) || (KillAllTasksFrameName == HSButtonFrameName) || (KillAllTasksFrameName == ReloadButtonFrameName) || (KillAllTasksFrameName == CenterTextFrameName) || (KillAllTasksFrameName == PauseButtonFrameName)) || ((NameChangeScriptsFrameName == ButtonsFrameName) || (NameChangeScriptsFrameName == LogsButtonFrameName) || (NameChangeScriptsFrameName == DontRestoreDownWowButtonFrameName) || (NameChangeScriptsFrameName == ShowAppButtonFrameName) || (NameChangeScriptsFrameName == LoadAddonsButtonFrameName) || (NameChangeScriptsFrameName == BigFPSButtonFrameName) || (NameChangeScriptsFrameName == HSButtonFrameName) || (NameChangeScriptsFrameName == ReloadButtonFrameName) || (NameChangeScriptsFrameName == CenterTextFrameName) || (NameChangeScriptsFrameName == PauseButtonFrameName)) || ((ButtonsFrameName == LogsButtonFrameName) || (ButtonsFrameName == DontRestoreDownWowButtonFrameName) || (ButtonsFrameName == ShowAppButtonFrameName) || (ButtonsFrameName == LoadAddonsButtonFrameName) || (ButtonsFrameName == BigFPSButtonFrameName) || (ButtonsFrameName == HSButtonFrameName) || (ButtonsFrameName == ReloadButtonFrameName) || (ButtonsFrameName == CenterTextFrameName) || (ButtonsFrameName == PauseButtonFrameName)) || ((LogsButtonFrameName == DontRestoreDownWowButtonFrameName) || (LogsButtonFrameName == ShowAppButtonFrameName) || (LogsButtonFrameName == LoadAddonsButtonFrameName) || (LogsButtonFrameName == BigFPSButtonFrameName) || (LogsButtonFrameName == HSButtonFrameName) || (LogsButtonFrameName == ReloadButtonFrameName) || (LogsButtonFrameName == CenterTextFrameName) || (LogsButtonFrameName == PauseButtonFrameName)) || ((DontRestoreDownWowButtonFrameName == ShowAppButtonFrameName) || (DontRestoreDownWowButtonFrameName == LoadAddonsButtonFrameName) || (DontRestoreDownWowButtonFrameName == BigFPSButtonFrameName) || (DontRestoreDownWowButtonFrameName == HSButtonFrameName) || (DontRestoreDownWowButtonFrameName == ReloadButtonFrameName) || (DontRestoreDownWowButtonFrameName == CenterTextFrameName) || (DontRestoreDownWowButtonFrameName == PauseButtonFrameName)) || ((ShowAppButtonFrameName == LoadAddonsButtonFrameName) || (ShowAppButtonFrameName == BigFPSButtonFrameName) || (ShowAppButtonFrameName == HSButtonFrameName) || (ShowAppButtonFrameName == ReloadButtonFrameName) || (ShowAppButtonFrameName == CenterTextFrameName) || (ShowAppButtonFrameName == PauseButtonFrameName)) || ((LoadAddonsButtonFrameName == BigFPSButtonFrameName) || (LoadAddonsButtonFrameName == HSButtonFrameName) || (LoadAddonsButtonFrameName == ReloadButtonFrameName) || (LoadAddonsButtonFrameName == CenterTextFrameName) || (LoadAddonsButtonFrameName == PauseButtonFrameName)) || ((BigFPSButtonFrameName == HSButtonFrameName) || (BigFPSButtonFrameName == ReloadButtonFrameName) || (BigFPSButtonFrameName == CenterTextFrameName) || (BigFPSButtonFrameName == PauseButtonFrameName)) || ((HSButtonFrameName == ReloadButtonFrameName) || (HSButtonFrameName == CenterTextFrameName) || (HSButtonFrameName == PauseButtonFrameName)) || ((ReloadButtonFrameName == CenterTextFrameName) || (ReloadButtonFrameName == PauseButtonFrameName)) || ((CenterTextFrameName == PauseButtonFrameName)))
        {
            logs("ОШИБКА: НАЗВАНИЕ ОДНОГО ИЗ ФРЕЙМОВ СОВПАДАЕТ С НАЗВАНИЕМ ДРУГОГО");
            print("ОШИБКА: НАЗВАНИЕ ОДНОГО ИЗ ФРЕЙМОВ СОВПАДАЕТ С НАЗВАНИЕМ ДРУГОГО");
            SendDiscordMessageDebug2("[" + Time() + "] [" + me.Name + "] ОШИБКА: НАЗВАНИЕ ОДНОГО ИЗ ФРЕЙМОВ СОВПАДАЕТ С НАЗВАНИЕМ ДРУГОГО");
        }

    }

    private void KillAllTasks()
    {
        var runningProcs = from proc in Process.GetProcesses(".") orderby proc.Id select proc;
        sleep(1000);
        while (runningProcs.Count(p => p.ProcessName.Contains("Relogger") || p.ProcessName.Contains("grind") || p.ProcessName.Contains("farm") || p.ProcessName.Contains("wow") || p.ProcessName.Contains("Grind") || p.ProcessName.Contains("Farm") || p.ProcessName.Contains("кач") || p.ProcessName.Contains("фиш") || p.ProcessName.Contains("Wow") || p.ProcessName.Contains("dung") || p.ProcessName.Contains("WRobot") || p.ProcessName.Contains("wotlk")) > 0)
        {
            try
            {

                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("Relogger"))
                    {
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + "");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + "");
                        sleep(2000);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("grind"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("farm"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("wow"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("Grind"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("Farm"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("кач"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("фиш"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("Wow"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("dung"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc + ", некст кил через " + rndx + " мс");
                        sleep(rndx);
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("WRobot"))
                    {
                        var rndx = rnd(22222, 55555);
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + ", некст кил через " + rndx + " мс");
                    }
                }
                sleep(1000);
                foreach (Process proc in Process.GetProcesses())
                {
                    if (proc.ProcessName.Contains("wotlk"))
                    {
                        proc.Kill();
                        SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + "");
                        logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + "");
                    }
                }
            }
            catch (Exception)
            {
                logs("[" + MyRealName + "] [KillAllTasks]: ошибка");
                SendDiscordMessageDebug1("[" + Time() + "] [KillAllTasks]: ошибка");
            }
            SendDiscordMessageDebug1("[" + Time() + "] [KillAllTasks]: все процессы убиты");
            logs("[" + MyRealName + "] [KillAllTasks]: все процессы убиты");
            sleep(1000);
            var runningProcss = from proc in Process.GetProcesses(".") orderby proc.Id select proc;
            if (runningProcss.Count(p => p.ProcessName.Contains("Relogger") && p.ProcessName.Contains("grind") && p.ProcessName.Contains("farm") && p.ProcessName.Contains("wow") && p.ProcessName.Contains("Grind") && p.ProcessName.Contains("Farm") || p.ProcessName.Contains("кач") || p.ProcessName.Contains("фиш") && p.ProcessName.Contains("Wow") && p.ProcessName.Contains("dung") && p.ProcessName.Contains("WRobot") || p.ProcessName.Contains("wotlk")) == 0)
            {
                SendDiscordMessageDebug1("[" + Time() + "] [KillAllTasks]: все процессы убиты (break)");
                logs("[" + MyRealName + "] [KillAllTasks]: все процессы убиты (break)");
                break;
            }
        }
    }

    private bool MeIsKacher()
    {
        return (ProfileName() == "horde_grinder_1_80.xml" || ProfileName() == "DK_START_AREA.xml" || ProfileName() == "DK_GRIND_65_TO_80_ALI.xml" || ProfileName() == "NORTHREND AH.xml" || ProfileName() == "Outland AH.xml" || ProfileName() == "Borean AH.xml" || ProfileName().Contains("Alliance_1-80"));
    }

    private bool MeIsMountedOrHaveDruidForm()
    {
        mounted = false;

        if (me.IsMounted || (ImDruid && (me.HaveBuff("Swift Flight Form") || me.HaveBuff("Flight Form"))))
            mounted = true;

        return mounted;
    }

    private bool MeIsOnFlyMount()
    {
        flymounted = false;
        foreach (var mount in KnownFastFlyMountList)
        {
            if (me.HaveBuff(mount))
            {
                flymounted = true;
            }
        }
        foreach (var mount in KnownSuperFastFlyMountList)
        {
            if (me.HaveBuff(mount))
            {
                flymounted = true;
            }
        }
        foreach (var mount in KnownSlowFlyMountList)
        {
            if (me.HaveBuff(mount))
            {
                flymounted = true;
            }
        }
        if ((me.IsMounted || (ImDruid && (me.HaveBuff("Swift Flight Form") || me.HaveBuff("Flight Form")))) && me.IsFlying)
        {
            flymounted = true;
        }

        return flymounted;
    }
    private void OnChangedIsStarted(robotManager.Products.Products.IsStartedChangeEventArgs e)
    {
        Logging.Write("@@@ TEST OnChangedIsStarted " + e);
    }
    private void KillAllTasksNOTWORK()
    {

        IOrderedEnumerable<Process> runningProcs = from proc in Process.GetProcesses(".") orderby proc.Id select proc;
        sleep(1000);
        while (Process.GetProcesses().Count(p => (p.MainModule.FileVersionInfo.FileDescription == "World of Warcraft Retail")) > 0)
        {
            try
            {

                foreach (Process proc in Process.GetProcesses())
                {

                    while (proc.MainModule.FileVersionInfo.OriginalFilename == "Relogger.exe")
                    {
                        try
                        {
                            var proccount = Process.GetProcessesByName(proc.ProcessName).Count();
                            for (int i = 0; i <= proccount; i++)
                            {
                                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + " (" + proc.Id + ")");
                                logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + " (" + proc.Id + ")");
                                proc.Kill();
                                sleep(1000);
                            }
                        }
                        catch
                        { }
                    }

                    while (proc.MainModule.FileVersionInfo.FileDescription == "World of Warcraft Retail")
                    {
                        try
                        {
                            var proccount = Process.GetProcessesByName(proc.ProcessName).Count();
                            for (int i = 0; i <= proccount; i++)
                            {
                                var rndx = rnd(22222, 222222);
                                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + " (" + proc.Id + "), некст кил через " + rndx + " мс");
                                logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + " (" + proc.Id + "), некст кил через " + rndx + " мс");
                                proc.Kill();
                                sleep(rndx);
                            }
                        }
                        catch
                        { }
                    }

                    while (proc.MainModule.FileVersionInfo.OriginalFilename == "WRobot.exe")
                    {
                        try
                        {
                            var proccount = Process.GetProcessesByName(proc.ProcessName).Count();
                            for (int i = 0; i <= proccount; i++)
                            {
                                var rndx = rnd(22222, 222222);
                                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + " (" + proc.Id + "), некст кил через " + rndx + " мс");
                                logs("[" + MyRealName + "] [KillAllTasks]: кил процесса " + proc.ProcessName + " (" + proc.Id + "), некст кил через " + rndx + " мс");
                                proc.Kill();
                                sleep(rndx);
                            }
                        }
                        catch
                        { }
                    }

                }
            }
            catch (Exception ex)
            {
                SendDiscordMessageDebug1("[" + Time() + "] [" + MyRealName + "] [KillAllTasks]: ошибка когда киляли процессы" + ex + "");
                logs("[" + MyRealName + "] [KillAllTasks]: ошибка когда киляли процессы: " + ex + "");
            }

            SendDiscordMessageDebug1("[" + Time() + "] [KillAllTasks]: все процессы убиты");
            logs("[" + MyRealName + "] [KillAllTasks]: все процессы убиты");
            sleep(1000);

            var runningProcss = from proc in Process.GetProcesses(".") orderby proc.Id select proc;
            if (runningProcss.Count(p => p.MainModule.FileVersionInfo.FileDescription == "World of Warcraft Retail" && p.MainModule.FileVersionInfo.OriginalFilename == "WRobot.exe" && p.MainModule.FileVersionInfo.OriginalFilename == "Relogger.exe") == 0)
            {
                SendDiscordMessageDebug1("[" + Time() + "] [KillAllTasks]: все процессы убиты (break)");
                logs("[" + MyRealName + "] [KillAllTasks]: все процессы убиты (break)");
                break;
            }
        }
    }

    bool IsLaunched;
    int lastReadMessageId;
    readonly List<string> RandomWordsNaturalUpperCase = new List<string>() { };
    readonly List<ChatTypeId> WHISPER = new List<ChatTypeId> { ChatTypeId.WHISPER };
    readonly List<ChatTypeId> WHISPERSEND = new List<ChatTypeId> { ChatTypeId.WHISPER_SEND };
    readonly List<ChatTypeId> CHANNEL = new List<ChatTypeId> { ChatTypeId.CHANNEL };
    readonly List<ChatTypeId> SAY = new List<ChatTypeId> { ChatTypeId.SAY };
    readonly List<string> KnownSuperFastFlyMountList = new List<string>();
    readonly List<string> KnownFastFlyMountList = new List<string>();
    readonly List<string> KnownSlowFlyMountList = new List<string>();
    readonly List<string> KnownFastGroundMountList = new List<string>();
    readonly List<string> KnownSlowGroundMountList = new List<string>();
    readonly List<string> RandomWordsFromGenerator = new List<string>();
    List<ulong> HatersGuidsList = new List<ulong>();
    List<string> HatersNamesList = new List<string>();
    //List<string> CommonTrashItemsList = new List<string>();
    List<int> CommonTrashItemsNumbersList = new List<int>();
    List<string> DungeonTrashItemsList = new List<string>();
    List<string> TrashFishList = new List<string>();
    List<string> TrashHPFoodList = new List<string>();
    List<string> TrashManaDrinkList = new List<string>();
    Vector3 FlyingStuckPoint;
    Vector3 GroundStuckPoint;
    DateTime FpsCooldown;
    static WoWLocalPlayer me = ObjectManager.Me;
    wManagerSetting Setting;
    DateTime LatencyTimer;
    DateTime LongMoveDistanceCountResetTimer;
    DateTime TryingSomethingFunnyCountResetTimer;
    DateTime StucksInFlightCountResetTimer;
    DateTime CheckHearhstoneTimer;
    DateTime TryToUseFlySwimPathCountResetTimer;
    DateTime StuckCheck;
    DateTime nextLootfilterPulse;
    DateTime FPScheck;
    DateTime LeavePartyCheck;
    DateTime PvpFlagCheck;
    DateTime FullbagsCheck;
    DateTime SpiritHealerCheck;
    DateTime DummyCheck;
    DateTime FramesUpdatePulse;
    DateTime PauseButtonCheckPulse;
    DateTime ReagentsCheck;
    DateTime NextGMCheck;
    DateTime TalentsPulse;
    DateTime MammothBaitCheckPulse;
    DateTime MountCheck;
    DateTime InviteAndLeavePartyPulse;
    DateTime MeInWaterCheck;
    DateTime RandomTargetAndAttackPlayersPulse;
    DateTime SettingsSpamPulse;
    DateTime UnstuckCDTimer;
    DateTime CustomBuffsPotionsCheck;
    DateTime CustomBuffsCheck;
    DateTime PotionsPulse;
    DateTime HaterChecksPulse;
    DateTime PartyInviteCheck;
    DateTime MeIsTargettedBySomeone;
    DateTime CombatEventsCheck;
    DateTime CombatWithPlayerCheck;
    Timer MainMovementTimer = new Timer();
    readonly Timer IgnoreFightWithPlayerTimer = new Timer();
    readonly Timer TestTimer = new Timer();
    readonly Timer TenSecondTimer = new Timer();
    readonly Spell PsychicScream = new Spell("Psychic Scream");
    readonly Spell Repentance = new Spell("Repentance");
    readonly Spell HammerofJustice = new Spell("Hammer of Justice");
    DateTime RestoreDownWowWindowPreTimer;
    DateTime RestoreDownWhenNotInGameTimer;
    DateTime BasicScriptsErrorsCloseTime;
    DateTime nextCheckEnemyNear;
    DateTime GMInGameCheckTimer;
    int CurrentMining = 0;
    int CurrentHerbalism = 0;
    string MyFaction;
    string classcolor;
    string factioncolor;
    string MyRealName;
    int myitemlevel;
    string RealmShortName;
    bool ImDK;
    bool ImWarr;
    bool ImPal;
    bool ImDruid;
    bool ImRogue;
    bool ImHunter;
    bool ImPriest;
    bool ImWarlock;
    bool ImMage;
    bool ImShaman;
    int RandomMovementPlusMinusNumber;
    DateTime MaximizeTime;
    DateTime ScreenshotTime;
    DateTime WhoTargetMeTimer;
    DateTime LastManualMaximizeWoWWindowTime;
    DateTime StuckInLobbyTimer;
    int GankWaitTime;
    bool GetGanked;
    DateTime FlyBaitAlertTimer;
    DateTime PositionZTimer;
    bool InGhostAndFatigue;
    DateTime TotownStatisticResetTimer;
    DateTime StuckStatisticResetTimer;
    DateTime StuckResolverCountResetTimer;
    bool jumpedonmount;
    bool MeIsMeleeClass;
    bool MeIsRangeClass;
    bool ShowLogsInWowChat;
    bool ShowLogsInWowChat2;
    bool CtmToMailboxLaunched;
    string GetLocale;
    string PauseButtonFrameName;
    string CenterTextFrameName;
    string ReloadButtonFrameName;
    string MailButtonFrameName;
    string HSButtonFrameName;
    string BigFPSButtonFrameName;
    string LoadAddonsButtonFrameName;
    string ShowAppButtonFrameName;
    string DontRestoreDownWowButtonFrameName;
    string LogsButtonFrameName;
    string ButtonsFrameName;
    string NameChangeScriptsFrameName;
    string KillAllTasksFrameName;
    bool HaveColdweatherFlying;
    bool KilledByPlayer;
    bool HaveClockwerk;
    Vector3 LastKilledByEnemyPlayerDeathPosition;
    Vector3 PreviousKilledByEnemyPlayerDeathPosition;
    Vector3 LastDeathPosition;
    Vector3 PreviousDeathPosition;
    DateTime TenSecGankCheckLogEntry;
    DateTime LastDeathPositionResetTimer;
    Vector3 CantReachStuckPosition;
    DateTime ValleyofEchoesTimer;
    Vector3 ValleyofEchoesBugPoint;
    int ValleyofEchoesBugPointStuckCount;
    bool MeIsHealClassOrMage;
    DateTime CheckIfFightClassDisposedTimer;
    DateTime LuaErrorCheckTimer;
    DateTime ReputationChangeInDesolaceTimer;
    int ImportantFunctionsRandomCheckTime;
    DateTime NextInactiveActionTime;
    bool mounted;
    bool flymounted;
    DateTime PvpEmoteTimer;
    string LastPlayerThatWeFight;
    DateTime ActivateTaxiNodesTime;
    int latency;
    DateTime Test10SecTimer;
    Vector3 PartyMemberLastPos;
    bool HaveNitro;
    private uint NormalRenderValue;
    bool EnemyHaveStealth;
    bool InitializedAndLaunched;
    bool HaveFlyMount;
    bool HaveGroundMount;
    bool FramesCreated;
    int OldMountCountValue;
    DateTime TestLogSpamTimer;
    DateTime MountCountChangeCheckTime;

    string DateAndVersion = "14/12/2020; r00076b";
}
